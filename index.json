[{"categories":null,"contents":"关于我 喜欢和机器说话，偶尔也和人类交流。\n喜欢造轮子，因为别人的轮子是别人的。\n关于本站 Namesilo（域名价格较低，免费隐私保护，支持支付宝和银联/云闪付）：AFF购买\n搬瓦工（你懂的，支持支付宝和银联/云闪付）：AFF购买\n","permalink":"https://yanyong.cc/about/","tags":null,"title":"关于"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nhttps://gohugo.io/tools/search/#github-gist-for-fusejs-integration ","permalink":"https://yanyong.cc/search/","tags":null,"title":"搜索"},{"categories":["Uncategorized"],"contents":"背景 一直想写个本地音乐播放器，类似 foobar2000 或 AIMP\n先取个名吧，来个脑洞词 poplayer (popular + player)\n再设计个logo吧，决定用SVG手写\n音乐符号♫的unicode码x266B 参考 ♫\n也可以直接输入符号♫\n上代码 logo.svg\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; version=\u0026#34;1.1\u0026#34; width=\u0026#34;32\u0026#34; height=\u0026#34;32\u0026#34;\u0026gt; \u0026lt;defs\u0026gt; \u0026lt;linearGradient id=\u0026#34;grad1\u0026#34; x1=\u0026#34;0%\u0026#34; y1=\u0026#34;100%\u0026#34; x2=\u0026#34;100%\u0026#34; y2=\u0026#34;0%\u0026#34;\u0026gt; \u0026lt;stop offset=\u0026#34;0%\u0026#34; style=\u0026#34;stop-color:rgb(115,70,200);stop-opacity:1\u0026#34; /\u0026gt; \u0026lt;stop offset=\u0026#34;100%\u0026#34; style=\u0026#34;stop-color:rgb(255,50,100);stop-opacity:1\u0026#34; /\u0026gt; \u0026lt;/linearGradient\u0026gt; \u0026lt;/defs\u0026gt; \u0026lt;circle cx=\u0026#34;16\u0026#34; cy=\u0026#34;16\u0026#34; r=\u0026#34;16\u0026#34; fill=\u0026#34;url(#grad1)\u0026#34; /\u0026gt; \u0026lt;text fill=\u0026#34;#000000\u0026#34; font-size=\u0026#34;24\u0026#34; font-family=\u0026#34;Arial, sans-serif\u0026#34; x=\u0026#34;16\u0026#34; y=\u0026#34;16\u0026#34; text-anchor=\u0026#34;middle\u0026#34; dominant-baseline=\u0026#34;central\u0026#34;\u0026gt;\u0026amp;#x266B;\u0026lt;/text\u0026gt; \u0026lt;/svg\u0026gt; logo-poplayer.svg\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; version=\u0026#34;1.1\u0026#34; width=\u0026#34;120\u0026#34; height=\u0026#34;32\u0026#34;\u0026gt; \u0026lt;defs\u0026gt; \u0026lt;linearGradient id=\u0026#34;grad1\u0026#34; x1=\u0026#34;0%\u0026#34; y1=\u0026#34;100%\u0026#34; x2=\u0026#34;100%\u0026#34; y2=\u0026#34;0%\u0026#34;\u0026gt; \u0026lt;stop offset=\u0026#34;0%\u0026#34; style=\u0026#34;stop-color:rgb(115,70,200);stop-opacity:1\u0026#34; /\u0026gt; \u0026lt;stop offset=\u0026#34;100%\u0026#34; style=\u0026#34;stop-color:rgb(255,50,100);stop-opacity:1\u0026#34; /\u0026gt; \u0026lt;/linearGradient\u0026gt; \u0026lt;/defs\u0026gt; \u0026lt;circle cx=\u0026#34;16\u0026#34; cy=\u0026#34;16\u0026#34; r=\u0026#34;16\u0026#34; fill=\u0026#34;url(#grad1)\u0026#34; /\u0026gt; \u0026lt;text fill=\u0026#34;#000000\u0026#34; font-size=\u0026#34;24\u0026#34; font-family=\u0026#34;Arial, sans-serif\u0026#34; x=\u0026#34;16\u0026#34; y=\u0026#34;16\u0026#34; text-anchor=\u0026#34;middle\u0026#34; dominant-baseline=\u0026#34;central\u0026#34;\u0026gt;♫\u0026lt;/text\u0026gt; \u0026lt;text fill=\u0026#34;rgb(255,50,100)\u0026#34; font-size=\u0026#34;20\u0026#34; font-family=\u0026#34;Arial, sans-serif\u0026#34; x=\u0026#34;32\u0026#34; y=\u0026#34;16\u0026#34; font-weight=\u0026#34;bold\u0026#34; dominant-baseline=\u0026#34;central\u0026#34;\u0026gt;Poplayer\u0026lt;/text\u0026gt; \u0026lt;/svg\u0026gt; Qt中加载SVG 加载到Qt中发现音乐符号和文字的位置不对，是\u0026lt;text\u0026gt;中的某些居中属性Qt没有正确识别？ 经过一番搜索，发现SVG Tiny不是完整的SVG规范\n参考如下：\nRendering SVG Files\nSVG 1.2 Tiny\n解决办法：\n使用 inkscape 把\u0026lt;text\u0026gt;转换为\u0026lt;path\u0026gt;路径绘制\n打开svg文件\nCTRL + A 选中所有对象\n路径 \u0026ndash; 对象转路径\n导出 Plain svg\npath/logo.svg\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;no\u0026#34;?\u0026gt; \u0026lt;svg version=\u0026#34;1.1\u0026#34; width=\u0026#34;32\u0026#34; height=\u0026#34;32\u0026#34; id=\u0026#34;svg2\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; xmlns:svg=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u0026gt; \u0026lt;defs id=\u0026#34;defs2\u0026#34;\u0026gt; \u0026lt;linearGradient id=\u0026#34;grad1\u0026#34; x1=\u0026#34;0\u0026#34; y1=\u0026#34;32\u0026#34; x2=\u0026#34;32\u0026#34; y2=\u0026#34;0\u0026#34; gradientUnits=\u0026#34;userSpaceOnUse\u0026#34;\u0026gt; \u0026lt;stop offset=\u0026#34;0%\u0026#34; style=\u0026#34;stop-color:rgb(115,70,200);stop-opacity:1\u0026#34; id=\u0026#34;stop1\u0026#34; /\u0026gt; \u0026lt;stop offset=\u0026#34;100%\u0026#34; style=\u0026#34;stop-color:rgb(255,50,100);stop-opacity:1\u0026#34; id=\u0026#34;stop2\u0026#34; /\u0026gt; \u0026lt;/linearGradient\u0026gt; \u0026lt;/defs\u0026gt; \u0026lt;path id=\u0026#34;circle2\u0026#34; style=\u0026#34;fill:url(#grad1)\u0026#34; d=\u0026#34;M 32,16 A 16,16 0 0 1 16,32 16,16 0 0 1 0,16 16,16 0 0 1 16,0 16,16 0 0 1 32,16 Z\u0026#34; /\u0026gt; \u0026lt;path d=\u0026#34;m 13.257813,7.7235751 9.328124,-2.90625 V 17.8017 q 0,1.453125 -0.375,2.191406 -0.363281,0.738282 -1.253906,1.21875 -0.878906,0.480469 -1.992187,0.480469 -1.277344,0 -2.039063,-0.726562 -0.761719,-0.738282 -0.761719,-1.898438 0,-1.171875 0.902344,-2.015625 0.902344,-0.855469 2.332031,-0.855469 0.46875,0 0.820313,0.08203 0.363281,0.08203 1.171875,0.421875 V 8.2157626 l -6.972656,2.1679684 v 9.796875 q 0,1.417969 -0.375,2.214844 -0.375,0.785156 -1.289063,1.253906 -0.914062,0.46875 -1.992187,0.46875 -1.277344,0 -2.027344,-0.726562 -0.7382813,-0.714844 -0.7382813,-1.875 0,-1.230469 0.8906251,-2.0625 0.890625,-0.84375 2.3320312,-0.84375 0.914063,0 2.039063,0.539062 z\u0026#34; id=\u0026#34;text2\u0026#34; style=\u0026#34;font-size:24px;font-family:Arial, sans-serif;dominant-baseline:central;text-anchor:middle\u0026#34; aria-label=\u0026#34;♫\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; path/logo-poplayer.svg\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;no\u0026#34;?\u0026gt; \u0026lt;svg version=\u0026#34;1.1\u0026#34; width=\u0026#34;116.73633\u0026#34; height=\u0026#34;32\u0026#34; id=\u0026#34;svg3\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; xmlns:svg=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u0026gt; \u0026lt;defs id=\u0026#34;defs2\u0026#34;\u0026gt; \u0026lt;linearGradient id=\u0026#34;grad1\u0026#34; x1=\u0026#34;0\u0026#34; y1=\u0026#34;32\u0026#34; x2=\u0026#34;32\u0026#34; y2=\u0026#34;0\u0026#34; gradientUnits=\u0026#34;userSpaceOnUse\u0026#34;\u0026gt; \u0026lt;stop offset=\u0026#34;0%\u0026#34; style=\u0026#34;stop-color:rgb(115,70,200);stop-opacity:1\u0026#34; id=\u0026#34;stop1\u0026#34; /\u0026gt; \u0026lt;stop offset=\u0026#34;100%\u0026#34; style=\u0026#34;stop-color:rgb(255,50,100);stop-opacity:1\u0026#34; id=\u0026#34;stop2\u0026#34; /\u0026gt; \u0026lt;/linearGradient\u0026gt; \u0026lt;/defs\u0026gt; \u0026lt;path id=\u0026#34;circle2\u0026#34; style=\u0026#34;fill:url(#grad1)\u0026#34; d=\u0026#34;M 32,16 A 16,16 0 0 1 16,32 16,16 0 0 1 0,16 16,16 0 0 1 16,0 16,16 0 0 1 32,16 Z\u0026#34; /\u0026gt; \u0026lt;path d=\u0026#34;m 13.257813,7.7235751 9.328124,-2.90625 V 17.8017 q 0,1.453125 -0.375,2.191406 -0.363281,0.738282 -1.253906,1.21875 -0.878906,0.480469 -1.992187,0.480469 -1.277344,0 -2.039063,-0.726562 -0.761719,-0.738282 -0.761719,-1.898438 0,-1.171875 0.902344,-2.015625 0.902344,-0.855469 2.332031,-0.855469 0.46875,0 0.820313,0.08203 0.363281,0.08203 1.171875,0.421875 V 8.2157626 l -6.972656,2.1679684 v 9.796875 q 0,1.417969 -0.375,2.214844 -0.375,0.785156 -1.289063,1.253906 -0.914062,0.46875 -1.992187,0.46875 -1.277344,0 -2.027344,-0.726562 -0.7382813,-0.714844 -0.7382813,-1.875 0,-1.230469 0.8906251,-2.0625 0.890625,-0.84375 2.3320312,-0.84375 0.914063,0 2.039063,0.539062 z\u0026#34; id=\u0026#34;text2\u0026#34; style=\u0026#34;font-size:24px;font-family:Arial, sans-serif;dominant-baseline:central;text-anchor:middle\u0026#34; aria-label=\u0026#34;♫\u0026#34; /\u0026gt; \u0026lt;path d=\u0026#34;M 33.455078,21.515089 V 7.1986823 h 4.638672 q 2.636719,0 3.4375,0.2148438 1.230469,0.3222656 2.060547,1.40625 0.830078,1.0742187 0.830078,2.7832029 0,1.31836 -0.478516,2.216797 -0.478515,0.898438 -1.220703,1.416016 -0.732422,0.507812 -1.49414,0.673828 -1.035157,0.205078 -2.998047,0.205078 h -1.884766 v 5.400391 z M 36.345703,9.6205573 v 4.0624997 h 1.582031 q 1.708985,0 2.285157,-0.224609 0.576171,-0.224609 0.898437,-0.703125 0.332031,-0.478516 0.332031,-1.113281 0,-0.78125 -0.458984,-1.289063 -0.458984,-0.5078123 -1.162109,-0.6347654 -0.517579,-0.097656 -2.080079,-0.097656 z m 9.794922,6.5624997 q 0,-1.367187 0.673828,-2.646484 0.673828,-1.279297 1.904297,-1.953125 1.240234,-0.673828 2.763672,-0.673828 2.353515,0 3.857422,1.533203 1.503906,1.523437 1.503906,3.857422 0,2.353515 -1.523438,3.90625 -1.513671,1.542969 -3.818359,1.542969 -1.425781,0 -2.724609,-0.644532 -1.289063,-0.644531 -1.962891,-1.884765 -0.673828,-1.25 -0.673828,-3.03711 z m 2.8125,0.146485 q 0,1.542968 0.732422,2.363281 0.732422,0.820312 1.80664,0.820312 1.074219,0 1.796875,-0.820312 0.732422,-0.820313 0.732422,-2.382813 0,-1.523437 -0.732422,-2.34375 -0.722656,-0.820312 -1.796875,-0.820312 -1.074218,0 -1.80664,0.820312 -0.732422,0.820313 -0.732422,2.363282 z m 9.960937,-5.185547 h 2.558594 v 1.523437 q 0.498047,-0.78125 1.347656,-1.269531 0.84961,-0.488281 1.884766,-0.488281 1.806641,0 3.066406,1.416015 1.259766,1.416016 1.259766,3.945313 0,2.597656 -1.269531,4.042969 -1.269532,1.435547 -3.076172,1.435547 -0.859375,0 -1.5625,-0.341797 -0.69336,-0.341797 -1.464844,-1.171875 v 5.224609 h -2.744141 z m 2.714844,5.009765 q 0,1.748047 0.69336,2.587891 0.693359,0.830078 1.689453,0.830078 0.957031,0 1.591797,-0.761719 0.634765,-0.771484 0.634765,-2.519531 0,-1.630859 -0.654297,-2.421875 -0.654297,-0.791015 -1.621093,-0.791015 -1.00586,0 -1.669922,0.78125 -0.664063,0.771484 -0.664063,2.294921 z m 9.580078,5.361329 V 7.1986823 h 2.744141 V 21.515089 Z m 7.607422,-7.207032 -2.490234,-0.449218 q 0.419922,-1.503907 1.445312,-2.226563 1.025391,-0.722656 3.046875,-0.722656 1.835938,0 2.734375,0.439453 0.898438,0.429687 1.259766,1.103516 0.371094,0.664062 0.371094,2.451171 l -0.0293,3.203125 q 0,1.367188 0.126953,2.021485 0.136719,0.644531 0.498047,1.386719 H 83.064453 Q 82.957031,21.241651 82.800781,20.704542 82.732422,20.460401 82.703125,20.382276 82,21.06587 81.199219,21.407667 q -0.800782,0.341797 -1.708985,0.341797 -1.601562,0 -2.529297,-0.869141 -0.917968,-0.869141 -0.917968,-2.197266 0,-0.878906 0.419922,-1.5625 0.419921,-0.693359 1.171875,-1.054687 0.761718,-0.371094 2.1875,-0.644531 1.923828,-0.361329 2.666015,-0.673829 v -0.273437 q 0,-0.791016 -0.390625,-1.123047 -0.390625,-0.341797 -1.474609,-0.341797 -0.732422,0 -1.142578,0.292969 -0.410157,0.283203 -0.664063,1.005859 z m 3.671875,2.226563 q -0.527344,0.175781 -1.669922,0.419922 -1.142578,0.24414 -1.49414,0.478515 -0.53711,0.38086 -0.53711,0.966797 0,0.576172 0.429688,0.996094 0.429687,0.419922 1.09375,0.419922 0.742187,0 1.416015,-0.488281 0.498047,-0.371094 0.654297,-0.908204 0.107422,-0.351562 0.107422,-1.33789 z m 4.101563,-5.390625 h 2.919922 l 2.480468,7.363281 2.421875,-7.363281 h 2.841797 l -3.662109,9.980469 -0.654297,1.80664 q -0.361328,0.908203 -0.693359,1.386719 -0.322266,0.478516 -0.751954,0.771484 -0.419921,0.302735 -1.044921,0.46875 -0.615235,0.166016 -1.396485,0.166016 -0.791015,0 -1.552734,-0.166016 L 87.253906,23.40962 q 0.644531,0.126953 1.16211,0.126953 0.957031,0 1.416015,-0.566406 0.458985,-0.556641 0.703125,-1.425782 z m 18.427736,7.070312 2.73437,0.458985 q -0.52734,1.503906 -1.66992,2.294922 -1.13281,0.78125 -2.8418,0.78125 -2.70507,0 -4.003902,-1.767579 -1.025391,-1.416015 -1.025391,-3.574218 0,-2.578125 1.347657,-4.033203 1.347656,-1.464844 3.408206,-1.464844 2.31445,0 3.65234,1.533203 1.33789,1.523437 1.2793,4.677734 h -6.875 q 0.0293,1.220703 0.66406,1.904297 0.63477,0.673828 1.58203,0.673828 0.64453,0 1.08399,-0.351562 0.43945,-0.351563 0.66406,-1.132813 z m 0.15625,-2.773437 q -0.0293,-1.191406 -0.61524,-1.806641 -0.58593,-0.625 -1.42578,-0.625 -0.89843,0 -1.48437,0.654297 -0.58594,0.654297 -0.57617,1.777344 z m 7.58789,6.074219 h -2.74414 V 11.143995 h 2.54883 v 1.474609 q 0.65429,-1.044922 1.17187,-1.376953 0.52735,-0.332031 1.19141,-0.332031 0.9375,0 1.80664,0.517578 l -0.84961,2.392578 q -0.69336,-0.449219 -1.28906,-0.449219 -0.57618,0 -0.97657,0.322266 -0.40039,0.3125 -0.63476,1.142578 -0.22461,0.830078 -0.22461,3.476563 z\u0026#34; id=\u0026#34;text3\u0026#34; style=\u0026#34;font-weight:bold;font-size:20px;font-family:Arial, sans-serif;dominant-baseline:central;fill:#ff3264\u0026#34; aria-label=\u0026#34;Poplayer\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; SVG转换ICO SVG \u0026ndash;\u0026gt; PNG 打开 Inkscape\n打开 logo.svg\n建议导出以下像素\nlogo_16x16.png\nlogo_24x24.png\nlogo_32x32.png\nlogo_48x48.png\nPNG \u0026ndash;\u0026gt; ICO 一个ico文件可以包含多种尺寸，方法如下：\n打开 GIMP\n文件 \u0026ndash; 作为图层打开\n选中以上4个png文件\n文件 \u0026ndash; 导出为\n选择文件类型，选择ico\n导出 logo_48x48.ico\n贝塞尔曲线 曾经在 stackoverflow 回答过的一个关于贝塞尔曲线的问题，纯数学计算，手写 \u0026lt;path\u0026gt; 路径\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; viewBox=\u0026#34;0 0 1000 500\u0026#34;\u0026gt; \u0026lt;text x=\u0026#34;80\u0026#34; y=\u0026#34;162\u0026#34;\u0026gt;line1\u0026lt;/text\u0026gt; \u0026lt;text x=\u0026#34;80\u0026#34; y=\u0026#34;108\u0026#34;\u0026gt;line2\u0026lt;/text\u0026gt; \u0026lt;text x=\u0026#34;80\u0026#34; y=\u0026#34;54\u0026#34;\u0026gt;line3\u0026lt;/text\u0026gt; \u0026lt;path id=\u0026#34;line1_red\u0026#34; d=\u0026#34;\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;red\u0026#34; stroke-width=\u0026#34;48\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; /\u0026gt; \u0026lt;path id=\u0026#34;line2_red\u0026#34; d=\u0026#34;\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;red\u0026#34; stroke-width=\u0026#34;48\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; /\u0026gt; \u0026lt;path id=\u0026#34;line3_red\u0026#34; d=\u0026#34;\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;red\u0026#34; stroke-width=\u0026#34;48\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; /\u0026gt; \u0026lt;path id=\u0026#34;line1_blue\u0026#34; d=\u0026#34;\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;blue\u0026#34; stroke-width=\u0026#34;48\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; /\u0026gt; \u0026lt;path id=\u0026#34;line2_blue\u0026#34; d=\u0026#34;\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;blue\u0026#34; stroke-width=\u0026#34;48\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; /\u0026gt; \u0026lt;path id=\u0026#34;line3_blue\u0026#34; d=\u0026#34;\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;blue\u0026#34; stroke-width=\u0026#34;48\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; /\u0026gt; \u0026lt;path id=\u0026#34;line1_green\u0026#34; d=\u0026#34;\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;green\u0026#34; stroke-width=\u0026#34;48\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; /\u0026gt; \u0026lt;path id=\u0026#34;line2_green\u0026#34; d=\u0026#34;\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;green\u0026#34; stroke-width=\u0026#34;48\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; /\u0026gt; \u0026lt;path id=\u0026#34;line3_green\u0026#34; d=\u0026#34;\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;green\u0026#34; stroke-width=\u0026#34;48\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;script\u0026gt; let line1_red = {}; let line1_blue = {}; line1_red.begin = { x: 162, y: 162 }; line1_blue.end = { x: 756, y: 432 }; let space = 54; let leg1 = line1_blue.end.y - line1_red.begin.y; let line1_intersection = { x: line1_blue.end.x - leg1, y: line1_red.begin.y }; let line_red_length = 260; // closed interval [0, 324] let line_blue_length = 280; // closed interval [0, 381.837661840736] line1_red.end = { x: line1_red.begin.x + line_red_length , y: line1_red.begin.y }; let line2_red = { begin: { x: line1_red.begin.x, y: line1_red.begin.y - space }, end: { x: line1_red.end.x, y: line1_red.begin.y - space } }; let line3_red = { begin: { x: line2_red.begin.x, y: line2_red.begin.y - space }, end: { x: line2_red.end.x, y: line2_red.begin.y - space } }; let offsetone = Math.sqrt((line_blue_length**2) / 2); line1_blue.begin = { x: line1_blue.end.x - offsetone, y: line1_blue.end.y - offsetone }; let offsettwo = Math.sqrt((space**2) / 2); let line2_blue = { begin: { x: line1_blue.begin.x + offsettwo, y: line1_blue.begin.y - offsettwo }, end: { x: line1_blue.end.x + offsettwo, y: line1_blue.end.y - offsettwo } }; let line3_blue = { begin: { x: line2_blue.begin.x + offsettwo, y: line2_blue.begin.y - offsettwo }, end: { x: line2_blue.end.x + offsettwo, y: line2_blue.end.y - offsettwo } }; let leg2 = line2_blue.end.y - line2_red.begin.y let line2_intersection = { x: line2_blue.end.x - leg2, y: line2_red.begin.y }; let leg3 = line3_blue.end.y - line3_red.begin.y let line3_intersection = { x: line3_blue.end.x - leg3, y: line3_red.begin.y }; let line1_green_control = line1_intersection; let line2_green_control = line2_intersection; let line3_green_control = line3_intersection; let line1_green = { begin: { x: line1_red.end.x, y: line1_red.end.y }, end: { x: line1_blue.begin.x, y: line1_blue.begin.y } }; let line2_green = { begin: { x: line2_red.end.x, y: line2_red.end.y }, end: { x: line2_blue.begin.x, y: line2_blue.begin.y } }; let line3_green = { begin: { x: line3_red.end.x, y: line3_red.end.y }, end: { x: line3_blue.begin.x, y: line3_blue.begin.y } }; let line1_red_d = `M ${line1_red.begin.x} ${line1_red.begin.y} L ${line1_red.end.x} ${line1_red.end.y}`; let line2_red_d = `M ${line2_red.begin.x} ${line2_red.begin.y} L ${line2_red.end.x} ${line2_red.end.y}`; let line3_red_d = `M ${line3_red.begin.x} ${line3_red.begin.y} L ${line3_red.end.x} ${line3_red.end.y}`; document.getElementById(\u0026#34;line1_red\u0026#34;).setAttribute(\u0026#34;d\u0026#34;, line1_red_d); document.getElementById(\u0026#34;line2_red\u0026#34;).setAttribute(\u0026#34;d\u0026#34;, line2_red_d); document.getElementById(\u0026#34;line3_red\u0026#34;).setAttribute(\u0026#34;d\u0026#34;, line3_red_d); let line1_blue_d = `M ${line1_blue.begin.x} ${line1_blue.begin.y} L ${line1_blue.end.x} ${line1_blue.end.y}`; let line2_blue_d = `M ${line2_blue.begin.x} ${line2_blue.begin.y} L ${line2_blue.end.x} ${line2_blue.end.y}`; let line3_blue_d = `M ${line3_blue.begin.x} ${line3_blue.begin.y} L ${line3_blue.end.x} ${line3_blue.end.y}`; document.getElementById(\u0026#34;line1_blue\u0026#34;).setAttribute(\u0026#34;d\u0026#34;, line1_blue_d); document.getElementById(\u0026#34;line2_blue\u0026#34;).setAttribute(\u0026#34;d\u0026#34;, line2_blue_d); document.getElementById(\u0026#34;line3_blue\u0026#34;).setAttribute(\u0026#34;d\u0026#34;, line3_blue_d); let line1_green_d = `M ${line1_green.begin.x} ${line1_green.begin.y} Q ${line1_green_control.x} ${line1_green_control.y} ${line1_green.end.x} ${line1_green.end.y}`; let line2_green_d = `M ${line2_green.begin.x} ${line2_green.begin.y} Q ${line2_green_control.x} ${line2_green_control.y} ${line2_green.end.x} ${line2_green.end.y}`; let line3_green_d = `M ${line3_green.begin.x} ${line3_green.begin.y} Q ${line3_green_control.x} ${line3_green_control.y} ${line3_green.end.x} ${line3_green.end.y}`; document.getElementById(\u0026#34;line1_green\u0026#34;).setAttribute(\u0026#34;d\u0026#34;, line1_green_d); document.getElementById(\u0026#34;line2_green\u0026#34;).setAttribute(\u0026#34;d\u0026#34;, line2_green_d); document.getElementById(\u0026#34;line3_green\u0026#34;).setAttribute(\u0026#34;d\u0026#34;, line3_green_d); \u0026lt;/script\u0026gt; 参考链接 菜鸟教程\n贝塞尔曲线\n","permalink":"https://yanyong.cc/post/hand-write-svg/","tags":["svg"],"title":"手写SVG矢量图"},{"categories":["Uncategorized"],"contents":"需求 想知道接口调用时长的增长率，调用频次很高的接口，调用时间超过500毫秒的接口，接口请求数监控（方便知道接口被调用需求增长了）\n分析 nginx日志格式 这里有个陷阱，$http_x_forwarded_for可能会包含逗号,，用逗号做分隔符的话会有bug，省事点直接注释掉\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 log_format main \u0026#39;{\u0026#34;@timestamp\u0026#34;:\u0026#34;$time_iso8601\u0026#34;,\u0026#39; \u0026#39;\u0026#34;host\u0026#34;:\u0026#34;$hostname\u0026#34;,\u0026#39; \u0026#39;\u0026#34;server_ip\u0026#34;:\u0026#34;$server_addr\u0026#34;,\u0026#39; \u0026#39;\u0026#34;client_ip\u0026#34;:\u0026#34;$remote_addr\u0026#34;,\u0026#39; # \u0026#39;\u0026#34;xff\u0026#34;:\u0026#34;$http_x_forwarded_for\u0026#34;,\u0026#39; \u0026#39;\u0026#34;domain\u0026#34;:\u0026#34;$host\u0026#34;,\u0026#39; \u0026#39;\u0026#34;url\u0026#34;:\u0026#34;$uri\u0026#34;,\u0026#39; \u0026#39;\u0026#34;referer\u0026#34;:\u0026#34;$http_referer\u0026#34;,\u0026#39; \u0026#39;\u0026#34;args\u0026#34;:\u0026#34;$args\u0026#34;,\u0026#39; \u0026#39;\u0026#34;upstreamtime\u0026#34;:\u0026#34;$upstream_response_time\u0026#34;,\u0026#39; \u0026#39;\u0026#34;responsetime\u0026#34;:\u0026#34;$request_time\u0026#34;,\u0026#39; \u0026#39;\u0026#34;request_method\u0026#34;:\u0026#34;$request_method\u0026#34;,\u0026#39; \u0026#39;\u0026#34;status\u0026#34;:\u0026#34;$status\u0026#34;,\u0026#39; \u0026#39;\u0026#34;size\u0026#34;:\u0026#34;$body_bytes_sent\u0026#34;,\u0026#39; \u0026#39;\u0026#34;request_length\u0026#34;:\u0026#34;$request_length\u0026#34;,\u0026#39; \u0026#39;\u0026#34;protocol\u0026#34;:\u0026#34;$server_protocol\u0026#34;,\u0026#39; \u0026#39;\u0026#34;upstreamhost\u0026#34;:\u0026#34;$upstream_addr\u0026#34;,\u0026#39; \u0026#39;\u0026#34;file_dir\u0026#34;:\u0026#34;$request_filename\u0026#34;,\u0026#39; \u0026#39;\u0026#34;http_user_agent\u0026#34;:\u0026#34;$http_user_agent\u0026#34;\u0026#39; \u0026#39;}\u0026#39;; 日志样本 1 {\u0026#34;@timestamp\u0026#34;:\u0026#34;2025-09-10T15:26:06+08:00\u0026#34;,\u0026#34;host\u0026#34;:\u0026#34;nginx02\u0026#34;,\u0026#34;server_ip\u0026#34;:\u0026#34;10.129.240.85\u0026#34;,\u0026#34;client_ip\u0026#34;:\u0026#34;10.130.75.34\u0026#34;,\u0026#34;domain\u0026#34;:\u0026#34;ywmom-pre.sunwoda-evb.com\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;/mes/ProductionGroupInfo\u0026#34;,\u0026#34;referer\u0026#34;:\u0026#34;-\u0026#34;,\u0026#34;args\u0026#34;:\u0026#34;-\u0026#34;,\u0026#34;upstreamtime\u0026#34;:\u0026#34;0.012\u0026#34;,\u0026#34;responsetime\u0026#34;:\u0026#34;0.013\u0026#34;,\u0026#34;request_method\u0026#34;:\u0026#34;POST\u0026#34;,\u0026#34;status\u0026#34;:\u0026#34;200\u0026#34;,\u0026#34;size\u0026#34;:\u0026#34;140\u0026#34;,\u0026#34;request_length\u0026#34;:\u0026#34;2243\u0026#34;,\u0026#34;protocol\u0026#34;:\u0026#34;HTTP/1.1\u0026#34;,\u0026#34;upstreamhost\u0026#34;:\u0026#34;10.129.240.123:80\u0026#34;,\u0026#34;file_dir\u0026#34;:\u0026#34;/usr/local/nginx/html/mes/ProductionGroupInfo\u0026#34;,\u0026#34;http_user_agent\u0026#34;:\u0026#34;-\u0026#34;} 编写awk脚本mom.awk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 # awk中变量是全局作用域，同名变量是同一个变量 BEGIN { FS = \u0026#34;[,{]\u0026#34; records1 = 0 records2 = 0 records3 = 0 records4_twosecago_post = 0 records4_twosecago_pre = 0 records4_onwsecago_post = 0 records4_onesecago_pre = 0 currtime = getTimeSeconds() twosecago = getTimeSeconds(-2) onesecago = getTimeSeconds(-1) btob = between_twominago_oneminago_begin = getTimeSeconds(-120) btoe = between_twominago_oneminago_end = getTimeSeconds(-61) bonb = between_oneminago_now_begin = getTimeSeconds(-60) bone = between_oneminago_now_end = onesecago exclude_domain[\u0026#34;harbor-mom.example.com\u0026#34;] exclude_domain[\u0026#34;logs-mom.example.com\u0026#34;] exclude_domain[\u0026#34;oss-mom.example.com\u0026#34;] exclude_domain[\u0026#34;ossapi-mom.example.com\u0026#34;] exclude_domain[\u0026#34;gateway-mom.example.com\u0026#34;] exclude_domain[\u0026#34;idm-mom.example.com\u0026#34;] exclude_domain[\u0026#34;mom.example.com\u0026#34;] exclude_domain[\u0026#34;paas-mom.example.com\u0026#34;] # 需求1平均时长增长率告警：2分钟前到1分钟前 至 前1分钟内 同个接口平均调用时长增长率超过x% x = 50 # 需求2调用频次告警：1秒钟前同IP同接口调用超过y次(包含) y = 6 # 需求3调用时长告警：前1分钟内接口调用时长大于z秒，支持小数 z = 0.5 # 需求4接口请求数告警：2秒前、1秒前 mompost = \u0026#34;mom-post.example.com\u0026#34; mompre = \u0026#34;mom-pre.example.com\u0026#34; z_post = z # 中后工序 z_pre = 5 # 前工序 post_exclude_url[\u0026#34;/mes/LoginCheck\u0026#34;] post_exclude_url[\u0026#34;/mes/SaveInOutStockTime\u0026#34;] post_exclude_url[\u0026#34;/mes/GetTime\u0026#34;] pre_exclude_url[\u0026#34;/mes/preLoginCheck\u0026#34;] pre_exclude_url[\u0026#34;/mes/GetTime\u0026#34;] } function getTimeSeconds(offset) { if (offset == \u0026#34;\u0026#34;) offset = 0 return strftime(\u0026#34;%Y-%m-%dT%H:%M:%S\u0026#34;, systime() + offset) } function sendMsg(msg) { hook = \u0026#34;https://open.feishu.cn/open-apis/bot/v2/hook/uuiduuid-uuid-uuid-uuid-uuiduuiduuid\u0026#34; data = \u0026#34;\u0026#39;{\\\u0026#34;msg_type\\\u0026#34;:\\\u0026#34;text\\\u0026#34;,\\\u0026#34;content\\\u0026#34;:{\\\u0026#34;text\\\u0026#34;:\\\u0026#34;\u0026#34; msg \u0026#34;\\\u0026#34;}}\u0026#39;\u0026#34; command = \u0026#34;curl -X POST -H \\\u0026#34;Content-Type: application/json\\\u0026#34; -d \u0026#34; data \u0026#34; \u0026#34; hook system(command) } { gsub(/\u0026#34;/, \u0026#34;\u0026#34;, $0) match($2, /@timestamp:(.*)\\+08:00/, timestamp) match($5, /client_ip:(.*)/, client_ip) match($6, /domain:(.*)/, domain) match($7, /url:(.*)/, url) match($11, /responsetime:(.*)/, responsetime) if (domain[1] in exclude_domain) next ts = timestamp[1] # 请求时间 ip = client_ip[1] # 客户端IP api = domain[1] url[1] # 接口 rt = responsetime[1] # 响应时长/调用时长 if (ts \u0026gt;= btob \u0026amp;\u0026amp; ts \u0026lt;= btoe) { # 2分钟前到1分钟前 bto_count[api]++ bto_rttotal[api] += rt } else if (ts \u0026gt;= bonb \u0026amp;\u0026amp; ts \u0026lt;= bone) { # 前1分钟内 if (domain[1] == mompost) { if (url[1] in post_exclude_url) next if (rt \u0026gt; z_post) { records3++ log3 = log3 rt \u0026#34;秒 \u0026#34; ts \u0026#34; \u0026#34; ip \u0026#34; \u0026#34; api \u0026#34;\\\\n\u0026#34; } if (ts == twosecago) { records4_twosecago_post++ } else if (ts == onesecago) { records4_onesecago_post++ } } else if (domain[1] == mompre) { if (url[1] in pre_exclude_url) next if (rt \u0026gt; z_pre) { records3++ log3 = log3 rt \u0026#34;秒 \u0026#34; ts \u0026#34; \u0026#34; ip \u0026#34; \u0026#34; api \u0026#34;\\\\n\u0026#34; } if (ts == twosecago) { records4_twosecago_pre++ } else if (ts == onesecago) { records4_onesecago_pre++ } } # 注释掉第一版不区分前后工序 #if (rt \u0026gt; z) { # records3++ # log3 = log3 rt \u0026#34;秒 \u0026#34; ts \u0026#34; \u0026#34; ip \u0026#34; \u0026#34; api \u0026#34;\\\\n\u0026#34; #} bon_count[api]++ bon_rttotal[api] += rt if (ts == onesecago) { # 1秒钟前 onesecago = bone ts_ip_api = ts \u0026#34; \u0026#34; ip \u0026#34; \u0026#34; api onesecago_count[ts_ip_api]++ if (onesecago_count[ts_ip_api] == y) records2++ } } } END { # 打印当前时间(脚本执行开始时间) if (records1 \u0026gt; 0 || records2 \u0026gt; 0 || records3 \u0026gt; 0 || records4_twosecago_post \u0026gt; 0 || records4_twosecago_pre \u0026gt; 0 || records4_onesecago_post \u0026gt; 0 || records4_onesecago_pre \u0026gt; 0) { sendMsg(\u0026#34;当前时间(脚本执行开始时间)：\u0026#34; currtime) } # 需求1 for (i in bto_count) { if (i in bon_count) { # 取交集 bto_rtavg = bto_rttotal[i] / bto_count[i] bon_rtavg = bon_rttotal[i] / bon_count[i] if (bto_rtavg \u0026gt; 0 \u0026amp;\u0026amp; bon_rtavg \u0026gt; 0.4) growth_ratio = bon_rtavg / bto_rtavg - 1 else growth_ratio = 0 growth_pct = growth_ratio * 100 if (growth_pct \u0026gt; x) { records1++ log1 = log1 bto_rtavg\u0026#34;秒(\u0026#34;bto_count[i]\u0026#34;次平均) \u0026#34; bon_rtavg\u0026#34;秒(\u0026#34;bon_count[i]\u0026#34;次平均) \u0026#34; \u0026#34;增长\u0026#34; growth_pct \u0026#34;% \u0026#34; i \u0026#34;\\\\n\u0026#34; } } } if (records1 \u0026gt; 0) { content1_1 = \u0026#34;平均时长增长率告警： 2分钟前到1分钟前(\u0026#34;btob\u0026#34;到\u0026#34;btoe\u0026#34;) 至 前1分钟内(\u0026#34;bonb\u0026#34;到\u0026#34;bone\u0026#34;)\u0026#34; content1_2 = \u0026#34; 同个接口平均调用时长增长率超过\u0026#34; x \u0026#34;%，有以下\u0026#34; records1 \u0026#34;条记录：\u0026#34; \u0026#34;\\\\n\u0026#34; msg1 = content1_1 content1_2 log1 sendMsg(msg1) } # 需求2 if (records2 \u0026gt; 0) { PROCINFO[\u0026#34;sorted_in\u0026#34;] = \u0026#34;@val_num_desc\u0026#34; for (j in onesecago_count){ if (onesecago_count[j] \u0026gt;= y) { log2 = log2 onesecago_count[j] \u0026#34;次 \u0026#34; j \u0026#34;\\\\n\u0026#34; } } content2 = \u0026#34;调用频次告警：1秒钟前(\u0026#34;onesecago\u0026#34;)同IP同接口调用超过\u0026#34; y \u0026#34;次(包含)，有以下\u0026#34; records2 \u0026#34;条记录：\u0026#34; \u0026#34;\\\\n\u0026#34; msg2 = content2 log2 sendMsg(msg2) } # 需求3 if (records3 \u0026gt; 0) { content3 = \u0026#34;调用时长告警：前1分钟内(\u0026#34;bonb\u0026#34;到\u0026#34;bone\u0026#34;)接口调用时长大于\u0026#34; z \u0026#34;秒，有以下\u0026#34; records3 \u0026#34;条记录：\u0026#34; \u0026#34;\\\\n\u0026#34; msg3 = content3 log3 sendMsg(msg3) } # 需求4 if (records4_twosecago_post \u0026gt; 0 || records4_twosecago_pre \u0026gt; 0 || records4_onesecago_post \u0026gt; 0 || records4_onesecago_pre \u0026gt; 0 ) { content4 = \u0026#34;接口请求数告警：\\\\n\u0026#34; content4_post = \u0026#34;中后工序 2秒前(\u0026#34;twosecago\u0026#34; \u0026#34;records4_twosecago_post\u0026#34;次) 1秒前(\u0026#34;onesecago\u0026#34; \u0026#34;records4_onesecago_post\u0026#34;次)\\\\n\u0026#34; content4_pre = \u0026#34;前工序 2秒前(\u0026#34;twosecago\u0026#34; \u0026#34;records4_twosecago_pre\u0026#34;次) 1秒前(\u0026#34;onesecago\u0026#34; \u0026#34;records4_onesecago_pre\u0026#34;次)\u0026#34; msg4 = content4 content4_post content4_pre sendMsg(msg4) } # 分割符 if (records1 \u0026gt; 0 || records2 \u0026gt; 0 || records3 \u0026gt; 0 || records4_twosecago_post \u0026gt; 0 || records4_twosecago_pre \u0026gt; 0 || records4_onesecago_post \u0026gt; 0 || records4_onesecago_pre \u0026gt; 0) { endtime = getTimeSeconds() sendMsg(\u0026#34;脚本执行结束时间：\u0026#34;endtime\u0026#34;------------------------------\u0026#34;) } } 执行脚本 1分钟执行一次，如果接口被调用越来越多，取最后3万可能还不够，需适当调整。\n建议使用方法2，方法1有个已知缺陷，当前循环与下一次循环间隔不是sleep的1分钟，而是1分钟加awk消耗的时间。\n方法1mom-monitor.sh 1 2 3 4 5 6 7 #!/bin/bash echo $$ \u0026gt; /tmp/mom-monitor.pid while true; do tail -30000 /var/log/nginx/access.log | awk -f mom.awk sleep 1m done 1 nohup ./mom-monitor.sh \u0026amp;\u0026gt; /dev/null \u0026amp; 方法2 1 sudo crontab -e 1 * * * * * tail -30000 /var/log/nginx/access.log | awk -f /var/log/nginx/mom.awk 飞书告警结果 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 当前时间(脚本执行开始时间)：2025-09-10T15:43:01 平均时长增长率告警： 2分钟前到1分钟前(2025-09-10T15:41:01到2025-09-10T15:42:00) 至 前1分钟内(2025-09-10T15:42:01到2025-09-10T15:43:00) 同个接口平均调用时长增长率超过50%，有以下1条记录： 0.201333秒(3次平均) 1.033秒(1次平均) 增长413.079% mom-post.example.com/mes/FittingBinding 调用频次告警：1秒钟前(2025-09-10T15:43:00)同IP同接口调用超过6次(包含)，有以下7条记录： 12次 2025-09-10T15:43:00 10.130.75.10 mom-pre.example.com/mes/ProductionGroupInfo 10次 2025-09-10T15:43:00 10.130.14.95 mom-post.example.com/mes/OutStationCheckData 10次 2025-09-10T15:43:00 10.130.15.81 mom-post.example.com/mes/GetSpecifications 8次 2025-09-10T15:43:00 10.130.20.58 mom-post.example.com/mes/MaterialControl 8次 2025-09-10T15:43:00 10.130.15.81 mom-post.example.com/mes/OutStationCheckData 6次 2025-09-10T15:43:00 10.130.20.199 mom-post.example.com/mes/GetTestData 6次 2025-09-10T15:43:00 10.130.14.95 mom-post.example.com/mes/FittingCheckForCell 调用时长告警：前1分钟内(2025-09-10T15:42:01到2025-09-10T15:43:00)接口调用时长大于0.5秒，有以下6条记录： 0.861秒 2025-09-10T15:42:01 10.130.36.71 mom-post.example.com/mes/OutStationCheckData 0.759秒 2025-09-10T15:42:01 10.130.15.164 mom-post.example.com/mes/InStationCheck 0.728秒 2025-09-10T15:42:01 10.130.15.164 mom-post.example.com/mes/InStationCheck 0.835秒 2025-09-10T15:42:01 10.130.14.61 mom-post.example.com/mes/InStationCheck 0.674秒 2025-09-10T15:42:01 10.130.21.71 mom-post.example.com/mes/InStationCheck 0.739秒 2025-09-10T15:42:01 10.130.36.172 mom-post.example.com/mes/InStationCheck 接口请求数告警： 中后工序 2秒前(2025-09-10T15:42:59 90次) 1秒前(2025-09-10T15:43:00 158次) 前工序 2秒前(2025-09-10T15:42:59 76次) 1秒前(2025-09-10T15:43:00 91次) 脚本执行结束时间：2025-09-10T15:43:05------------------------------ ","permalink":"https://yanyong.cc/post/analyze-nginx-log-with-awk/","tags":["awk"],"title":"awk分析nginx日志案例"},{"categories":["Uncategorized"],"contents":"nginx.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 user www-data; pid /run/nginx.pid; worker_processes auto; worker_rlimit_nofile 65535; # Load modules include /etc/nginx/modules-enabled/*.conf; events { multi_accept on; worker_connections 65535; } http { charset utf-8; sendfile on; tcp_nopush on; tcp_nodelay on; server_tokens off; log_not_found off; types_hash_max_size 2048; types_hash_bucket_size 64; client_max_body_size 16M; # MIME include mime.types; default_type application/octet-stream; # Logging access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log warn; # SSL ssl_session_timeout 1d; ssl_session_cache shared:SSL:10m; ssl_session_tickets off; # Diffie-Hellman parameter for DHE ciphersuites ssl_dhparam /etc/nginx/dhparam.pem; # sudo openssl dhparam -out /etc/nginx/dhparam.pem 2048 # Mozilla Intermediate configuration ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384; # OCSP Stapling ssl_stapling on; ssl_stapling_verify on; resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s; resolver_timeout 2s; # Connection header for WebSocket reverse proxy map $http_upgrade $connection_upgrade { default upgrade; \u0026#34;\u0026#34; close; } map $remote_addr $proxy_forwarded_elem { # IPv4 addresses can be sent as-is ~^[0-9.]+$ \u0026#34;for=$remote_addr\u0026#34;; # IPv6 addresses need to be bracketed and quoted ~^[0-9A-Fa-f:.]+$ \u0026#34;for=\\\u0026#34;[$remote_addr]\\\u0026#34;\u0026#34;; # Unix domain socket names cannot be represented in RFC 7239 syntax default \u0026#34;for=unknown\u0026#34;; } map $http_forwarded $proxy_add_forwarded { # If the incoming Forwarded header is syntactically valid, append to it \u0026#34;~^(,[ \\\\t]*)*([!#$%\u0026amp;\u0026#39;*+.^_`|~0-9A-Za-z-]+=([!#$%\u0026amp;\u0026#39;*+.^_`|~0-9A-Za-z-]+|\\\u0026#34;([\\\\t \\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E\\\\x80-\\\\xFF]|\\\\\\\\[\\\\t \\\\x21-\\\\x7E\\\\x80-\\\\xFF])*\\\u0026#34;))?(;([!#$%\u0026amp;\u0026#39;*+.^_`|~0-9A-Za-z-]+=([!#$%\u0026amp;\u0026#39;*+.^_`|~0-9A-Za-z-]+|\\\u0026#34;([\\\\t \\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E\\\\x80-\\\\xFF]|\\\\\\\\[\\\\t \\\\x21-\\\\x7E\\\\x80-\\\\xFF])*\\\u0026#34;))?)*([ \\\\t]*,([ \\\\t]*([!#$%\u0026amp;\u0026#39;*+.^_`|~0-9A-Za-z-]+=([!#$%\u0026amp;\u0026#39;*+.^_`|~0-9A-Za-z-]+|\\\u0026#34;([\\\\t \\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E\\\\x80-\\\\xFF]|\\\\\\\\[\\\\t \\\\x21-\\\\x7E\\\\x80-\\\\xFF])*\\\u0026#34;))?(;([!#$%\u0026amp;\u0026#39;*+.^_`|~0-9A-Za-z-]+=([!#$%\u0026amp;\u0026#39;*+.^_`|~0-9A-Za-z-]+|\\\u0026#34;([\\\\t \\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E\\\\x80-\\\\xFF]|\\\\\\\\[\\\\t \\\\x21-\\\\x7E\\\\x80-\\\\xFF])*\\\u0026#34;))?)*)?)*$\u0026#34; \u0026#34;$http_forwarded, $proxy_forwarded_elem\u0026#34;; # Otherwise, replace it default \u0026#34;$proxy_forwarded_elem\u0026#34;; } # Load configs include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; } security.conf 1 2 3 4 5 6 7 8 9 10 11 12 # security headers add_header X-XSS-Protection \u0026#34;1; mode=block\u0026#34; always; add_header X-Content-Type-Options \u0026#34;nosniff\u0026#34; always; add_header Referrer-Policy \u0026#34;no-referrer-when-downgrade\u0026#34; always; add_header Content-Security-Policy \u0026#34;default-src \u0026#39;self\u0026#39; http: https: ws: wss: data: blob: \u0026#39;unsafe-inline\u0026#39;; frame-ancestors \u0026#39;self\u0026#39;;\u0026#34; always; add_header Permissions-Policy \u0026#34;interest-cohort=()\u0026#34; always; add_header Strict-Transport-Security \u0026#34;max-age=31536000; includeSubDomains\u0026#34; always; # . files location ~ /\\.(?!well-known) { deny all; } general.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # favicon.ico location = /favicon.ico { log_not_found off; } # robots.txt location = /robots.txt { log_not_found off; } # gzip gzip on; gzip_vary on; gzip_proxied any; gzip_comp_level 6; gzip_types text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml; proxy.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 proxy_http_version 1.1; proxy_cache_bypass $http_upgrade; # Proxy SSL proxy_ssl_server_name on; # Proxy headers proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Forwarded $proxy_add_forwarded; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Host $host; proxy_set_header X-Forwarded-Port $server_port; # Proxy timeouts proxy_connect_timeout 60s; proxy_send_timeout 60s; proxy_read_timeout 60s; ","permalink":"https://yanyong.cc/post/nginx-config-example/","tags":["nginx"],"title":"nginx配置示例"},{"categories":["Uncategorized"],"contents":"Proxy to bypass G.F.W 前言 包含nginx 4层代理实现443端口共用\nssl证书 参考 https://yanyong.cc/post/certbot-cloudflare-letsencrypt/\n安装nginx 1 sudo apt -y install nginx libnginx-mod-stream v2ray config.json\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;warning\u0026#34; }, \u0026#34;routing\u0026#34;: { \u0026#34;domainStrategy\u0026#34;: \u0026#34;AsIs\u0026#34;, \u0026#34;rules\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;ip\u0026#34;: [ \u0026#34;geoip:private\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;block\u0026#34; } ] }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 16800, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;uuiduuid-uuid-uuid-uuid-uuiduuiduuid\u0026#34; } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;security\u0026#34;: \u0026#34;none\u0026#34;, // TLS已经交给nginx处理 \u0026#34;wsSettings\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/abcdefg\u0026#34; // 复杂点避免嗅探 } }, \u0026#34;sniffing\u0026#34;: { \u0026#34;enabled\u0026#34;: false }, \u0026#34;allocate\u0026#34;: { \u0026#34;strategy\u0026#34;: \u0026#34;always\u0026#34; } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;direct\u0026#34; }, { \u0026#34;protocol\u0026#34;: \u0026#34;blackhole\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;block\u0026#34; } ] } 运行\n1 sudo docker run -d --name v2ray --network=host --restart=always -v /etc/v2ray/:/etc/v2ray/ -e TZ=Asia/Shanghai v2fly/v2fly-core:v4.45.2 nginx配置\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 server { listen 127.0.0.1:20350 ssl http2; server_name v2ray.yanyong.cc; # SSL ssl_certificate /etc/letsencrypt/live/yanyong.cc/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/yanyong.cc/privkey.pem; ssl_trusted_certificate /etc/letsencrypt/live/yanyong.cc/chain.pem; # security include nginxconfig.io/security.conf; # WebSocket reverse proxy location /abcdefg { proxy_pass http://127.0.0.1:16800; include nginxconfig.io/proxy.conf; } location / { return 301 https://yanyong.cc; } # additional config include nginxconfig.io/general.conf; } 参考链接：\nhttps://www.v2fly.org/\nhttps://github.com/v2fly/v2ray-core\nhttps://github.com/v2fly/v2ray-examples\nhttps://hub.docker.com/r/v2fly/v2fly-core\nxray config.json\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;warning\u0026#34; }, \u0026#34;routing\u0026#34;: { \u0026#34;domainStrategy\u0026#34;: \u0026#34;AsIs\u0026#34;, \u0026#34;rules\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;ip\u0026#34;: [ \u0026#34;geoip:private\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;block\u0026#34; } ] }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 20351, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;vless\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;uuiduuid-uuid-uuid-uuid-uuiduuiduuid\u0026#34;, // 填写你的 UUID \u0026#34;level\u0026#34;: 0, \u0026#34;email\u0026#34;: \u0026#34;user@example.com\u0026#34; } ], \u0026#34;decryption\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;fallbacks\u0026#34;: [ { \u0026#34;dest\u0026#34;: 80 }, { \u0026#34;path\u0026#34;: \u0026#34;/abcdefg\u0026#34;, // 必须换成自定义的 PATH \u0026#34;dest\u0026#34;: 16801, \u0026#34;xver\u0026#34;: 1 } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;tcp\u0026#34;, \u0026#34;security\u0026#34;: \u0026#34;tls\u0026#34;, \u0026#34;tlsSettings\u0026#34;: { \u0026#34;alpn\u0026#34;: [ \u0026#34;http/1.1\u0026#34; ], \u0026#34;certificates\u0026#34;: [ { \u0026#34;certificateFile\u0026#34;: \u0026#34;/etc/xray/ssl/fullchain.pem\u0026#34;, // 换成你的证书，绝对路径 \u0026#34;keyFile\u0026#34;: \u0026#34;/etc/xray/ssl/privkey.pem\u0026#34; // 换成你的私钥，绝对路径 } ] } } }, { \u0026#34;port\u0026#34;: 16801, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;vless\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;uuiduuid-uuid-uuid-uuid-uuiduuiduuid\u0026#34;, // 填写你的 UUID \u0026#34;level\u0026#34;: 0, \u0026#34;email\u0026#34;: \u0026#34;user@example.com\u0026#34; } ], \u0026#34;decryption\u0026#34;: \u0026#34;none\u0026#34; }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;security\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;wsSettings\u0026#34;: { \u0026#34;acceptProxyProtocol\u0026#34;: true, // 提醒：若你用 Nginx/Caddy 等反代 WS，需要删掉这行 \u0026#34;path\u0026#34;: \u0026#34;/abcdefg\u0026#34; // 必须换成自定义的 PATH，需要和上面的一致 } } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;direct\u0026#34; }, { \u0026#34;protocol\u0026#34;: \u0026#34;blackhole\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;block\u0026#34; } ] } 运行\n1 sudo docker run -d --name xray --network=host --restart=always -v /etc/xray:/etc/xray -e TZ=Asia/Shanghai ghcr.io/xtls/xray-core:25.3.6 自动更新证书，编辑/etc/letsencrypt/renewal-hooks/deploy/xray.sh\n1 2 3 4 5 6 7 #!/bin/bash if [ ! -d /etc/xray/ssl ]; then mkdir /etc/xray/ssl fi cp /etc/letsencrypt/live/yanyong.cc/{privkey.pem,fullchain.pem} /etc/xray/ssl/ chmod 400 /etc/xray/ssl/* docker restart xray 参考链接：\nhttps://xtls.github.io/\nhttps://github.com/XTLS/Xray-core\nhttps://github.com/XTLS/Xray-examples\n镜像1： https://github.com/xtls/Xray-core/pkgs/container/xray-core\n镜像2： https://hub.docker.com/r/teddysun/xray\ntrojan config.json\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 { \u0026#34;run_type\u0026#34;: \u0026#34;server\u0026#34;, \u0026#34;local_addr\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;local_port\u0026#34;: 20352, \u0026#34;remote_addr\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;remote_port\u0026#34;: 80, \u0026#34;password\u0026#34;: [ \u0026#34;123456\u0026#34; ], \u0026#34;log_level\u0026#34;: 2, \u0026#34;ssl\u0026#34;: { \u0026#34;cert\u0026#34;: \u0026#34;/config/ssl/fullchain.pem\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;/config/ssl/privkey.pem\u0026#34;, \u0026#34;key_password\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;cipher\u0026#34;: \u0026#34;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\u0026#34;, \u0026#34;cipher_tls13\u0026#34;: \u0026#34;TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384\u0026#34;, \u0026#34;prefer_server_cipher\u0026#34;: true, \u0026#34;alpn\u0026#34;: [ \u0026#34;http/1.1\u0026#34; ], \u0026#34;alpn_port_override\u0026#34;: { \u0026#34;h2\u0026#34;: 81 }, \u0026#34;reuse_session\u0026#34;: true, \u0026#34;session_ticket\u0026#34;: false, \u0026#34;session_timeout\u0026#34;: 600, \u0026#34;plain_http_response\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;curves\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;dhparam\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;tcp\u0026#34;: { \u0026#34;prefer_ipv4\u0026#34;: false, \u0026#34;no_delay\u0026#34;: true, \u0026#34;keep_alive\u0026#34;: true, \u0026#34;reuse_port\u0026#34;: false, \u0026#34;fast_open\u0026#34;: false, \u0026#34;fast_open_qlen\u0026#34;: 20 }, \u0026#34;mysql\u0026#34;: { \u0026#34;enabled\u0026#34;: false, \u0026#34;server_addr\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;server_port\u0026#34;: 3306, \u0026#34;database\u0026#34;: \u0026#34;trojan\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;trojan\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;cert\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ca\u0026#34;: \u0026#34;\u0026#34; } } 运行\nlatest版本其实就是v1.16.0版本，docker仓库没有v1.16.0的tag，v1.16.0是目前最后一个版本，上一次更新时间是2020.6.10\n1 sudo docker run -d --name trojan --network=host --restart=always -v /etc/trojan:/config trojangfw/trojan 自动更新证书，编辑/etc/letsencrypt/renewal-hooks/deploy/trojan.sh\n1 2 3 4 5 6 7 #!/bin/bash if [ ! -d /etc/trojan/ssl ]; then mkdir /etc/trojan/ssl fi cp /etc/letsencrypt/live/yanyong.cc/{privkey.pem,fullchain.pem} /etc/trojan/ssl/ chmod 400 /etc/trojan/ssl/* docker restart trojan 参考链接：\nhttps://trojan-gfw.github.io/trojan/\nhttps://github.com/trojan-gfw/trojan\nhttps://github.com/trojan-gfw/trojan/tree/master/examples\nhttps://hub.docker.com/r/trojangfw/trojan\ntrojan-go config.json\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \u0026#34;run_type\u0026#34;: \u0026#34;server\u0026#34;, \u0026#34;local_addr\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;local_port\u0026#34;: 20353, \u0026#34;remote_addr\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;remote_port\u0026#34;: 80, \u0026#34;log_level\u0026#34;: 2, \u0026#34;password\u0026#34;: [ \u0026#34;123456\u0026#34; ], \u0026#34;ssl\u0026#34;: { \u0026#34;cert\u0026#34;: \u0026#34;/etc/trojan-go/ssl/fullchain.pem\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;/etc/trojan-go/ssl/privkey.pem\u0026#34; }, \u0026#34;router\u0026#34;: { \u0026#34;enabled\u0026#34;: true, \u0026#34;block\u0026#34;: [ \u0026#34;geoip:private\u0026#34; ] }, \u0026#34;websocket\u0026#34;: { \u0026#34;enabled\u0026#34;: true, \u0026#34;path\u0026#34;: \u0026#34;/abcdefg\u0026#34; } } 运行\nv0.10.6，上一次更新时间是2021.9.14\n1 sudo docker run --name trojan-go -d -v /etc/trojan-go/:/etc/trojan-go --network=host --restart=always -e TZ=Asia/Shanghai p4gefau1t/trojan-go:v0.10.6 自动更新证书，编辑/etc/letsencrypt/renewal-hooks/deploy/trojan-go.sh\n1 2 3 4 5 6 7 #!/bin/bash if [ ! -d /etc/trojan-go/ssl ]; then mkdir /etc/trojan-go/ssl fi cp /etc/letsencrypt/live/yanyong.cc/{privkey.pem,fullchain.pem} /etc/trojan-go/ssl/ chmod 400 /etc/trojan-go/ssl/* docker restart trojan-go 参考链接：\nhttps://p4gefau1t.github.io/trojan-go/\nhttps://github.com/p4gefau1t/trojan-go\nhttps://github.com/p4gefau1t/trojan-go/tree/master/example\nhttps://p4gefau1t.github.io/trojan-go/basic/full-config/\nhttps://hub.docker.com/r/p4gefau1t/trojan-go\n配置443端口共用 启用stream模块\n1 sudo ln -s /usr/share/nginx/modules-available/mod-stream.conf /etc/nginx/modules-enabled/mod-stream.conf 编辑nginx.conf中添加以下内容\n1 2 3 stream { include /etc/nginx/stream.d/*.conf; } 编辑/etc/nginx/stream.d/sni.conf\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 map $ssl_preread_server_name $backend_name { v2ray.yanyong.cc v2ray; xray.yanyong.cc xray; trojan.yanyong.cc trojan; trojan-go.yanyong.cc trojan-go; default web; } upstream v2ray { server 127.0.0.1:20350; } upstream xray { server 127.0.0.1:20351; } upstream trojan { server 127.0.0.1:20352; } upstream trojan-go { server 127.0.0.1:20353; } upstream web { server 127.0.0.1:80; } server { listen 443 reuseport; proxy_pass $backend_name; ssl_preread on; } 参考链接：\nhttp://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html\nhttps://www.chengxiaobai.com/trouble-maker/trojan-shared-443-port-scheme#more\n建议 如何选择：安全性 \u0026gt; 稳定性 \u0026gt; 速度\nhttps://www.chengxiaobai.com/essays/v2ray-trojan-xray\n不建议开启mux，不一定会提高网速有可能反而更慢\nhttps://p4gefau1t.github.io/trojan-go/advance/mux/\nhttps://www.v2fly.org/config/outbounds.html#muxobject\n不建议开启tcp fast open，更容易被识别？\nhttps://github.com/trojan-gfw/trojan/issues/388\nIKEv2 此次安装版本为5.9.8\n1 2 3 4 5 $ apt-cache madison charon-systemd charon-systemd | 5.9.8-5+deb12u1 | http://deb.debian.org/debian bookworm/main amd64 Packages charon-systemd | 5.9.8-5+deb12u1 | http://security.debian.org/debian-security bookworm-security/main amd64 Packages strongswan | 5.9.8-5+deb12u1 | http://deb.debian.org/debian bookworm/main Sources strongswan | 5.9.8-5+deb12u1 | http://security.debian.org/debian-security bookworm-security/main Sources 安装charon-systemd\n1 sudo apt -y install charon-systemd libstrongswan-extra-plugins libcharon-extra-plugins 配置nginx，用于webroot模式获取证书\n1 2 3 4 5 6 7 8 server { listen 80; server_name strongswan.yanyong.cc; location ^~ /.well-known/acme-challenge/ { root /srv/www/_letsencrypt; } } 获取ssl证书\n1 2 3 4 5 6 7 sudo certbot certonly --webroot -w /srv/www/_letsencrypt \\ -d strongswan.yanyong.cc \\ --key-type rsa \\ --email info@yanyong.cc \\ --agree-tos \\ --no-eff-email \\ --deploy-hook \u0026#39;systemctl reload nginx\u0026#39; 自动更新证书，编辑/etc/letsencrypt/renewal-hooks/deploy/strongswan.sh\n1 2 3 4 5 6 7 8 #!/bin/bash cp /etc/letsencrypt/live/strongswan.yanyong.cc/cert.pem /etc/swanctl/x509/ cp /etc/letsencrypt/live/strongswan.yanyong.cc/chain.pem /etc/swanctl/x509ca/ cp /etc/letsencrypt/live/strongswan.yanyong.cc/privkey.pem /etc/swanctl/private/ chmod 400 /etc/swanctl/x509/cert.pem chmod 400 /etc/swanctl/x509ca/chain.pem chmod 400 /etc/swanctl/private/privkey.pem swanctl --load-all 编辑/etc/swanctl/conf.d/strongswan.conf\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 authorities { letsencrypt { cacert = chain.pem } } connections { ikev2-eap-mschapv2 { version = 2 proposals = aes192gcm16-aes128gcm16-prfsha256-ecp256-ecp521,aes192-sha256-modp3072,aes256-sha384-modp2048-modp1024,default rekey_time = 0s pools = primary-pool-ipv4 fragmentation = yes dpd_delay = 30s # dpd_timeout doesn\u0026#39;t do anything for IKEv2. The general IKEv2 packet timeouts are used. send_cert = always unique = never local-1 { certs = cert.pem id = strongswan.yanyong.cc } remote-1 { auth = eap-mschapv2 # go ask the client for its eap identity. eap_id = %any } children { ikev2-eap-mschapv2 { local_ts = 0.0.0.0/0 rekey_time = 0s dpd_action = clear esp_proposals = aes192gcm16-aes128gcm16-prfsha256-ecp256-modp3072,aes192-sha256-ecp256-modp3072,default } } } } pools { primary-pool-ipv4 { addrs = 172.16.255.0/24 dns = 1.1.1.1, 8.8.8.8 } } secrets { eap-carol { id = carol secret = \u0026#34;carolspassword\u0026#34; } } 重载配置\n1 sudo swanctl --load-all 常用命令\n1 2 sudo systemctl status strongswan sudo journalctl -u strongswan 编辑/etc/sysctl.d/strongswan.conf\n1 2 net.ipv4.ip_forward=1 net.ipv4.ip_no_pmtu_disc=1 生效配置\n1 sudo sysctl -p /etc/sysctl.d/strongswan.conf 配置iptables\n打开ssh、http、https等端口\n1 2 3 4 5 sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT sudo iptables -A INPUT -p tcp --dport 22 -m conntrack --ctstate NEW -j ACCEPT sudo iptables -A INPUT -i lo -j ACCEPT sudo iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT sudo iptables -A INPUT -p tcp -m multiport --dports 80,443 -m conntrack --ctstate NEW -j ACCEPT strongswan部分\n1 2 3 4 5 6 7 8 9 10 11 12 # IKE \u0026amp; MobIKE sudo iptables -A INPUT -p udp --dport 500 -m conntrack --ctstate NEW -j ACCEPT sudo iptables -A INPUT -p udp --dport 4500 -m conntrack --ctstate NEW -j ACCEPT # NAT sudo iptables -t nat -A POSTROUTING -s 172.16.255.0/24 -o eth0 -m policy --dir out --pol ipsec -j ACCEPT sudo iptables -t nat -A POSTROUTING -s 172.16.255.0/24 -o eth0 -j MASQUERADE # MTU/MSS sudo iptables -t mangle -A FORWARD -s 172.16.255.0/24 -o eth0 -m policy --pol ipsec --dir in -p tcp -m tcp --tcp-flags SYN,RST SYN -m tcpmss --mss 1361:1536 -j TCPMSS --set-mss 1360 sudo iptables -t mangle -A FORWARD -s 172.16.255.0/24 -o eth0 -m policy --pol ipsec --dir out -p tcp -m tcp --tcp-flags SYN,RST SYN -m tcpmss --mss 1361:1536 -j TCPMSS --set-mss 1360 # forward ESP-tunneled traffic sudo iptables -A FORWARD --match policy --pol ipsec --dir in --proto esp -s 172.16.255.0/24 -j ACCEPT sudo iptables -A FORWARD --match policy --pol ipsec --dir out --proto esp -d 172.16.255.0/24 -j ACCEPT 默认DROP\n1 2 sudo iptables -P INPUT DROP sudo iptables -P FORWARD DROP 安装iptables-persistent\n1 2 3 4 5 echo \u0026#39;iptables-persistent iptables-persistent/autosave_v4 boolean true\u0026#39; | sudo debconf-set-selections echo \u0026#39;iptables-persistent iptables-persistent/autosave_v6 boolean false\u0026#39; | sudo debconf-set-selections sudo apt -y install iptables-persistent sudo netfilter-persistent save sudo rm /etc/iptables/rules.v6 编辑/etc/iptables/rules.v4\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 *mangle :PREROUTING ACCEPT [0:0] :INPUT ACCEPT [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] :POSTROUTING ACCEPT [0:0] -A FORWARD -s 172.16.255.0/24 -o eth0 -p tcp -m policy --dir in --pol ipsec -m tcp --tcp-flags SYN,RST SYN -m tcpmss --mss 1361:1536 -j TCPMSS --set-mss 1360 -A FORWARD -s 172.16.255.0/24 -o eth0 -p tcp -m policy --dir out --pol ipsec -m tcp --tcp-flags SYN,RST SYN -m tcpmss --mss 1361:1536 -j TCPMSS --set-mss 1360 COMMIT *filter :INPUT DROP [0:0] :FORWARD DROP [0:0] :OUTPUT ACCEPT [0:0] -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT -A INPUT -p tcp -m tcp --dport 23422 -m conntrack --ctstate NEW -j ACCEPT -A INPUT -i lo -j ACCEPT -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT -A INPUT -p tcp -m multiport --dports 80,443 -m conntrack --ctstate NEW -j ACCEPT -A INPUT -p udp -m udp --dport 500 -m conntrack --ctstate NEW -j ACCEPT -A INPUT -p udp -m udp --dport 4500 -m conntrack --ctstate NEW -j ACCEPT -A FORWARD -s 172.16.255.0/24 -m policy --dir in --pol ipsec --proto esp -j ACCEPT -A FORWARD -d 172.16.255.0/24 -m policy --dir out --pol ipsec --proto esp -j ACCEPT COMMIT *nat :PREROUTING ACCEPT [0:0] :INPUT ACCEPT [0:0] :OUTPUT ACCEPT [0:0] :POSTROUTING ACCEPT [0:0] -A POSTROUTING -s 172.16.255.0/24 -o eth0 -m policy --dir out --pol ipsec -j ACCEPT -A POSTROUTING -s 172.16.255.0/24 -o eth0 -j MASQUERADE COMMIT 参考链接：\nhttps://github.com/strongswan/strongswan\nhttps://docs.strongswan.org/docs/5.9/index.html\nhttps://wiki.strongswan.org/projects/strongswan/wiki/UsableExamples\nhttps://docs.strongswan.org/docs/5.9/swanctl/swanctlConf.html\nhttps://docs.strongswan.org/docs/5.9/swanctl/swanctlDir.html\nhttps://docs.strongswan.org/docs/5.9/howtos/forwarding.html\nhttps://docs.strongswan.org/docs/5.9/features/mobike.html\nhttps://www.digitalocean.com/community/tutorials/how-to-set-up-an-ikev2-vpn-server-with-strongswan-on-ubuntu-16-04#step-6-configuring-the-firewall-kernel-ip-forwarding\nhttps://github.com/strongswan/strongswan/blob/master/testing/tests/ha/both-active/hosts/alice/etc/iptables.rules\nhttps://lists.strongswan.org/pipermail/users/2015-November/008999.html\n","permalink":"https://yanyong.cc/post/noexplain-v2ray-xray-trojan-ikev2/","tags":["trojan","trojan-go","v2ray","xray","xtls","IKEv2","strongswan"],"title":"不解释系列v2ray、xray、trojan、trojan-go、IKEv2合集"},{"categories":["Linux"],"contents":"服务器环境 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ cat /etc/os-release PRETTY_NAME=\u0026#34;Debian GNU/Linux 12 (bookworm)\u0026#34; NAME=\u0026#34;Debian GNU/Linux\u0026#34; VERSION_ID=\u0026#34;12\u0026#34; VERSION=\u0026#34;12 (bookworm)\u0026#34; VERSION_CODENAME=bookworm ID=debian HOME_URL=\u0026#34;https://www.debian.org/\u0026#34; SUPPORT_URL=\u0026#34;https://www.debian.org/support\u0026#34; BUG_REPORT_URL=\u0026#34;https://bugs.debian.org/\u0026#34; $ uname -a Linux ushost 6.1.0-31-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.128-1 (2025-02-07) x86_64 GNU/Linux $ certbot --version certbot 2.1.0 获取证书 token已脱敏\n1 2 3 sudo apt -y install certbot sudo mkdir -p /opt/certbot/dns 编辑验证域名脚本/opt/certbot/dns/auth.sh\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/bin/bash # Get your API key from https://www.cloudflare.com/a/account/my-account API_TOKEN=\u0026#34;Bearer V9nmyI_o20Avum44JI6YLsyH9bNpMS8Y7fuVvSCo\u0026#34; DOMAIN=\u0026#34;yanyong.cc\u0026#34; # Get the Cloudflare zone id ZONE_ID=$(curl -sS -X GET \u0026#34;https://api.cloudflare.com/client/v4/zones?name=$DOMAIN\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -H \u0026#34;Authorization: $API_TOKEN\u0026#34; | python3 -c \u0026#34;import sys, json; print(json.load(sys.stdin)[\u0026#39;result\u0026#39;][0][\u0026#39;id\u0026#39;])\u0026#34;) # Create TXT record CREATE_DOMAIN=\u0026#34;_acme-challenge.$CERTBOT_DOMAIN\u0026#34; RECORD_ID=$(curl -sS -X POST \u0026#34;https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -H \u0026#34;Authorization: $API_TOKEN\u0026#34; \\ --data \u0026#39;{\u0026#34;type\u0026#34;:\u0026#34;TXT\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#39;\u0026#34;$CREATE_DOMAIN\u0026#34;\u0026#39;\u0026#34;,\u0026#34;content\u0026#34;:\u0026#34;\u0026#39;\u0026#34;$CERTBOT_VALIDATION\u0026#34;\u0026#39;\u0026#34;,\u0026#34;ttl\u0026#34;:120}\u0026#39; \\ | python3 -c \u0026#34;import sys, json; print(json.load(sys.stdin)[\u0026#39;result\u0026#39;][\u0026#39;id\u0026#39;])\u0026#34;) # Save info for cleanup if [ ! -d /tmp/CERTBOT_$CERTBOT_DOMAIN ]; then mkdir -m 0700 /tmp/CERTBOT_$CERTBOT_DOMAIN fi echo $ZONE_ID \u0026gt; /tmp/CERTBOT_$CERTBOT_DOMAIN/ZONE_ID echo $RECORD_ID \u0026gt;\u0026gt; /tmp/CERTBOT_$CERTBOT_DOMAIN/RECORD_ID # Sleep to make sure the change has time to propagate over to DNS sleep 30 编辑清理域名脚本/opt/certbot/dns/clean.sh\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/bin/bash # Get your API key from https://www.cloudflare.com/a/account/my-account API_TOKEN=\u0026#34;Bearer V9nmyI_o20Avum44JI6YLsyH9bNpMS8Y7fuVvSCo\u0026#34; if [ -f /tmp/CERTBOT_$CERTBOT_DOMAIN/ZONE_ID ]; then ZONE_ID=$(cat /tmp/CERTBOT_$CERTBOT_DOMAIN/ZONE_ID) rm -f /tmp/CERTBOT_$CERTBOT_DOMAIN/ZONE_ID fi if [ -f /tmp/CERTBOT_$CERTBOT_DOMAIN/RECORD_ID ]; then RECORD_ID=$(cat /tmp/CERTBOT_$CERTBOT_DOMAIN/RECORD_ID) rm -f /tmp/CERTBOT_$CERTBOT_DOMAIN/RECORD_ID fi # Remove the challenge TXT record from the zone if [ -n \u0026#34;${ZONE_ID}\u0026#34; ] \u0026amp;\u0026amp; [ -n \u0026#34;${RECORD_ID}\u0026#34; ]; then for id in $RECORD_ID; do curl -sS -X DELETE \u0026#34;https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$id\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -H \u0026#34;Authorization: $API_TOKEN\u0026#34; done fi 添加执行权限\n1 2 sudo chmod +x /opt/certbot/dns/auth.sh sudo chmod +x /opt/certbot/dns/clean.sh 获取证书，先添加--dry-run测试一下是否正确\n从2.0.0版本开始private keys默认ecdsa算法，有需要可以--key-type=rsa指定rsa算法\n1 2 3 4 5 6 7 8 sudo certbot certonly -d yanyong.cc -d *.yanyong.cc \\ --email info@yanyong.cc \\ --agree-tos \\ --no-eff-email \\ --manual --preferred-challenges=dns \\ --manual-auth-hook /opt/certbot/dns/auth.sh \\ --manual-cleanup-hook /opt/certbot/dns/clean.sh \\ --deploy-hook \u0026#39;systemctl reload nginx\u0026#39; 测试续签\n1 sudo certbot renew --dry-run nginx配置参考 1 2 3 ssl_certificate /etc/letsencrypt/live/yanyong.cc/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/yanyong.cc/privkey.pem; ssl_trusted_certificate /etc/letsencrypt/live/yanyong.cc/chain.pem; 参考链接 https://eff-certbot.readthedocs.io/en/stable/using.html#\nhttps://developers.cloudflare.com/api/\n","permalink":"https://yanyong.cc/post/certbot-cloudflare-letsencrypt/","tags":["ssl","certbot","let's encrypt"],"title":"certbot + cloudflare自动续签let's encrypt泛域名证书"},{"categories":["Uncategorized"],"contents":"需求 pricelist.xlsx\n统计每个行业价格排名前5的数据，包括代码和价格\n方法一：WPS(js宏) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 function Top5PerGroup() { // 工作表Sheet1 var ws = ThisWorkbook.Sheets.Item(\u0026#34;Sheet1\u0026#34;); // 结果输出到工作表行业前5 var out_ws_name = \u0026#34;行业前5\u0026#34;; var last_sheet_name = ThisWorkbook.Sheets.Item(ThisWorkbook.Sheets.Count).Name; if (last_sheet_name != out_ws_name) { var out_ws = ThisWorkbook.Sheets.Add(undefined, ThisWorkbook.Sheets.Item(ThisWorkbook.Sheets.Count), 1, undefined); out_ws.Name = out_ws_name; } else { var out_ws = ThisWorkbook.Sheets.Item(out_ws_name); } out_ws.Cells(1, 1).Value2 = ws.Range(\u0026#34;A1\u0026#34;); out_ws.Cells(1, 2).Value2 = ws.Range(\u0026#34;B1\u0026#34;); out_ws.Cells(1, 3).Value2 = ws.Range(\u0026#34;C1\u0026#34;); // 如需要删除 //ThisWorkbook.Sheets.Item(out_ws_name).Delete(); // 最后一行的行号 var last_row = ws.Cells(ws.Rows.Count, \u0026#34;A\u0026#34;).End(xlUp).Row; var code = \u0026#34;\u0026#34;; // 代码 var group = \u0026#34;\u0026#34;; // 行业 var price = 0; // 价格 var group_dict = {}; // 字典，键保存行业，值保存代码和价格，示例 {\u0026#34;行业A\u0026#34;: [[\u0026#34;代码1\u0026#34;, 价格1], [\u0026#34;代码2\u0026#34;, 价格2]]} for (let i = 2; i \u0026lt;= last_row; i++) { code = ws.Range(\u0026#34;A\u0026#34; + i).Value().toString(); group = ws.Range(\u0026#34;B\u0026#34; + i).Value(); price = ws.Range(\u0026#34;C\u0026#34; + i).Value(); if (! (group in group_dict)) { group_dict[group] = []; // 首次加入的行业，值置为数组 } if (! isNaN(price)) { // 过滤掉非数字的价格 let codeAndPrice = [code, price]; // [\u0026#34;代码1\u0026#34;, 价格1] group_dict[group].push(codeAndPrice); let value_arrary = group_dict[group]; // [[\u0026#34;代码1\u0026#34;, 价格1], [\u0026#34;代码2\u0026#34;, 价格2]] // 冒泡排序 for (let j = 0; j \u0026lt; value_arrary.length -1; j++) { for (let i = 0; i \u0026lt; value_arrary.length - 1 - j; i++) { if (value_arrary[i][1] \u0026lt; value_arrary[i + 1][1]) { let temp = value_arrary[i + 1]; value_arrary[i + 1] = value_arrary[i]; value_arrary[i] = temp; } } } if (group_dict[group].length \u0026gt; 5) { value_arrary.pop(); // 移除最后一个 } } } //console.log(JSON.stringify(group_dict)); // 结果输出到out_ws var groups = Object.keys(group_dict); // 所有行业 var row = 2; for (let j = 0; j \u0026lt; groups.length; j++) { if (group_dict[groups[j]].length === 0) { continue; } for (let i = 0; i \u0026lt; group_dict[groups[j]].length; i++) { out_ws.Cells(row + i, 1).Value2 = \u0026#34;\u0026#39;\u0026#34; + group_dict[groups[j]][i][0]; // 代码 out_ws.Cells(row + i, 2).Value2 = groups[j]; // 行业 out_ws.Cells(row + i, 3).Value2 = group_dict[groups[j]][i][1]; // 价格 } row += group_dict[groups[j]].length; } } 方法二：python top5pregroup.py\n安装依赖库\npip install pandas openpyxl\n1 2 3 4 5 6 7 8 9 10 11 12 import pandas as pd excel = \u0026#39;D:\\\\Users\\\\yanyong\\\\Downloads\\\\价格表.xlsx\u0026#39; data = pd.read_excel(excel, dtype={\u0026#39;代码\u0026#39;: str}) data[\u0026#39;价格\u0026#39;] = pd.to_numeric(data[\u0026#39;价格\u0026#39;], errors=\u0026#39;coerce\u0026#39;) data = data.dropna(subset=[\u0026#39;价格\u0026#39;]) data_top5 = data.sort_values([\u0026#39;所属行业\u0026#39;, \u0026#39;价格\u0026#39;], ascending=[False, False]).groupby(\u0026#39;所属行业\u0026#39;).head(5) with pd.ExcelWriter(excel, engine=\u0026#39;openpyxl\u0026#39;, mode=\u0026#39;a\u0026#39;) as ew: if \u0026#39;top5\u0026#39; not in ew.sheets: data_top5.to_excel(ew, sheet_name=\u0026#39;top5\u0026#39;, index=False) else: print(\u0026#39;top5 already exists!\u0026#39;) ","permalink":"https://yanyong.cc/post/js-python-excel/","tags":["javascript","js","python","excel","wps"],"title":"wps(js宏)和python处理excel表格案例"},{"categories":["Linux","Ubuntu"],"contents":"ubuntu初始化脚本 已在20.04和22.04验证通过，脚本已脱敏\nbin/sh PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin #设置PATH环境变量 #为了兼容dash，测试语句建议使用[ expression ]，不要使用[[ expression ]] #为了兼容dash，[ expression ]中建议使用=，不要使用== #dash，函数名不支持小横线- #彩色打印[yes]、[no]、[warning] #兼容bash和dash，dash的echo不支持-e，echo \u0026#34;\\e[32m [yes]\\e[0m\u0026#34;即可 echo_yes() { echo -n \u0026#34; END: $comment \u0026#34;; bash -c \u0026#39;echo -e \u0026#34;\\e[32m [yes]\\e[0m\u0026#34;\u0026#39;; } #绿色 echo_no() { echo -n \u0026#34; END: $comment \u0026#34;; bash -c \u0026#39;echo -e \u0026#34;\\e[31m [no]\\e[0m\u0026#34;\u0026#39;; } #红色 echo_warning() { echo -n \u0026#34; END: $comment \u0026lt;$note\u0026gt;\u0026#34;; bash -c \u0026#39;echo -e \u0026#34;\\e[33m [warning]\\e[0m\u0026#34;\u0026#39;; } #黄色 #显示脚本用法 usage() { echo \u0026#34;Usage: `basename $0` [-h] [-n hostname] [-p port] [-t timezone] [-c ntp] [-r] 说明：脚本只验证了ubuntu20.04和22.04，其它版本也许能用但不保证！ Options: -h : 显示帮助 -n hostname : 设置主机名 -p port : 设置ssh端口, 默认2208 -t timezone : 设置时区, 默认Asia/Shanghai(查看所有可用时区timedatectl list-timezones) -c ntp : 设置同步的ntp服务器, 默认172.27.246.211 -r : 卸载青藤云 \u0026#34; } #获取传入参数 get_arguments() { while getopts hn:p:t:c:r opt do case \u0026#34;$opt\u0026#34; in h) usage \u0026amp;\u0026amp; exit 0;; n) set_hostname=${OPTARG};; p) set_port=${OPTARG};; t) set_tz=${OPTARG};; c) set_ntp=${OPTARG};; r) remove_qingtengyun;; *) usage \u0026amp;\u0026amp; exit 1;; esac done } check_ip() { comment=\u0026#34;检测是否已配置IP和DNS\u0026#34; echo \u0026#34;BEGIN: $comment\u0026#34; if curl -s http://ip.example.com; then echo #换行 echo_yes else echo_no exit 1 fi } #用$USER变量检测不准确 ####################################################### # $ whoami; echo $USER # # user1 # # user1 # # $ su root # # Password: # # # whoami; echo $USER # # root # # user1 # ####################################################### check_notRoot() { comment=\u0026#34;检测是否非root执行脚本，sudo用户做免密需要获取用户名\u0026#34; echo \u0026#34;BEGIN: $comment\u0026#34; if [ \u0026#34;root\u0026#34; = `whoami` ]; then echo_no exit 1 else echo_yes fi } set_sudoNopasswd() { comment=\u0026#34;设置sudo免密\u0026#34; echo \u0026#34;BEGIN: $comment\u0026#34; echo \u0026#34;$USER ALL=(ALL:ALL) NOPASSWD:ALL\u0026#34; | sudo tee /etc/sudoers.d/$USER echo_yes } set_hostname() { comment=\u0026#34;配置主机名\u0026#34; echo \u0026#34;BEGIN: $comment\u0026#34; if [ -n \u0026#34;$set_hostname\u0026#34; ]; then #如果传入hostname参数 sudo hostnamectl set-hostname $set_hostname echo_yes else note=\u0026#34;未设置\u0026#34; \u0026amp;\u0026amp; echo_warning fi } zabbixAgent2004() { #文件名 zabbix_agent_file=zabbix_agent-6.0.33-linux-3.0-amd64-static.tar.gz #下载文件 if [ ! -f ${zabbix_agent_file} ]; then wget http://172.27.244.250/download/${zabbix_agent_file} fi #创建zabbix用户 sudo useradd -r -M -s /usr/sbin/nologin zabbix #安装zabbix agent sudo mkdir /usr/local/zabbix \u0026amp;\u0026amp; sudo chown zabbix:zabbix /usr/local/zabbix sudo tar zxf ${zabbix_agent_file} -C /usr/local/zabbix #配置 sudo sed -ri \u0026#39;s/^(Server|ServerActive)=.*$/\\1=zabbixproxy.example.com/\u0026#39; /usr/local/zabbix/conf/zabbix_agentd.conf ip=$(hostname -I | awk \u0026#39;{print $1}\u0026#39;) \u0026amp;\u0026amp; sudo sed -i \u0026#34;s/^Hostname=.*$/Hostname=$ip/\u0026#34; /usr/local/zabbix/conf/zabbix_agentd.conf sudo sed -i \u0026#39;s/^# Timeout=3/Timeout=20/\u0026#39; /usr/local/zabbix/conf/zabbix_agentd.conf #添加自定义服务 echo \u0026#34;添加自定义服务/etc/systemd/system/zabbix-agent.service\u0026#34; sudo tee /etc/systemd/system/zabbix-agent.service \u0026lt;\u0026lt;- EOF [Unit] Description=Zabbix Agent After=syslog.target After=network.target [Service] Type=forking Restart=on-failure PIDFile=/tmp/zabbix_agentd.pid KillMode=control-group ExecStart=/usr/local/zabbix/sbin/zabbix_agentd -c /usr/local/zabbix/conf/zabbix_agentd.conf ExecStop=/bin/sh -c \u0026#39;[ -n \u0026#34;\\$1\u0026#34; ] \u0026amp;\u0026amp; kill -s TERM \u0026#34;\\$1\u0026#34;\u0026#39; -- \u0026#34;\\$MAINPID\u0026#34; RestartSec=10s User=zabbix Group=zabbix [Install] WantedBy=multi-user.target EOF sudo systemctl daemon-reload sudo systemctl restart zabbix-agent sudo systemctl enable zabbix-agent } zabbixAgent2204() { libmodbus_deb=libmodbus5_3.1.6-2_amd64.deb zabbix_agent_deb=zabbix-agent_6.0.33-2+ubuntu22.04_amd64.deb [ -f ${libmodbus_deb} ] || wget http://172.27.244.250/download/${libmodbus_deb} [ -f ${zabbix_agent_deb} ] || wget http://172.27.244.250/download/${zabbix_agent_deb} sudo dpkg -i ${libmodbus_deb} sudo dpkg -i ${zabbix_agent_deb} conf=/etc/zabbix/zabbix_agentd.conf sudo sed -ri \u0026#39;s/^(Server|ServerActive)=.*$/\\1=zabbixproxy.example.com/\u0026#39; $conf ip=$(hostname -I | awk \u0026#39;{print $1}\u0026#39;) \u0026amp;\u0026amp; sudo sed -i \u0026#34;s/^Hostname=.*$/Hostname=$ip/\u0026#34; $conf sudo sed -i \u0026#39;s/^# Timeout=3/Timeout=20/\u0026#39; $conf sudo systemctl restart zabbix-agent sudo systemctl enable zabbix-agent } set_zabbixAgent() { comment=\u0026#34;配置zabbix-agent，仅ubuntu20.04和22.04\u0026#34; echo \u0026#34;BEGIN: $comment\u0026#34; #检测是否已安装，简单判断不严谨 if [ -f /usr/local/zabbix/sbin/zabbix_agentd ] || [ -f /usr/sbin/zabbix_agentd ]; then echo \u0026#34;再次配置zabbix_agentd.conf的Hostname，解决克隆已初始化过的虚拟机时Hostname未更新问题\u0026#34; if [ $(lsb_release -rs) = \u0026#34;22.04\u0026#34; ]; then ip=$(hostname -I | awk \u0026#39;{print $1}\u0026#39;) \u0026amp;\u0026amp; sudo sed -i \u0026#34;s/^Hostname=.*$/Hostname=$ip/\u0026#34; /etc/zabbix/zabbix_agentd.conf elif [ $(lsb_release -rs) = \u0026#34;20.04\u0026#34; ]; then ip=$(hostname -I | awk \u0026#39;{print $1}\u0026#39;) \u0026amp;\u0026amp; sudo sed -i \u0026#34;s/^Hostname=.*$/Hostname=$ip/\u0026#34; /usr/local/zabbix/conf/zabbix_agentd.conf fi note=\u0026#34;已安装，无需重复安装\u0026#34; \u0026amp;\u0026amp; echo_warning else #检查ubuntu版本 os=$(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_ID\u0026#34;) #安装 if [ $os = \u0026#34;22.04\u0026#34; ]; then zabbixAgent2204 elif [ $os = \u0026#34;20.04\u0026#34; ];then zabbixAgent2004 else note=\u0026#34;非ubuntu20.04或22.04，跳过安装\u0026#34; \u0026amp;\u0026amp; echo_warning return #退出函数 fi #安装完了再检测一次进程 if ps -ef | grep -q \u0026#39;zabbix_agent[d]\u0026#39;; then echo_yes else echo_no exit 1 fi fi } set_timezone_ntp() { comment=\u0026#34;配置时区及时间同步，时区默认Asia/Shanghai，NTP默认172.27.246.211\u0026#34; echo \u0026#34;BEGIN: $comment\u0026#34; #timezone set_tz=\u0026#34;${set_tz:-Asia/Shanghai}\u0026#34; #不传时区参数的话，默认设置Asia/Shanghai时区 sudo timedatectl set-timezone $set_tz #ntp set_ntp=\u0026#34;${set_ntp:-172.27.246.211}\u0026#34; #不传ntp服务器参数的话，默认172.27.246.211 sudo sed -ri \u0026#39;s/^#?(NTP=).*$/\\1\u0026#39;\u0026#34;$set_ntp\u0026#34;\u0026#39;/\u0026#39; /etc/systemd/timesyncd.conf #正则^#?表示不管NTP那一行是否有注释，直接替换 sudo systemctl restart systemd-timesyncd echo_yes } set_openfile_process() { comment=\u0026#34;配置文件打开数及进程数\u0026#34; echo \u0026#34;BEGIN: $comment\u0026#34; echo \u0026#39;* soft nofile 204800 * hard nofile 204800 * soft nproc 204800 * hard nproc 204800\u0026#39; | sudo tee /etc/security/limits.d/nofile-noproc.conf echo_yes } set_sshPort() { comment=\u0026#34;配置ssh端口，默认2208\u0026#34; echo \u0026#34;BEGIN: $comment\u0026#34; #设置端口 set_port=\u0026#34;${set_port:-2208}\u0026#34; #不传ssh端口参数的话，默认设置2208 #检测当前ssh端口 config_port=$(awk \u0026#39;/^Port/{print $2}\u0026#39; /etc/ssh/sshd_config) ssh_port=\u0026#34;${config_port:-22}\u0026#34; #如果config_port为空则是22端口 #如果设置端口与当前端口不一致，才执行 if [ \u0026#34;$set_port\u0026#34; != \u0026#34;$ssh_port\u0026#34; ]; then if grep -q \u0026#39;^Port [0-9]\\+\u0026#39; /etc/ssh/sshd_config; then #如果配置文件有指定Port sudo sed -ri \u0026#34;s/^Port [0-9]+$/Port $set_port/\u0026#34; /etc/ssh/sshd_config else #否则没有指定Port，比如默认22端口的情况 echo \u0026#34;Port $set_port\u0026#34; | sudo tee -a /etc/ssh/sshd_config fi sudo systemctl reload ssh fi echo_yes } set_sshKey() { comment=\u0026#34;配置密钥\u0026#34; echo \u0026#34;BEGIN: $comment\u0026#34; [ ! -d ~/.ssh ] \u0026amp;\u0026amp; mkdir ~/.ssh chmod 700 ~/.ssh key1=\u0026#34;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDmxcc+pBN1C/y/dP0ktjsl6bVnMkLpfENdRJGHM/K4opoRKHrrBNI06ZdznP17n6vOkquHGzmLhp1/0xTgccbAlsogkJ2pvn5I70f4U/nNy root@ansible\u0026#34; key2=\u0026#34;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC4aJi3XFOoLlTM9+4ZnJ1NvfkVyELN/2RW0JpVzYI020Uevzlt/tz3LLt9FFmwGyN4Cr+XZ29FsotrM3M9De3rwVVTZLzxg6vTMGXjxgwnT root@baoleiji\u0026#34; if ! grep -q \u0026#34;$key1\u0026#34; ~/.ssh/authorized_keys; then echo \u0026#34;$key1\u0026#34; \u0026gt;\u0026gt; ~/.ssh/authorized_keys fi if ! grep -q \u0026#34;$key2\u0026#34; ~/.ssh/authorized_keys; then echo \u0026#34;$key2\u0026#34; \u0026gt;\u0026gt; ~/.ssh/authorized_keys fi chmod 600 ~/.ssh/authorized_keys echo_yes } set_qingtengyun() { comment=\u0026#34;配置青藤云\u0026#34; echo \u0026#34;BEGIN: $comment\u0026#34; #如果没有青藤云进程，则大概率没有安装，这里没有做很严谨的判断是否已经安装 if ! ps -ef | grep -q \u0026#39;titan_monito[r]\u0026#39;; then #安装 curl -sL \u0026#39;http://172.27.246.250/agent/download?k=1xyuuh0s00usnbx1g19i4tf6v8hef687w8hx1rj2\u0026amp;group=1\u0026amp;protocol=0\u0026amp;root=true\u0026amp;runAccount=root\u0026amp;userAdd=false\u0026#39; | sudo bash #安装完再检查一次进程 if ps -ef | grep -q \u0026#39;titan_monito[r]\u0026#39;; then echo_yes else echo_no exit 1 fi else note=\u0026#34;已安装，无需重复安装\u0026#34; \u0026amp;\u0026amp; echo_warning fi } remove_qingtengyun() { comment=\u0026#34;卸载青藤云\u0026#34; echo \u0026#34;BEGIN: $comment\u0026#34; if ! ps -ef | grep -q \u0026#39;titan_monito[r]\u0026#39;; then note=\u0026#34;未安装\u0026#34; \u0026amp;\u0026amp; echo_warning exit 0 #退出脚本 else sudo bash /titan/agent/install_agent.sh disclean echo_yes exit 0 #退出脚本 fi } set_ufw() { comment=\u0026#34;关闭防火墙ufw\u0026#34; echo \u0026#34;BEGIN: $comment\u0026#34; sudo systemctl stop ufw sudo systemctl disable ufw echo_yes } #主函数 main() { get_arguments \u0026#34;$@\u0026#34; #兼容bash和dash，dash不支持数组，不支持C风格的for循环 #首先检查是否普通用户执行脚本 func=\u0026#34;check_notRoot check_ip set_sudoNopasswd set_hostname set_timezone_ntp set_sshPort set_sshKey set_openfile_process set_zabbixAgent set_ufw set_qingtengyun\u0026#34; count=$(echo $func | awk \u0026#39;{print NF}\u0026#39;) begin=1 for f in $func; do echo -n \u0026#34;$begin/$count) \u0026#34;; $f begin=$((begin+1)) done } #脚本执行入口 main \u0026#34;$@\u0026#34; ","permalink":"https://yanyong.cc/post/init-script-ubuntu/","tags":["ubuntu","shell"],"title":"ubuntu初始化脚本"},{"categories":["Uncategorized"],"contents":"lvm扩容根目录/ 1 2 3 4 5 6 7 sudo pvcreate /dev/vdb sudo vgextend ubuntu-vg /dev/vdb sudo lvextend -l +100%FREE /dev/mapper/ubuntu--vg-ubuntu--lv #ext4用： sudo resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv #xfs用： sudo xfs_growfs /dev/mapper/ubuntu--vg-ubuntu--lv lvm增加硬盘，挂载到/data 1 2 3 4 5 6 7 sudo mkdir /data sudo pvcreate /dev/vdb sudo vgcreate vg01 /dev/vdb sudo lvcreate -l 100%FREE -n lv01 vg01 sudo mkfs.xfs /dev/vg01/lv01 sudo mount /dev/vg01/lv01 /data echo \u0026#39;/dev/mapper/vg01-lv01 /data xfs defaults 0 0\u0026#39; | sudo tee -a /etc/fstab ","permalink":"https://yanyong.cc/post/fuck-lvm/","tags":["lvm"],"title":"Fuck lvm"},{"categories":["Uncategorized"],"contents":"服务器和软件版本规划 7台服务器和1个虚拟IP： 172.27.244.151-153(3台master,4C/8G/500GB) 172.27.244.154-156(3台worker,16C/32G/500GB) 172.27.24.150(nfs/harbor,4C/8G/2TB) 172.27.244.160(虚拟IP) 版本： OS:ubuntu20.04.6 rke:1.4.6 docker:20.10.X(5:20.10.24~3-0~ubuntu-focal) rancher:2.7.5 k8s:支持1.23-1.26(rancher/hyperkube:v1.26.4-rancher2) kustomize:5.1.0 kubeflow:1.7.0 安装k8s集群 172.27.244.151-156等6台服务器。\n默认6台服务器都执行，如果只在其中的某些机器执行会说明。\n配置sudo用户免密 1 echo \u0026#34;$USER ALL=(ALL:ALL) NOPASSWD:ALL\u0026#34; | sudo tee /etc/sudoers.d/$USER 关闭防火墙 我机器在内网，关闭防火墙省事。放在外网的服务最好开启防火墙，放行端口参考各自业务的官方文档！\n1 2 sudo systemctl stop ufw sudo systemctl disable ufw 安装docker https://ranchermanager.docs.rancher.com/getting-started/installation-and-upgrade/installation-requirements/install-docker\nrancher官方有个docker安装脚本\n开始安装！\ndocker官方文档：https://docs.docker.com/engine/install/ubuntu/\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 sudo apt-get update sudo apt-get install ca-certificates curl gnupg sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg echo \\ \u0026#34;deb [arch=\u0026#34;$(dpkg --print-architecture)\u0026#34; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ \u0026#34;$(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;)\u0026#34; stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update VERSION_STRING=5:20.10.24~3-0~ubuntu-focal sudo apt-get install docker-ce=$VERSION_STRING docker-ce-cli=$VERSION_STRING containerd.io docker-buildx-plugin docker-compose-plugin 配置k8s需求 k8s官方文档：\nhttps://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/\nhttps://kubernetes.io/docs/setup/production-environment/container-runtimes/#install-and-configure-prerequisites\nrke官方文档：\nhttps://rke.docs.rancher.com/os\n禁用swap 1 sudo swapoff -a \u0026amp;\u0026amp; sudo sed -i \u0026#39;/swap/s/^/#/\u0026#39; /etc/fstab 允许iptables桥接流量 确认信息。\n1 2 3 lsmod | grep br_netfilter lsmod | grep overlay sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cat \u0026lt;\u0026lt;EOF | sudo tee /etc/modules-load.d/k8s.conf overlay br_netfilter EOF sudo modprobe overlay sudo modprobe br_netfilter cat \u0026lt;\u0026lt;EOF | sudo tee /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-iptables = 1 net.bridge.bridge-nf-call-ip6tables = 1 net.ipv4.ip_forward = 1 EOF sudo sysctl --system 安装RKE 找其中一台机器安装rke工具即可，在172.27.244.151安装rke。\nrke官方文档：https://rke.docs.rancher.com/installation\n创建rke用户 172.27.244.151-156都创建用户，并添加到docker组。\n1 2 3 sudo useradd -m -s /bin/bash rkeuser sudo usermod -aG docker rkeuser sudo chpasswd \u0026lt;\u0026lt;\u0026lt; \u0026#39;rkeuser:123456\u0026#39; 创建密钥并拷贝 在172.27.244.151上执行，本机rkeuser用户也要拷贝密钥。\n1 2 3 4 5 6 7 ssh-keygen -qf ~/.ssh/id_rsa -P \u0026#39;\u0026#39; ssh-copy-id -f -p 5008 -i ~/.ssh/id_rsa.pub -o StrictHostKeyChecking=no rkeuser@172.27.244.151 ssh-copy-id -f -p 5008 -i ~/.ssh/id_rsa.pub -o StrictHostKeyChecking=no rkeuser@172.27.244.152 ssh-copy-id -f -p 5008 -i ~/.ssh/id_rsa.pub -o StrictHostKeyChecking=no rkeuser@172.27.244.153 ssh-copy-id -f -p 5008 -i ~/.ssh/id_rsa.pub -o StrictHostKeyChecking=no rkeuser@172.27.244.154 ssh-copy-id -f -p 5008 -i ~/.ssh/id_rsa.pub -o StrictHostKeyChecking=no rkeuser@172.27.244.155 ssh-copy-id -f -p 5008 -i ~/.ssh/id_rsa.pub -o StrictHostKeyChecking=no rkeuser@172.27.244.156 rke创建k8s集群 在172.27.244.151上执行。\nrke下载地址：https://github.com/rancher/rke/releases/tag/v1.4.6\n1 2 3 4 cd \u0026amp;\u0026amp; wget https://github.com/rancher/rke/releases/download/v1.4.6/rke_linux-amd64 mkdir bin \u0026amp;\u0026amp; cp rke_linux-amd64 bin \u0026amp;\u0026amp; chmod +x bin/rke_linux-amd64 sudo ln -s $HOME/bin/rke_linux-amd64 /usr/local/bin/rke 配置rke\n1 rke config --name cluster.yml 默认端口8472与深信服超融合有冲突，修改cluster.yml,参考 https://rke.docs.rancher.com/config-options/add-ons/network-plugins#flannel\n1 2 3 4 5 network: plugin: flannel options: flannel_backend_type: vxlan flannel_backend_port: \u0026#34;8972\u0026#34; 一些常用配置参考：\n1 2 3 4 5 6 7 8 9 network: plugin: canal options: canal_flannel_backend_type: vxlan canal_flannel_backend_port: \u0026#34;8972\u0026#34; kubelet: extra_args: max-pods: 250 如果使用canal的话还需要修改canal-config\n1 kubectl edit configmap canal-config -n kube-system 找到如下位置，添加端口号8972\n1 2 3 4 5 6 7 8 9 data: net-conf.json: | { \u0026#34;Network\u0026#34;: \u0026#34;10.42.0.0/16\u0026#34;, \u0026#34;Backend\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;vxlan\u0026#34;, \u0026#34;Port\u0026#34;: 8972 } } 运行rke\n1 rke up 常用命令，仅更新，忽略docker版本等\n1 rke up --update-only --ignore-docker-version 安装kubectl 在172.27.244.151上执行。\n安装kubectl并配置命令自动补全。\n1 2 3 4 5 curl -LO \u0026#34;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\u0026#34; sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl echo \u0026#39;source \u0026lt;(kubectl completion bash)\u0026#39; \u0026gt;\u0026gt;~/.bashrc \u0026amp;\u0026amp; . ~/.bashrc mkdir $HOME/.kube cp kube_config_cluster.yml $HOME/.kube/config 安装rancher 在172.27.244.151上执行。\n官方文档：https://ranchermanager.docs.rancher.com/zh/pages-for-subheaders/install-upgrade-on-a-kubernetes-cluster\n安装helm。\n1 2 3 wget https://get.helm.sh/helm-v3.12.1-linux-amd64.tar.gz tar zxf helm-v3.12.1-linux-amd64.tar.gz sudo mv linux-amd64/helm /usr/local/bin/helm 用helm安装rancher。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 helm repo add rancher-stable https://releases.rancher.com/server-charts/stable kubectl create namespace cattle-system #确认v1.12.2版本信息，如有需要可替换 kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.2/cert-manager.crds.yaml helm repo add jetstack https://charts.jetstack.io helm repo update helm install cert-manager jetstack/cert-manager \\ --namespace cert-manager \\ --create-namespace \\ --version v1.12.2 helm install rancher rancher-stable/rancher \\ --namespace cattle-system \\ --set hostname=rancher-ai.example.com \\ --set bootstrapPassword=123456 \\ --set global.cattle.psp.enabled=false \\ --version 2.7.5 安装完，检查rancher状态。\n1 2 kubectl -n cattle-system rollout status deploy/rancher kubectl -n cattle-system get deploy rancher 如有需要，查看密码方法。\n1 kubectl get secret --namespace cattle-system bootstrap-secret -o go-template=\u0026#39;{{ .data.bootstrapPassword|base64decode}}{{ \u0026#34;\\n\u0026#34; }}\u0026#39; 安装kubeflow 安装storageClass 前提条件，在172.27.244.150先安装nfs-server ，再安装存储类nfs-cient-provisioner，在172.27.244.151上执行。\nnfs-cient-provisioner文档：\nhttps://github.com/kubernetes-sigs/nfs-subdir-external-provisioner\nhttps://artifacthub.io/packages/helm/nfs-subdir-external-provisioner/nfs-subdir-external-provisioner\n挂载选项相关文档：\nhttps://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/storage_administration_guide/s1-nfs-client-config-options\nhttps://www.man7.org/linux/man-pages/man5/nfs.5.html\n1 2 3 4 5 6 helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/ helm repo update helm install nfs-client-provisioner nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \\ --set nfs.server=172.27.244.150 \\ --set nfs.path=/data_nfs \\ --set storageClass.defaultClass=true 常用命令参考\n1 2 3 4 5 6 7 helm install nfs-client-provisioner-yw ./nfs-subdir-external-provisioner-4.0.12.tgz \\ --set nfs.server=172.27.244.150 \\ --set nfs.path=/data/nfs/nfs-client-provisioner \\ --set image.repository=harbor-ai.example.com/kf1.9/registry.k8s.io/sig-storage/nfs-subdir-external-provisioner \\ --set image.tag=v4.0.2 \\ --set storageClass.name=nfs-client \\ --namespace nfs-client-system 默认是拉取v4.0.2，在3台worker服务器执行。\n1 2 sudo docker pull strongxyz/nfs-subdir-external-provisioner:v4.0.2 sudo docker tag strongxyz/nfs-subdir-external-provisioner:v4.0.2 registry.k8s.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2 安装kustomize 在172.27.244.151上执行。\n1 2 wget https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v5.1.0/kustomize_v5.1.0_linux_amd64.tar.gz tar zxf kustomize_v5.1.0_linux_amd64.tar.gz \u0026amp;\u0026amp; cp kustomize /usr/local/bin/ 下载kubeflow和镜像 在172.27.244.151上执行。\n下载kubeflow 1 2 wget https://github.com/kubeflow/manifests/archive/refs/tags/v1.7.0.tar.gz tar zxf manifests-1.7.0 \u0026amp;\u0026amp; cd manifests-1.7.0 查看需要哪些镜像，国内环境无法访问gcr.io，从国外服务器中转镜像到hub.docker.com（需要自己注册仓库），然后再拉取镜像！\n1 2 kustomize build example \u0026gt; kustomize_build_example.out.txt awk -F\u0026#39;: \u0026#39; \u0026#39;/image: gcr.io/{print $2}\u0026#39; kustomize_build_example.out.txt | sort -u \u0026gt; pull.image.list.txt 所需镜像列表:\ngcr.io/arrikto/kubeflow/oidc-authservice:e236439 gcr.io/knative-releases/knative.dev/eventing/cmd/controller@sha256:33d78536e9b38dbb2ec2952207b48ff8e05acb48e7d28c2305bd0a0f7156198f gcr.io/knative-releases/knative.dev/eventing/cmd/mtping@sha256:282b5265e1ef26309b3343038c9b4f172654e06cbee46f6ddffd23ea9ad9a3be gcr.io/knative-releases/knative.dev/eventing/cmd/webhook@sha256:d217ab7e3452a87f8cbb3b45df65c98b18b8be39551e3e960cd49ea44bb415ba gcr.io/knative-releases/knative.dev/net-istio/cmd/controller@sha256:2b484d982ef1a5d6ff93c46d3e45f51c2605c2e3ed766e20247d1727eb5ce918 gcr.io/knative-releases/knative.dev/net-istio/cmd/webhook@sha256:59b6a46d3b55a03507c76a3afe8a4ee5f1a38f1130fd3d65c9fe57fff583fa8d gcr.io/knative-releases/knative.dev/serving/cmd/activator@sha256:c3bbf3a96920048869dcab8e133e00f59855670b8a0bbca3d72ced2f512eb5e1 gcr.io/knative-releases/knative.dev/serving/cmd/autoscaler@sha256:caae5e34b4cb311ed8551f2778cfca566a77a924a59b775bd516fa8b5e3c1d7f gcr.io/knative-releases/knative.dev/serving/cmd/controller@sha256:38f9557f4d61ec79cc2cdbe76da8df6c6ae5f978a50a2847c22cc61aa240da95 gcr.io/knative-releases/knative.dev/serving/cmd/domain-mapping@sha256:763d648bf1edee2b4471b0e211dbc53ba2d28f92e4dae28ccd39af7185ef2c96 gcr.io/knative-releases/knative.dev/serving/cmd/domain-mapping-webhook@sha256:a4ba0076df2efaca2eed561339e21b3a4ca9d90167befd31de882bff69639470 gcr.io/knative-releases/knative.dev/serving/cmd/queue@sha256:505179c0c4892ea4a70e78bc52ac21b03cd7f1a763d2ecc78e7bbaa1ae59c86c gcr.io/knative-releases/knative.dev/serving/cmd/webhook@sha256:bc13765ba4895c0fa318a065392d05d0adc0e20415c739e0aacb3f56140bf9ae gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1 gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0 gcr.io/ml-pipeline/api-server:2.0.0-alpha.7 gcr.io/ml-pipeline/cache-server:2.0.0-alpha.7 gcr.io/ml-pipeline/frontend gcr.io/ml-pipeline/frontend:2.0.0-alpha.7 gcr.io/ml-pipeline/metadata-envoy:2.0.0-alpha.7 gcr.io/ml-pipeline/metadata-writer:2.0.0-alpha.7 gcr.io/ml-pipeline/minio:RELEASE.2019-08-14T20-37-41Z-license-compliance gcr.io/ml-pipeline/mysql:8.0.26 gcr.io/ml-pipeline/persistenceagent:2.0.0-alpha.7 gcr.io/ml-pipeline/scheduledworkflow:2.0.0-alpha.7 gcr.io/ml-pipeline/viewer-crd-controller:2.0.0-alpha.7 gcr.io/ml-pipeline/visualization-server gcr.io/ml-pipeline/visualization-server:2.0.0-alpha.7 gcr.io/ml-pipeline/workflow-controller:v3.3.8-license-compliance gcr.io/tfx-oss-public/ml_metadata_store_server:1.5.0 下载相关镜像 下载镜像并推送到hub.docker.com个人仓库(脚本中未放docker login，登录后再执行即可，也可以把登录放入脚本中)。\nhub.docker.com仓库需要自行注册\n在能访问gcr.io的服务器上执行。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 a=( gcr.io/arrikto/kubeflow/oidc-authservice:e236439 gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1 gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0 gcr.io/ml-pipeline/api-server:2.0.0-alpha.7 gcr.io/ml-pipeline/cache-server:2.0.0-alpha.7 gcr.io/ml-pipeline/frontend gcr.io/ml-pipeline/frontend:2.0.0-alpha.7 gcr.io/ml-pipeline/metadata-envoy:2.0.0-alpha.7 gcr.io/ml-pipeline/metadata-writer:2.0.0-alpha.7 gcr.io/ml-pipeline/minio:RELEASE.2019-08-14T20-37-41Z-license-compliance gcr.io/ml-pipeline/mysql:8.0.26 gcr.io/ml-pipeline/persistenceagent:2.0.0-alpha.7 gcr.io/ml-pipeline/scheduledworkflow:2.0.0-alpha.7 gcr.io/ml-pipeline/viewer-crd-controller:2.0.0-alpha.7 gcr.io/ml-pipeline/visualization-server gcr.io/ml-pipeline/visualization-server:2.0.0-alpha.7 gcr.io/ml-pipeline/workflow-controller:v3.3.8-license-compliance gcr.io/tfx-oss-public/ml_metadata_store_server:1.5.0 ) b=(${a[*]//gcr.io*\\//strongxyz/}) for ((i=0; i\u0026lt;${#a[*]}; i++)); do sudo docker pull \u0026#34;${a[i]}\u0026#34; sudo docker tag \u0026#34;${a[i]}\u0026#34; \u0026#34;${b[i]}\u0026#34; sudo docker push \u0026#34;${b[i]}\u0026#34; sudo docker rmi \u0026#34;${b[i]}\u0026#34; sudo docker rmi \u0026#34;${a[i]}\u0026#34; done 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 a=( gcr.io/knative-releases/knative.dev/eventing/cmd/controller@sha256:33d78536e9b38dbb2ec2952207b48ff8e05acb48e7d28c2305bd0a0f7156198f gcr.io/knative-releases/knative.dev/eventing/cmd/mtping@sha256:282b5265e1ef26309b3343038c9b4f172654e06cbee46f6ddffd23ea9ad9a3be gcr.io/knative-releases/knative.dev/eventing/cmd/webhook@sha256:d217ab7e3452a87f8cbb3b45df65c98b18b8be39551e3e960cd49ea44bb415ba gcr.io/knative-releases/knative.dev/net-istio/cmd/controller@sha256:2b484d982ef1a5d6ff93c46d3e45f51c2605c2e3ed766e20247d1727eb5ce918 gcr.io/knative-releases/knative.dev/net-istio/cmd/webhook@sha256:59b6a46d3b55a03507c76a3afe8a4ee5f1a38f1130fd3d65c9fe57fff583fa8d gcr.io/knative-releases/knative.dev/serving/cmd/activator@sha256:c3bbf3a96920048869dcab8e133e00f59855670b8a0bbca3d72ced2f512eb5e1 gcr.io/knative-releases/knative.dev/serving/cmd/autoscaler@sha256:caae5e34b4cb311ed8551f2778cfca566a77a924a59b775bd516fa8b5e3c1d7f gcr.io/knative-releases/knative.dev/serving/cmd/controller@sha256:38f9557f4d61ec79cc2cdbe76da8df6c6ae5f978a50a2847c22cc61aa240da95 gcr.io/knative-releases/knative.dev/serving/cmd/domain-mapping@sha256:763d648bf1edee2b4471b0e211dbc53ba2d28f92e4dae28ccd39af7185ef2c96 gcr.io/knative-releases/knative.dev/serving/cmd/domain-mapping-webhook@sha256:a4ba0076df2efaca2eed561339e21b3a4ca9d90167befd31de882bff69639470 gcr.io/knative-releases/knative.dev/serving/cmd/queue@sha256:505179c0c4892ea4a70e78bc52ac21b03cd7f1a763d2ecc78e7bbaa1ae59c86c gcr.io/knative-releases/knative.dev/serving/cmd/webhook@sha256:bc13765ba4895c0fa318a065392d05d0adc0e20415c739e0aacb3f56140bf9ae ) b=( strongxyz/eventing_cmd_controller:sha256 strongxyz/eventing_cmd_mtping:sha256 strongxyz/eventing_cmd_webhook:sha256 strongxyz/net-istio_cmd_controller:sha256 strongxyz/net-istio_cmd_webhook:sha256 strongxyz/serving_cmd_activator:sha256 strongxyz/serving_cmd_autoscaler:sha256 strongxyz/serving_cmd_controller:sha256 strongxyz/serving_cmd_domain-mapping:sha256 strongxyz/serving_cmd_domain-mapping-webhook:sha256 strongxyz/serving_cmd_queue:sha256 strongxyz/serving_cmd_webhook:sha256 ) for ((i=0; i\u0026lt;${#a[*]}; i++)); do sudo docker pull \u0026#34;${a[i]}\u0026#34; sudo docker tag \u0026#34;${a[i]}\u0026#34; \u0026#34;${b[i]}\u0026#34; sudo docker push \u0026#34;${b[i]}\u0026#34; sudo docker rmi \u0026#34;${b[i]}\u0026#34; sudo docker rmi \u0026#34;${a[i]}\u0026#34; done 在172.27.244.154-156等3台worker机器执行，拉取镜像，重新打tag。如果master也是worker节点，master也需要拉取镜像。\n拉取镜像不需要登录。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 a=( gcr.io/arrikto/kubeflow/oidc-authservice:e236439 gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1 gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0 gcr.io/ml-pipeline/api-server:2.0.0-alpha.7 gcr.io/ml-pipeline/cache-server:2.0.0-alpha.7 gcr.io/ml-pipeline/frontend gcr.io/ml-pipeline/frontend:2.0.0-alpha.7 gcr.io/ml-pipeline/metadata-envoy:2.0.0-alpha.7 gcr.io/ml-pipeline/metadata-writer:2.0.0-alpha.7 gcr.io/ml-pipeline/minio:RELEASE.2019-08-14T20-37-41Z-license-compliance gcr.io/ml-pipeline/mysql:8.0.26 gcr.io/ml-pipeline/persistenceagent:2.0.0-alpha.7 gcr.io/ml-pipeline/scheduledworkflow:2.0.0-alpha.7 gcr.io/ml-pipeline/viewer-crd-controller:2.0.0-alpha.7 gcr.io/ml-pipeline/visualization-server gcr.io/ml-pipeline/visualization-server:2.0.0-alpha.7 gcr.io/ml-pipeline/workflow-controller:v3.3.8-license-compliance gcr.io/tfx-oss-public/ml_metadata_store_server:1.5.0 ) b=(${a[*]//gcr.io*\\//strongxyz/}) for ((i=0; i\u0026lt;${#a[*]}; i++)); do sudo docker pull \u0026#34;${b[i]}\u0026#34; sudo docker tag \u0026#34;${b[i]}\u0026#34; \u0026#34;${a[i]}\u0026#34; sudo docker rmi \u0026#34;${b[i]}\u0026#34; done 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 a=( gcr.io/knative-releases/knative.dev/eventing/cmd/controller:sha256 gcr.io/knative-releases/knative.dev/eventing/cmd/mtping:sha256 gcr.io/knative-releases/knative.dev/eventing/cmd/webhook:sha256 gcr.io/knative-releases/knative.dev/net-istio/cmd/controller:sha256 gcr.io/knative-releases/knative.dev/net-istio/cmd/webhook:sha256 gcr.io/knative-releases/knative.dev/serving/cmd/activator:sha256 gcr.io/knative-releases/knative.dev/serving/cmd/autoscaler:sha256 gcr.io/knative-releases/knative.dev/serving/cmd/controller:sha256 gcr.io/knative-releases/knative.dev/serving/cmd/domain-mapping:sha256 gcr.io/knative-releases/knative.dev/serving/cmd/domain-mapping-webhook:sha256 gcr.io/knative-releases/knative.dev/serving/cmd/queue:sha256 gcr.io/knative-releases/knative.dev/serving/cmd/webhook:sha256 ) b=( strongxyz/eventing_cmd_controller:sha256 strongxyz/eventing_cmd_mtping:sha256 strongxyz/eventing_cmd_webhook:sha256 strongxyz/net-istio_cmd_controller:sha256 strongxyz/net-istio_cmd_webhook:sha256 strongxyz/serving_cmd_activator:sha256 strongxyz/serving_cmd_autoscaler:sha256 strongxyz/serving_cmd_controller:sha256 strongxyz/serving_cmd_domain-mapping:sha256 strongxyz/serving_cmd_domain-mapping-webhook:sha256 strongxyz/serving_cmd_queue:sha256 strongxyz/serving_cmd_webhook:sha256 ) for ((i=0; i\u0026lt;${#a[*]}; i++)); do sudo docker pull \u0026#34;${b[i]}\u0026#34; sudo docker tag \u0026#34;${b[i]}\u0026#34; \u0026#34;${a[i]}\u0026#34; sudo docker rmi \u0026#34;${b[i]}\u0026#34; done vi example/kustomization.yaml，最后添加以下内容。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 images: - name: gcr.io/knative-releases/knative.dev/eventing/cmd/controller@sha256:33d78536e9b38dbb2ec2952207b48ff8e05acb48e7d28c2305bd0a0f7156198f newName: gcr.io/knative-releases/knative.dev/eventing/cmd/controller newTag: \u0026#34;sha256\u0026#34; - name: gcr.io/knative-releases/knative.dev/eventing/cmd/mtping@sha256:282b5265e1ef26309b3343038c9b4f172654e06cbee46f6ddffd23ea9ad9a3be newName: gcr.io/knative-releases/knative.dev/eventing/cmd/mtping newTag: \u0026#34;sha256\u0026#34; - name: gcr.io/knative-releases/knative.dev/eventing/cmd/webhook@sha256:d217ab7e3452a87f8cbb3b45df65c98b18b8be39551e3e960cd49ea44bb415ba newName: gcr.io/knative-releases/knative.dev/eventing/cmd/webhook newTag: \u0026#34;sha256\u0026#34; - name: gcr.io/knative-releases/knative.dev/net-istio/cmd/controller@sha256:2b484d982ef1a5d6ff93c46d3e45f51c2605c2e3ed766e20247d1727eb5ce918 newName: gcr.io/knative-releases/knative.dev/net-istio/cmd/controller newTag: \u0026#34;sha256\u0026#34; - name: gcr.io/knative-releases/knative.dev/net-istio/cmd/webhook@sha256:59b6a46d3b55a03507c76a3afe8a4ee5f1a38f1130fd3d65c9fe57fff583fa8d newName: gcr.io/knative-releases/knative.dev/net-istio/cmd/webhook newTag: \u0026#34;sha256\u0026#34; - name: gcr.io/knative-releases/knative.dev/serving/cmd/activator@sha256:c3bbf3a96920048869dcab8e133e00f59855670b8a0bbca3d72ced2f512eb5e1 newName: gcr.io/knative-releases/knative.dev/serving/cmd/activator newTag: \u0026#34;sha256\u0026#34; - name: gcr.io/knative-releases/knative.dev/serving/cmd/autoscaler@sha256:caae5e34b4cb311ed8551f2778cfca566a77a924a59b775bd516fa8b5e3c1d7f newName: gcr.io/knative-releases/knative.dev/serving/cmd/autoscaler newTag: \u0026#34;sha256\u0026#34; - name: gcr.io/knative-releases/knative.dev/serving/cmd/controller@sha256:38f9557f4d61ec79cc2cdbe76da8df6c6ae5f978a50a2847c22cc61aa240da95 newName: gcr.io/knative-releases/knative.dev/serving/cmd/controller newTag: \u0026#34;sha256\u0026#34; - name: gcr.io/knative-releases/knative.dev/serving/cmd/domain-mapping@sha256:763d648bf1edee2b4471b0e211dbc53ba2d28f92e4dae28ccd39af7185ef2c96 newName: gcr.io/knative-releases/knative.dev/serving/cmd/domain-mapping newTag: \u0026#34;sha256\u0026#34; - name: gcr.io/knative-releases/knative.dev/serving/cmd/domain-mapping-webhook@sha256:a4ba0076df2efaca2eed561339e21b3a4ca9d90167befd31de882bff69639470 newName: gcr.io/knative-releases/knative.dev/serving/cmd/domain-mapping-webhook newTag: \u0026#34;sha256\u0026#34; - name: gcr.io/knative-releases/knative.dev/serving/cmd/queue@sha256:505179c0c4892ea4a70e78bc52ac21b03cd7f1a763d2ecc78e7bbaa1ae59c86c newName: gcr.io/knative-releases/knative.dev/serving/cmd/queue newTag: \u0026#34;sha256\u0026#34; - name: gcr.io/knative-releases/knative.dev/serving/cmd/webhook@sha256:bc13765ba4895c0fa318a065392d05d0adc0e20415c739e0aacb3f56140bf9ae newName: gcr.io/knative-releases/knative.dev/serving/cmd/webhook newTag: \u0026#34;sha256\u0026#34; 修改kubeflow默认密码 随便找台有python3的机器执行都可以，这里在172.27.244.151上执行。\n1 2 3 sudo apt install python3-pip sudo pip3 install passlib python3 -c \u0026#39;from passlib.hash import bcrypt; import getpass; print(bcrypt.using(rounds=12, ident=\u0026#34;2y\u0026#34;).hash(getpass.getpass()))\u0026#39; 以上为交互式命令，输入密码，返回hash值。\n123456\n$2y$12$cDyyBfNqBDpQ9kkRoJYSI.xWggu2r9iHj1234GuTFddJkaWZu3a33\nvi common/dex/base/config-map.yaml，修改对应内容。\n一键安装kubeflow 不同版本，此安装脚本示例会有些不同，具体请参考 https://github.com/kubeflow/manifests?tab=readme-ov-file#install-with-a-single-command\n1 while ! kustomize build example | awk \u0026#39;!/well-defined/\u0026#39; | kubectl apply -f -; do echo \u0026#34;Retrying to apply resources\u0026#34;; sleep 10; done 安装完成后 问题1 pod报错：\nerror: resource mapping not found for name: \u0026ldquo;webhook\u0026rdquo; namespace: \u0026ldquo;knative-serving\u0026rdquo; from \u0026ldquo;STDIN\u0026rdquo;: no matches for kind \u0026ldquo;HorizontalPodAutoscaler\u0026rdquo; in version \u0026ldquo;autoscaling/v2beta2\u0026rdquo;\n原因：\nhttps://kubernetes.io/docs/reference/using-api/deprecation-guide/#horizontalpodautoscaler-v125\nhttps://www.kubeflow.org/docs/releases/kubeflow-1.7/#dependency-versions-manifests\n解决办法：\n修改common/knative/knative-serving/base/upstream/serving-core.yaml对应的镜像autoscaling/v2\n问题2 有些镜像拉取策略需要修改成IfNotPresent，如下：\n1 2 3 common/oidc-authservice/base/statefulset.yaml apps/pipeline/upstream/base/pipeline/ml-pipeline-viewer-crd-deployment.yaml apps/pipeline/upstream/base/cache/cache-deployment.yaml 问题3 有些只有一个副本，避免下次运行在另一台worker机器又去拉取镜像，3台worker都拉取以下镜像。\n1 2 3 sudo docker pull kubeflowkatib/katib-db-manager:v0.15.0 sudo docker pull mysql:8.0.29 sudo docker pull python:3.7 问题4 mysql的pod报错 chown: changing ownership of \u0026lsquo;/var/lib/mysql/\u0026rsquo;: Operation not permitted\n解决：\n修改nfs-server，把all_squash改成no_root_squash\nsudo vi /etc/exports\nsudo exportfs -a\n安装nfs-server时就用no_root_squash，避免此问题产生。\n安装keepalived 找两台机器安装keepalived，这里选在172.27.244.152-153上安装。\n1 sudo apt -y install nginx keepalived nginx配置：\n1 2 3 sudo rm /etc/nginx/sites-enabled/default sudo cp /etc/nginx/nginx.conf{,.bak} sudo vi /etc/nginx/nginx.conf 配置参考：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 stream { upstream k8s-80 { least_conn; server 172.27.244.154:80 max_fails=3 fail_timeout=5s; server 172.27.244.155:80 max_fails=3 fail_timeout=5s; server 172.27.244.156:80 max_fails=3 fail_timeout=5s; } upstream k8s-443 { least_conn; server 172.27.244.154:443 max_fails=3 fail_timeout=5s; server 172.27.244.155:443 max_fails=3 fail_timeout=5s; server 172.27.244.156:443 max_fails=3 fail_timeout=5s; } server { listen 80; proxy_pass k8s-80; } server { listen 443; proxy_pass k8s-443; } } 1 2 sudo nginx -t sudo nginx -s reload keepalived配置：\nhttps://manpages.debian.org/unstable/keepalived/keepalived.conf.5.en.html\nhttps://manpages.ubuntu.com/manpages/focal/man5/keepalived.conf.5.html\nhttps://keepalived.readthedocs.io/en/latest/configuration_synopsis.html#global-definitions-synopsis\nhttps://github.com/acassen/keepalived/tree/master/doc/samples\n/usr/share/doc/keepalived/samples/keepalived.conf.vrrp.localcheck\n/usr/share/doc/keepalived/samples/keepalived.conf.vrrp\n1 sudo vi /etc/keepalived/keepalived.conf 配置参考，两台机器IP对换一下即可，另一台机器配置state BACKUP\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 global_defs { script_user root enable_script_security } vrrp_script chk_nginx { script \u0026#34;killall -0 nginx\u0026#34; interval 2 weight 2 } vrrp_instance VI_1 { state MASTER interface ens18 garp_master_delay 10 #default #smtp_alert #是否发送邮件 virtual_router_id 55 priority 100 #实例优先级 advert_int 1 authentication { auth_type PASS auth_pass 00002023 } unicast_src_ip 172.27.244.152 unicast_peer { #单播 172.27.244.153 } virtual_ipaddress { 172.27.244.160/24 dev ens18 } track_script { chk_nginx } } 1 sudo systemctl restart keepalived 域名解析：\n172.27.244.160 rancher-ai.example.com\n172.27.244.160 kubeflow-ai.example.com\n安装nfs server 在172.27.244.150执行。\n安装。\n1 2 3 4 5 sudo apt -y install nfs-kernel-server sudo mkdir /data_nfs sudo chown 1000.1000 /data_nfs echo \u0026#39;/data_nfs 172.27.244.0/24(rw,sync,insecure,no_subtree_check,no_root_squash,no_all_squash,anonuid=1000,anongid=1000)\u0026#39; | sudo tee -a /etc/exports sudo exportfs -a 检查nfs状态。\n1 2 3 4 systemctl status nfs-server sudo rpcinfo -p | grep nfs cat /var/lib/nfs/etab sudo exportfs 安装harbor 在172.27.244.150执行。\n安装docker 版本换成5:23.0.6-1~ubuntu.20.04~focal，也可以不带版本号安装最新版本，其它略。\n1 2 3 4 5 #查看可安装版本 apt-cache madison docker-ce VERSION_STRING=5:23.0.6-1~ubuntu.20.04~focal sudo apt-get install docker-ce=$VERSION_STRING docker-ce-cli=$VERSION_STRING containerd.io docker-buildx-plugin docker-compose-plugin 安装docker-compose 版本号v2.20.1需要自行确认，可以安装当前最新版本。\n1 2 sudo curl -L https://github.com/docker/compose/releases/download/v2.20.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose 开始安装harbor 1 wget https://github.com/goharbor/harbor/releases/download/v2.8.2/harbor-offline-installer-v2.8.2.tgz 略\u0026hellip;\n","permalink":"https://yanyong.cc/post/kubeflow-install/","tags":["kubeflow"],"title":"kubeflow安装教程"},{"categories":["Uncategorized"],"contents":"背景 C++写的小工具(源代码)用了libcurl库，开发时用vcpkg管理的第三方库，默认是动态链接库，发布给他人使用时还得把libcurl.dll和zlib1.dll文件一起发布，太麻烦了，搜索了一通，找到了vcpkg静态链接库的方法。\n方法 我的环境：windows10 + VS2019 + vcpkg。\nvcpkg安装时带上static，如下所示，\nvcpkg install curl:x64-windows-static\n项目下PROJECTNAME.vcxproj文件在\u0026lt;PropertyGroup Label=\u0026quot;Globals\u0026quot;\u0026gt;...\u0026lt;/PropertyGroup\u0026gt;标签中添加以下内容。\n\u0026lt;VcpkgTriplet Condition=\u0026quot;'$(Platform)'=='Win32'\u0026quot;\u0026gt;x86-windows-static\u0026lt;/VcpkgTriplet\u0026gt; \u0026lt;VcpkgTriplet Condition=\u0026quot;'$(Platform)'=='x64'\u0026quot;\u0026gt;x64-windows-static\u0026lt;/VcpkgTriplet\u0026gt;\n项目单击右键，属性\u0026ndash;链接器\u0026ndash;输入\u0026ndash;附加依赖项，添加以下依赖，libcurl依赖项可以从源码包的winbuild/README.md文件查看。\nadvapi32.lib;crypt32.lib;normaliz.lib;ws2_32.lib;wldap32.lib\n参考 https://devblogs.microsoft.com/cppblog/vcpkg-updates-static-linking-is-now-available/\nhttps://stackoverflow.com/questions/58506430/how-to-statically-link-vcpkg-produced-lib-file-in-visual-studio\nhttps://www.youtube.com/watch?v=9TNPhanYbrA\n","permalink":"https://yanyong.cc/post/vcpkgstaticlink/","tags":["c++","cpp","vcpkg","libcurl"],"title":"vcpkg静态链接libcurl"},{"categories":["Uncategorized"],"contents":"背景 最近用C++写一个小工具，顺便总结了一个c++代码风格。不拒绝匈牙利命名，但不制造匈牙利命名！^_^\n代码风格 具体来说，只是列出了命名的约定。其它参考Google C++ Style Guide。\nC++ Style and Technique FAQ 请参考 Bjarne Stroustrup\u0026rsquo;s Homepage\n通用规则 General Naming Rules\n命名尽量见名知义，不用莫名其妙的缩写，名称能传递更多的信息，好过写再多注释。\n驼峰一般只大写单词的首字母，包括缩写词，比如RPC和ID。\n大驼峰，写StartRpc，不要写StartRPC。\n大驼峰，写UserId，不要写UserID。\n小驼峰，写userId，不要写userID。\n用众所周知的变量，例如迭代变量i和模板参数T。\n类 Type Names\n大驼峰，无下划线。\n类、结构体、枚举、类模板参数、类型别名。\n1 2 3 class MyClass {}; struct MyStruct {}; enum class MyEnum {}; 1 2 typedef hash_map\u0026lt;UrlTableProperties *, std::string\u0026gt; PropertiesMap; using PropertiesMap = hash_map\u0026lt;UrlTableProperties *, std::string\u0026gt;; 变量 Variable Names\n全小写，下划线。\n一般维基中有列出的缩写，可以用，比如fqdn。\n1 std::string fqdn; //Fully Qualified Domain Name 1 std::string table_name; 类数据成员，末尾加下划线。\nGoogle大概是想着不用写this-\u0026gt;table_name = table_name这样的语句，可以直接写table_name_ = table_name了。\n1 2 3 4 5 6 class TableInfo { ... private: std::string table_name_; static Pool\u0026lt;TableInfo\u0026gt;* pool_; }; 结构体数据成员，结尾不加下划线。\n1 2 3 4 5 struct UrlTableProperties { std::string name; int num_entries; static Pool\u0026lt;UrlTableProperties\u0026gt;* pool; }; 函数 Function Names\n常规函数大驼峰。\n访问器和修改器（get和set函数）可以像变量一样命名，void set_count(int count)。小驼峰也行，保持一致就行，void setCount(int count)。\n1 2 3 4 MyFunction() AddTableEntry() DeleteUrl() OpenFileOrDie() 1 2 int count(); void set_count(int count); 常量 Constant Names\n变量前面加小写字母k，其它部分大驼峰。\n为什么是k， 不是c，constant?\n通常的c表示char，C表示class，所以用了konstant，这是个德语词，参考stackoverflow。\n其实这也算是一种匈牙利命名，Google这么做我想是为了从命名上把常量跟宏区分开吧。\n1 2 const int kDaysInAWeek = 7; const int kAndroid8_0_0 = 24; // Android 8.0.0 宏 Macro Names\n全大写，下划线。\n1 2 #define MY_NAME yanyong #define PI_ROUNDED 3.14 枚举常量 Enumerator Names\n同宏或常量的命名规则，更喜欢用宏的习惯，全大写加下划线。\n最后一个元素可以加逗号,，也可以不加逗号，最好统一加上，我想元素在格式上的一致可以更好地生成吧，详情参考stackoverflow，数组好像也是如此。\n1 2 3 4 5 enum class UrlTableError { kOk = 0, //kOk两个k都是小写字母 kOutOfMemory, kMalformedInput, }; 1 2 3 4 5 enum class AlternateUrlTableError { OK = 0, OUT_OF_MEMORY = 1, MALFORMED_INPUT = 2, }; enum class和enum的区别，首选enum class。 参考stackoverflow。\n对枚举作用域限定，不会隐式转换。\n1 2 3 enum class Color1 { RED, GREEN, BLUE, }; enum class Color2 { RED, GREEN, BLUE, }; int x = static_cast\u0026lt;int\u0026gt;(Color1::RED); 编译通过。\n1 2 enum Color { RED, GREEN, BLUE, }; int x = RED; 编译错误。\n1 2 3 enum Color1 { RED, GREEN, BLUE, }; enum Color2 { RED, GREEN, BLUE, }; int x = RED; 例外 Exceptions to Naming Rules\n如果正在命名类似于现有C/C++ 实体的东西，遵循现有的命名约定方案。\n1 2 3 4 5 6 7 8 9 10 bigopen() function name, follows form of open() uint typedef bigpos struct or class, follows form of pos sparse_hash_map STL-like entity; follows STL naming conventions LONGLONG_MAX a constant, as in INT_MAX 参考 Google C++ Style Guide\n中文版开源地址\n","permalink":"https://yanyong.cc/post/cppstyle/","tags":["c++","cpp"],"title":"我的C++代码风格"},{"categories":["Uncategorized"],"contents":"需求 网易的免费邮箱：https://ym.163.com，迁移邮箱。如果是迁移到企业邮箱的话，企业邮箱一般会有提供导入之类的功能，如果是迁移到自建的邮箱（比如iredmail）可以用getmail4工具。\n去收集每个用户的密码太麻烦，手动重置每个用户的密码？手动点是不可能点的，只有写点代码才可以快速解决这样子！\n代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 (function() { var ajax = { get: function(url) { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (xhttp.readyState === XMLHttpRequest.DONE) { if (xhttp.status === 200) { console.log(xhttp.responseText); } else { console.log(\u0026#34;xhttp.status === \u0026#34; + xhttp.status); } } else { console.log(\u0026#34;xhttp.readyState === \u0026#34; + xhttp.readyState); } } xhttp.open(\u0026#39;GET\u0026#39;, url, true); xhttp.send(); }, post: function(url, data, log) { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (xhttp.readyState === XMLHttpRequest.DONE) { if (xhttp.status === 200) { //console.log(xhttp.responseText); //console.log(1); //console.log((decodeURIComponent(data.split(\u0026#34;\u0026amp;\u0026#34;)[1])).split(\u0026#34;=\u0026#34;)[1] + \u0026#34;: 密码修改成功！\u0026#34;); console.log(log); } else { console.log(\u0026#34;xhttp.status === \u0026#34; + xhttp.status); } } else { console.log(\u0026#34;xhttp.readyState === \u0026#34; + xhttp.readyState); } } xhttp.open(\u0026#39;POST\u0026#39;, url, true); xhttp.setRequestHeader(\u0026#39;Content-Type\u0026#39;, \u0026#39;application/x-www-form-urlencoded\u0026#39;); xhttp.send(data); } }; var getValue = function(href, key) { var str = href.substring(href.indexOf(\u0026#34;?\u0026#34;) + 1); var arr = str.split(\u0026#34;\u0026amp;\u0026#34;); var arr2 = null; var value = null; for (var i=0; i\u0026lt;arr.length; i++) { arr2 = arr[i].split(\u0026#34;=\u0026#34;); if (key === arr2[0]) { value = arr2[1]; } } return value; }; const list = $(\u0026#34;div.manage-list\u0026#34;).find(\u0026#34;table tbody tr\u0026#34;); var nickname = null; var mobile = null; var href = null; var account_id = null; var aid = null; const url_pre = \u0026#34;https://app.ym.163.com/ym/action/account/updateAccount?aid=\u0026#34;; var url = null; var formData = null; const chgpass = \u0026#34;123456789\u0026#34;; //修改为此密码 for (var i=0; i\u0026lt;list.length; i++) { if (list.eq(i).find(\u0026#34;td.wd1 span\u0026#34;).length === 0) { //排除管理员 nickname = list.eq(i).find(\u0026#34;td.wd1\u0026#34;).html(); mobile = list.eq(i).find(\u0026#34;td.wd3\u0026#34;).html(); href = list.eq(i).find(\u0026#34;td.wd5 a\u0026#34;).eq(0).attr(\u0026#34;href\u0026#34;); account_id = getValue(href, \u0026#34;account_id\u0026#34;); aid = getValue(href, \u0026#34;aid\u0026#34;); url = url_pre + aid; formData = { account_id: account_id, nickname: nickname, mobile: mobile, pass_re: chgpass, //竟然明文的！ u_id: \u0026#34;0\u0026#34; }; let data = \u0026#34;\u0026#34;; $.each(formData, function(key, value){ data += \u0026#34;\u0026amp;\u0026#34; + key + \u0026#34;=\u0026#34; + encodeURIComponent(value); }); data = data.substring(1); // console.log(url); // console.log(data); let log = nickname + \u0026#34;: 密码修改成功！\u0026#34;; ajax.post(url, data, log); } } })(); 运行 console执行js代码，管理员帐号登录，如果有多页需要手动翻页多次执行。\n参考 MDN\njQuery\n","permalink":"https://yanyong.cc/post/ym-163-com-javascript/","tags":["js","javascript"],"title":"Javascript是最好的语言，[狗头保命]"},{"categories":["Uncategorized"],"contents":"需求 来活儿了！开通500个邮箱！约摸2年前自建的iRedMail邮箱服务器闪亮登场！\n这要是从后台届面手动注册，没个一天估计点不完，需求方没有给出用户名列表，光想出500个用户名也是不小的工作量，经过沟通，简单提取了一下需求，邮箱主要用来注册某某平台帐号，收一下验证码或验证邮件，所以容量方便应该没有太多要求，为减少被平台风控，尽量不要用太有规律的用户名，比如user001-user500之类的，如果用随机字符串做用户名也感觉像机器人搞出来的，是不是也会增加被风控的风险呢，如果能随机一些单词做为用户名就再好不过了。\n经过一番搜索发现Debian系统自带了一个字典/usr/share/dict/words，此字典内包含了一些法语字母，脚本中正则过滤掉法语。随机数可能出现重复的情况，利用循环处理一下得到500个邮箱地址。\n脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #!/bin/bash #iredmail脚本路径 #https://raw.yanyong.cc/sh/create_mail_user_SQL.sh sh=\u0026#39;/home/yan/iRedMail-1.3.2/tools/create_mail_user_SQL.sh\u0026#39; #利用系统自带字典生成长度4-12的小写单词字典，-P 以perl-regexp模式很重要，不然会匹配到法语字母 grep -P \u0026#39;^[a-z]{4,12}$\u0026#39; /usr/share/dict/words \u0026gt; /tmp/words.txt wordsPath=\u0026#39;/tmp/words.txt\u0026#39; #字典文件路径 wordsLines=$(wc -l $wordsPath | awk \u0026#39;{print $1}\u0026#39;) #字典单词总数，我这里是59386 #保存邮箱地址 mailList=\u0026#39;mail.txt\u0026#39; #保存邮箱密码，与用户名行数一一对应 passwordList=\u0026#39;password.txt\u0026#39; #要生成单词数量，也就是要创建邮箱的数量 count=500 #随机数$RANDOM范围0-32767，$prime最好是质数，尽可能让结果覆盖1-59386 prime=13 rand() { rand=$(($RANDOM * $prime % $wordsLines + 1)); } domain=mydomain.com username=\u0026#39;显示名称\u0026#39; language=\u0026#39;zh_CN\u0026#39; settings=\u0026#39;timezone:Asia/Hong_Kong;\u0026#39; quota=\u0026#39;256\u0026#39; #邮箱大小，单位MB #随机数$rand可能出现相同的数字，利用while循环检测去重后的数量，生成$count个不重复的邮箱地址 touch /tmp/.temp.txt \u0026amp;\u0026amp; \u0026gt; /tmp/.temp.txt while [[ $(sort -u /tmp/.temp.txt | wc -l) -lt $count ]]; do rand #调用rand()函数 word=$(sed -n \u0026#34;$rand\u0026#34;p $wordsPath) echo \u0026#34;$word\u0026#34;@\u0026#34;$domain\u0026#34; \u0026gt;\u0026gt; /tmp/.temp.txt done sort -u /tmp/.temp.txt \u0026gt; $mailList rm /tmp/.temp.txt mail_array=(`cat $mailList`) #存入数组mail_array for ((i=0; i\u0026lt;$count; i++)); do mail=${mail_array[i]} password=\u0026#34;$(tr -dc \u0026#39;[:digit:][:alpha:]\u0026#39; \u0026lt; /dev/urandom | head -c 10)\u0026#34; #大小写母数字10位 echo $password \u0026gt;\u0026gt; $passwordList sudo bash $sh $mail $password $username $language $settings $quota \u0026gt;\u0026gt; adduser.20220615.sql done 执行脚本会在当前目录生成三个文件adduser.20220615.sql，mail.txt，password.txt。\n三个文件输出部分示例如下：\n1 2 3 4 5 6 7 8 9 10 11 $ tail adduser.20220615.sql INSERT INTO mailbox (username, password, name, language, settings, storagebasedirectory,storagenode, maildir, quota, domain, active, passwordlastchange, created) VALUES (\u0026#39;zodiac@mydomain.com\u0026#39;, \u0026#39;{SSHA512}+uaG/k7jRMxp9aB66PcO7n/lWLHUMtgOtBPcPUQ0mprIKZp7M3exKlMQ2ASGsXHqDFsIPcS/SIoo+YtcWQgYmdOWGF0=\u0026#39;, \u0026#39;显示名称\u0026#39;, \u0026#39;zh_CN\u0026#39;, \u0026#39;timezone:Asia/Hong_Kong;\u0026#39;, \u0026#39;/var/vmail\u0026#39;,\u0026#39;vmail1\u0026#39;, \u0026#39;mydomain.com/zodiac-2022.06.15.14.48.03/\u0026#39;, \u0026#39;256\u0026#39;, \u0026#39;mydomain.com\u0026#39;, \u0026#39;1\u0026#39;, NOW(), NOW()); INSERT INTO forwardings (address, forwarding, domain, dest_domain, is_forwarding) VALUES (\u0026#39;zodiac@mydomain.com\u0026#39;, \u0026#39;zodiac@mydomain.com\u0026#39;,\u0026#39;mydomain.com\u0026#39;, \u0026#39;mydomain.com\u0026#39;, 1); 1 2 3 4 5 6 7 8 9 10 11 $ nl mail.txt | tail 491 wittingly@mydomain.com 492 wolverine@mydomain.com 493 writhing@mydomain.com 494 wrongdoers@mydomain.com 495 wuss@mydomain.com 496 yacht@mydomain.com 497 yardages@mydomain.com 498 yawed@mydomain.com 499 zilch@mydomain.com 500 zodiac@mydomain.com 1 2 3 4 5 6 7 8 9 10 11 $ nl password.txt | tail 491 G8qjEsHjZU 492 jLcP0zmBYE 493 LCYZO8JuX7 494 8GwTSdn1Mo 495 4UXgp5fEZY 496 DDYH962JF9 497 3JP8JdDunV 498 2XhVcDyxTS 499 rwnxjDeDPI 500 5Wg7jLpFs4 创建邮箱 准备工作已做好，开始创建500个邮箱！\n1 2 passwd=123456 mysql -uroot -p$passwd vmail \u0026lt; adduser.20220615.sql 收集邮箱信息 mail.txt和password.txt直接复制文本，粘帖到excel表格即可，excel表格会自动分行！\n","permalink":"https://yanyong.cc/post/iredmail-create-mail-user/","tags":["iredmail","shell"],"title":"iRedMail批量创建邮箱"},{"categories":["Uncategorized"],"contents":"最新内容 https://yanyong.cc/post/noexplain-v2ray-xray-trojan-ikev2/\n2025.4.2\n1 2 3 sudo apt-get -y install charon-systemd libstrongswan-extra-plugins libcharon-extra-plugins #sudo systemctl status strongswan 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 sudo tee /etc/swanctl/conf.d/strongswan.conf \u0026lt;\u0026lt; EOF authorities { letsencrypt { cacert = chain.pem } } connections { ikev2-eap-mschapv2 { version = 2 proposals = aes192gcm16-aes128gcm16-prfsha256-ecp256-ecp521,aes192-sha256-modp3072,aes256-sha384-modp2048-modp1024,default rekey_time = 0s pools = primary-pool-ipv4 fragmentation = yes dpd_delay = 0s # default 0s send_cert = always # default ifasked unique = never # default no local-1 { certs = cert.pem id = strongswan.yanyong.cc } remote-1 { auth = eap-mschapv2 eap_id = %any } children { ikev2-eap-mschapv2 { local_ts = 0.0.0.0/0 rekey_time = 0s dpd_action = clear esp_proposals = aes192gcm16-aes128gcm16-prfsha256-ecp256-modp3072,aes192-sha256-ecp256-modp3072,default } } } } pools { primary-pool-ipv4 { addrs = 172.16.255.0/24 dns = 1.1.1.1, 8.8.8.8 } } secrets { eap-carol { id = user secret = \u0026#34;userpassword\u0026#34; } } EOF 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #https://docs.strongswan.org/docs/5.9/swanctl/swanctlDir.html sudo tee /etc/letsencrypt/renewal-hooks/deploy/strongswan.sh \u0026lt;\u0026lt; EOF #!/bin/bash cp /etc/letsencrypt/live/yanyong.cc/cert.pem /etc/swanctl/x509/ cp /etc/letsencrypt/live/yanyong.cc/chain.pem /etc/swanctl/x509ca/ cp /etc/letsencrypt/live/yanyong.cc/privkey.pem /etc/swanctl/rsa/ chmod 400 /etc/swanctl/x509/cert.pem chmod 400 /etc/swanctl/x509ca/chain.pem chmod 400 /etc/swanctl/rsa/privkey.pem swanctl --load-all EOF sudo chmod +x /etc/letsencrypt/renewal-hooks/deploy/strongswan.sh sudo /etc/letsencrypt/renewal-hooks/deploy/strongswan.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #https://docs.strongswan.org/docs/5.9/howtos/forwarding.html #https://docs.strongswan.org/docs/5.9/features/mobike.html # Forward echo \u0026#39;net.ipv4.ip_forward=1\u0026#39; | sudo tee /etc/sysctl.d/ip_forward.conf sudo sysctl -p /etc/sysctl.d/ip_forward.conf # IKE \u0026amp; MobIKE sudo iptables -A INPUT -p udp -m state --state NEW -m multiport --dports 500,4500 -j ACCEPT #sudo iptables -A INPUT -p udp -m state --state NEW -m multiport --dports isakmp,ipsec-nat-t -j ACCEPT # NAT sudo iptables -t nat -A POSTROUTING -s 172.16.255.0/24 -o eth0 -m policy --dir out --pol ipsec -j ACCEPT sudo iptables -t nat -A POSTROUTING -s 172.16.255.0/24 -o eth0 -j MASQUERADE # MTU/MSS sudo iptables -t mangle -A FORWARD -s 172.16.255.0/24 -o eth0 -m policy --pol ipsec --dir in -p tcp -m tcp --tcp-flags SYN,RST SYN -m tcpmss --mss 1361:1536 -j TCPMSS --set-mss 1360 sudo iptables -t mangle -A FORWARD -s 172.16.255.0/24 -o eth0 -m policy --pol ipsec --dir out -p tcp -m tcp --tcp-flags SYN,RST SYN -m tcpmss --mss 1361:1536 -j TCPMSS --set-mss 1360 echo \u0026#39;net.ipv4.ip_no_pmtu_disc=1\u0026#39; | sudo tee /etc/sysctl.d/ip_no_pmtu_disc.conf sudo sysctl -p /etc/sysctl.d/ip_no_pmtu_disc.conf # ESP #https://www.digitalocean.com/community/tutorials/how-to-set-up-an-ikev2-vpn-server-with-strongswan-on-ubuntu-16-04 #https://github.com/strongswan/strongswan/blob/master/testing/tests/ha/both-active/hosts/alice/etc/iptables.rules sudo iptables -A FORWARD --match policy --pol ipsec --dir in --proto esp -s 172.16.255.0/24 -j ACCEPT sudo iptables -A FORWARD --match policy --pol ipsec --dir out --proto esp -d 172.16.255.0/24 -j ACCEPT https://www.strongswan.org/\nhttps://docs.strongswan.org/docs/5.9/daemons/charon-systemd.html\nhttps://github.com/strongswan/strongswan\nhttps://wiki.strongswan.org/projects/strongswan/wiki/UsableExamples\nhttps://wiki.strongswan.org/projects/strongswan/wiki/UsableExamples#Roadwarrior-scenario\nhttps://docs.strongswan.org/docs/5.9/config/IKEv2.html\nhttps://www.strongswan.org/testing/testresults/ikev2/rw-eap-mschapv2-id-rsa/\nhttps://docs.strongswan.org/docs/5.9/swanctl/swanctlConf.html\nhttps://docs.strongswan.org/docs/5.9/howtos/securityRecommendations.html\nhttps://docs.strongswan.org/docs/5.9/config/IKEv2CipherSuites.html\n","permalink":"https://yanyong.cc/post/strongswan/","tags":["IKEv2","strongswan"],"title":"IKEv2不解释"},{"categories":["Uncategorized"],"contents":"最新内容 https://yanyong.cc/post/noexplain-v2ray-xray-trojan-ikev2/\n2025.4.2\n基础配置 安装docker和nginx 略\u0026hellip;\nssl泛域名证书和cloudflare 略\u0026hellip;\nBBR and TFO https://wiki.crowncloud.net/?How_to_enable_BBR_on_Debian_11\nhttps://www.geeksforgeeks.org/what-is-tcp-fast-open/\n1 2 3 4 5 6 7 8 sudo tee /etc/sysctl.d/bbr.sysctl.conf \u0026lt;\u0026lt; EOF net.core.default_qdisc=fq net.ipv4.tcp_congestion_control=bbr EOF sudo sysctl -p /etc/sysctl.d/bbr.sysctl.conf echo \u0026#39;net.ipv4.tcp_fastopen=3\u0026#39; | sudo tee /etc/sysctl.d/tfo.sysctl.conf sudo sysctl -p /etc/sysctl.d/tfo.sysctl.conf trojan https://trojan-gfw.github.io/trojan/\nhttps://github.com/trojan-gfw/trojan\nhttps://hub.docker.com/r/trojangfw/trojan 配置文件在/config，不在/etc/trojan，且没装tzdata\nhttps://hub.docker.com/r/teddysun/trojan 配置文件在/etc/trojan\n1 sudo docker run -d --name trojan --network=host --restart=always -v /etc/trojan:/config trojangfw/trojan 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 sudo tee /etc/trojan/config.json \u0026lt;\u0026lt; EOF { \u0026#34;run_type\u0026#34;: \u0026#34;server\u0026#34;, \u0026#34;local_addr\u0026#34;: \u0026#34;0.0.0.0\u0026#34;, \u0026#34;local_port\u0026#34;: 8443, \u0026#34;remote_addr\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;remote_port\u0026#34;: 80, \u0026#34;password\u0026#34;: [ \u0026#34;password1\u0026#34;, \u0026#34;password2\u0026#34; ], \u0026#34;log_level\u0026#34;: 3, \u0026#34;ssl\u0026#34;: { \u0026#34;cert\u0026#34;: \u0026#34;/config/ssl/fullchain.pem\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;/config/ssl/privkey.pem\u0026#34;, \u0026#34;key_password\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;cipher\u0026#34;: \u0026#34;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\u0026#34;, \u0026#34;cipher_tls13\u0026#34;: \u0026#34;TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384\u0026#34;, \u0026#34;prefer_server_cipher\u0026#34;: true, \u0026#34;alpn\u0026#34;: [ \u0026#34;http/1.1\u0026#34; ], \u0026#34;alpn_port_override\u0026#34;: { \u0026#34;h2\u0026#34;: 81 }, \u0026#34;reuse_session\u0026#34;: true, \u0026#34;session_ticket\u0026#34;: false, \u0026#34;session_timeout\u0026#34;: 600, \u0026#34;plain_http_response\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;curves\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;dhparam\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;tcp\u0026#34;: { \u0026#34;prefer_ipv4\u0026#34;: false, \u0026#34;no_delay\u0026#34;: true, \u0026#34;keep_alive\u0026#34;: true, \u0026#34;reuse_port\u0026#34;: false, \u0026#34;fast_open\u0026#34;: false, \u0026#34;fast_open_qlen\u0026#34;: 20 }, \u0026#34;mysql\u0026#34;: { \u0026#34;enabled\u0026#34;: false, \u0026#34;server_addr\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;server_port\u0026#34;: 3306, \u0026#34;database\u0026#34;: \u0026#34;trojan\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;trojan\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;cert\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ca\u0026#34;: \u0026#34;\u0026#34; } } EOF sudo mkdir /etc/trojan/ssl sudo tee /etc/letsencrypt/renewal-hooks/deploy/trojan.sh \u0026lt;\u0026lt; EOF #!/bin/bash cp /etc/letsencrypt/live/yanyong.cc/{privkey.pem,fullchain.pem} /etc/trojan/ssl/ chmod 400 /etc/trojan/ssl/* docker restart trojan EOF sudo chmod +x /etc/letsencrypt/renewal-hooks/deploy/trojan.sh sudo /etc/letsencrypt/renewal-hooks/deploy/trojan.sh trojan-go https://p4gefau1t.github.io/trojan-go/\nhttps://github.com/p4gefau1t/trojan-go\nhttps://hub.docker.com/r/p4gefau1t/trojan-go\nhttps://hub.docker.com/r/teddysun/trojan-go\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 sudo docker run \\ --name trojan-go \\ -d \\ -v /etc/trojan-go/:/etc/trojan-go \\ --network=host \\ --restart=always \\ -e TZ=Asia/Shanghai \\ p4gefau1t/trojan-go sudo tee /etc/trojan-go/config.json \u0026lt;\u0026lt; EOF { \u0026#34;run_type\u0026#34;: \u0026#34;server\u0026#34;, \u0026#34;local_addr\u0026#34;: \u0026#34;0.0.0.0\u0026#34;, \u0026#34;local_port\u0026#34;: 8444, \u0026#34;remote_addr\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;remote_port\u0026#34;: 80, \u0026#34;password\u0026#34;: [ \u0026#34;123456\u0026#34; ], \u0026#34;log_level\u0026#34;: 3, \u0026#34;ssl\u0026#34;: { \u0026#34;cert\u0026#34;: \u0026#34;/etc/trojan-go/ssl/fullchain.pem\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;/etc/trojan-go/ssl/privkey.pem\u0026#34; }, \u0026#34;websocket\u0026#34;: { \u0026#34;enabled\u0026#34;: true, \u0026#34;path\u0026#34;: \u0026#34;/abcdefg\u0026#34; } } EOF sudo mkdir /etc/trojan-go/ssl sudo tee /etc/letsencrypt/renewal-hooks/deploy/trojan-go.sh \u0026lt;\u0026lt; EOF #!/bin/bash cp /etc/letsencrypt/live/yanyong.cc/{privkey.pem,fullchain.pem} /etc/trojan-go/ssl/ chmod 400 /etc/trojan-go/ssl/* docker restart trojan-go EOF sudo chmod +x /etc/letsencrypt/renewal-hooks/deploy/trojan-go.sh sudo /etc/letsencrypt/renewal-hooks/deploy/trojan-go.sh v2ray https://www.v2fly.org/\nhttps://github.com/v2fly/v2ray-core\nhttps://hub.docker.com/r/v2fly/v2fly-core\n1 2 3 4 5 #查看默认文件 sudo docker run -d --name v2ray v2fly/v2fly-core sudo docker cp v2ray:/etc/v2ray/config.json config.json sudo docker stop v2ray sudo docker rm -v v2ray 1 sudo docker run -d --name v2ray --network=host --restart=always -v /etc/v2ray/:/etc/v2ray/ -e TZ=Asia/Shanghai v2fly/v2fly-core https://www.v2fly.org/config/overview.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 cat /proc/sys/kernel/random/uuid sudo tee /etc/v2ray/config.json \u0026lt;\u0026lt; EOF { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;error\u0026#34; }, \u0026#34;api\u0026#34;: { \u0026#34;tag\u0026#34;: \u0026#34;api\u0026#34; }, \u0026#34;inbounds\u0026#34;: [{ \u0026#34;port\u0026#34;: 16801, \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [ { \u0026#34;alterId\u0026#34;: 0, \u0026#34;id\u0026#34;: \u0026#34;9cf6573b-12a5-47c4-bc48-8f1643252a5f\u0026#34;, \u0026#34;level\u0026#34;: 0 } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;security\u0026#34;: \u0026#34;none\u0026#34;, // TLS已经交给nginx处理 \u0026#34;wsSettings\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/abcdefg\u0026#34; // 复杂点避免嗅探 } }, \u0026#34;sniffing\u0026#34;: { \u0026#34;enabled\u0026#34;: false }, \u0026#34;allocate\u0026#34;: { \u0026#34;strategy\u0026#34;: \u0026#34;always\u0026#34; } }], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;settings\u0026#34;: {}, \u0026#34;tag\u0026#34;: \u0026#34;direct\u0026#34; }, { \u0026#34;protocol\u0026#34;: \u0026#34;blackhole\u0026#34;, \u0026#34;settings\u0026#34;: {}, \u0026#34;tag\u0026#34;: \u0026#34;blocked\u0026#34; } ], \u0026#34;routing\u0026#34;: { \u0026#34;domainStrategy\u0026#34;: \u0026#34;IPIfNonMatch\u0026#34;, \u0026#34;rules\u0026#34;:[ { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;ip\u0026#34;: [ \u0026#34;geoip:private\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;blocked\u0026#34; } ] }, \u0026#34;dns\u0026#34;: { \u0026#34;servers\u0026#34;: [ \u0026#34;https://1.1.1.1/dns-query\u0026#34;, \u0026#34;https://8.8.8.8/dns-query\u0026#34;, \u0026#34;localhost\u0026#34; ] }, \u0026#34;policy\u0026#34;: {}, \u0026#34;other\u0026#34;: {} } EOF sudo docker restart v2ray Xray vless + tcp + xtls\nhttps://xtls.github.io/\nhttps://github.com/XTLS/Xray-core\nhttps://hub.docker.com/r/teddysun/xray\nhttps://github.com/XTLS/Xray-examples/blob/main/VLESS-TCP-XTLS-WHATEVER/config_server.json\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 sudo docker run -d --name xray --network=host --restart=always -v /etc/xray:/etc/xray -e TZ=Asia/Shanghai teddysun/xray sudo tee /etc/xray/config.json \u0026lt;\u0026lt; EOF { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;error\u0026#34; }, \u0026#34;api\u0026#34;: { \u0026#34;tag\u0026#34;: \u0026#34;api\u0026#34; }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 8446, \u0026#34;protocol\u0026#34;: \u0026#34;vless\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;4dbb3422-14e9-4ab6-a3ab-18edafaf5172\u0026#34;, \u0026#34;flow\u0026#34;: \u0026#34;xtls-rprx-direct\u0026#34;, \u0026#34;level\u0026#34;: 0, \u0026#34;email\u0026#34;: \u0026#34;user@example.com\u0026#34; } ], \u0026#34;decryption\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;fallbacks\u0026#34;: [ { \u0026#34;dest\u0026#34;: 80 } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;tcp\u0026#34;, \u0026#34;security\u0026#34;: \u0026#34;xtls\u0026#34;, \u0026#34;xtlsSettings\u0026#34;: { \u0026#34;alpn\u0026#34;: [ \u0026#34;http/1.1\u0026#34; ], \u0026#34;certificates\u0026#34;: [ { \u0026#34;certificateFile\u0026#34;: \u0026#34;/etc/xray/ssl/fullchain.pem\u0026#34;, \u0026#34;keyFile\u0026#34;: \u0026#34;/etc/xray/ssl/privkey.pem\u0026#34; } ] } }, \u0026#34;sniffing\u0026#34;: { \u0026#34;enabled\u0026#34;: false }, \u0026#34;allocate\u0026#34;: { \u0026#34;strategy\u0026#34;: \u0026#34;always\u0026#34; } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34; }, { \u0026#34;protocol\u0026#34;: \u0026#34;blackhole\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;blocked\u0026#34; } ], \u0026#34;routing\u0026#34;: { \u0026#34;domainStrategy\u0026#34;: \u0026#34;IPIfNonMatch\u0026#34;, \u0026#34;rules\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;ip\u0026#34;: [ \u0026#34;geoip:private\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;blocked\u0026#34; } ] }, \u0026#34;dns\u0026#34;: { \u0026#34;servers\u0026#34;: [ \u0026#34;https://1.1.1.1/dns-query\u0026#34;, \u0026#34;https://8.8.8.8/dns-query\u0026#34;, \u0026#34;localhost\u0026#34; ] } } EOF sudo mkdir /etc/xray/ssl sudo tee /etc/letsencrypt/renewal-hooks/deploy/xray.sh \u0026lt;\u0026lt; EOF #!/bin/bash cp /etc/letsencrypt/live/yanyong.cc/{privkey.pem,fullchain.pem} /etc/xray/ssl/ chmod 400 /etc/xray/ssl/* docker restart xray EOF sudo chmod +x /etc/letsencrypt/renewal-hooks/deploy/xray.sh sudo /etc/letsencrypt/renewal-hooks/deploy/xray.sh nginx配置 http://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html\nhttp://nginx.org/en/docs/http/ngx_http_core_module.html#listen\nhttps://www.chengxiaobai.com/trouble-maker/trojan-shared-443-port-scheme#more\n1 2 sudo mkdir /etc/nginx/stream.d echo \u0026#39;include /etc/nginx/stream.d/*.conf;\u0026#39; | sudo tee -a /etc/nginx/nginx.conf 编辑文件/etc/nginx/sites-enabled/v2ray.yanyong.cc，内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 server { listen 8445 ssl http2; server_name v2ray.yanyong.cc; # SSL ssl_certificate /etc/letsencrypt/live/yanyong.cc/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/yanyong.cc/privkey.pem; ssl_trusted_certificate /etc/letsencrypt/live/yanyong.cc/chain.pem; # WebSocket reverse proxy location /abcdefg { proxy_pass http://127.0.0.1:16801; proxy_http_version 1.1; proxy_cache_bypass $http_upgrade; # Proxy headers proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; proxy_set_header Host $host; } # reverse proxy location / { proxy_pass http://127.0.0.1; } } 编辑文件/etc/nginx/stream.d/sni.conf\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 stream{ # SNI，将域名映射到一个配置名 map $ssl_preread_server_name $backend_name { trojan.yanyong.cc trojan; trojan-go.yanyong.cc trojan-go; v2ray.yanyong.cc v2ray; xray.yanyong.cc xray; default web; } upstream trojan { server 127.0.0.1:8443; } upstream trojan-go { server 127.0.0.1:8444; } upstream v2ray { server 127.0.0.1:8445; } upstream xray { server 127.0.0.1:8446; } upstream web { server 127.0.0.1:80; } server { listen 443 reuseport; proxy_pass $backend_name; ssl_preread on; } } 重载nginx\n1 sudo nginx -t \u0026amp;\u0026amp; sudo nginx -s reload ","permalink":"https://yanyong.cc/post/fuckgfw/","tags":["trojan","trojan-go","v2ray","xray"],"title":"懂的都懂不解释"},{"categories":["Uncategorized"],"contents":"部署RabbitMQ Cluster Operator 1 kubectl apply -f https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml 部署RabbitMQ cluster 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 tee rabbitmq.yaml \u0026lt;\u0026lt; EOF apiVersion: rabbitmq.com/v1beta1 kind: RabbitmqCluster metadata: name: rabbitmq spec: rabbitmq: additionalConfig: | default_user=guest default_pass=guest replicas: 3 image: rabbitmq:3.8-management service: type: NodePort persistence: storageClassName: nfs-client storage: 100Gi EOF kubectl apply -f rabbitmq.yaml #查出NodePort端口 #kubectl get svc/rabbitmq kubectl get service/rabbitmq -o jsonpath=\u0026#34;{.spec.ports[0].nodePort}\u0026#34; 负载测试 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #如果部署集群时未配置用户名密码 #username=\u0026#34;$(kubectl get secret rabbitmq-default-user -o jsonpath=\u0026#39;{.data.username}\u0026#39; | base64 --decode)\u0026#34; #password=\u0026#34;$(kubectl get secret rabbitmq-default-user -o jsonpath=\u0026#39;{.data.password}\u0026#39; | base64 --decode)\u0026#34; username=guest password=guest service=\u0026#34;$(kubectl get service rabbitmq -o jsonpath=\u0026#39;{.spec.clusterIP}\u0026#39;)\u0026#34; kubectl run perf-test --image=pivotalrabbitmq/perf-test -- --uri amqp://$username:$password@$service kubectl logs --follow perf-test #删除测试的pod kubectl delete pod perf-test https://www.rabbitmq.com/kubernetes/operator/quickstart-operator.html\nhttps://github.com/rabbitmq/cluster-operator/blob/main/docs/examples/production-ready/rabbitmq.yaml\nhttps://github.com/rabbitmq/cluster-operator/tree/main/docs/examples/set-login-password-username\n","permalink":"https://yanyong.cc/post/rabbitmq-k8s/","tags":["rabbitmq"],"title":"k8s部署rabbitmq"},{"categories":["Uncategorized"],"contents":"java项目 微服务 安装插件\nMaven Integration Dockerfile\nFROM openjdk:8-jre-slim MAINTAINER yanyong ARG ACTIVE ENV JAVA_OPT=\u0026quot;-Xms1g -Xmx1g\u0026quot; ENV JAVA_ARG=\u0026quot;--spring.profiles.active=$ACTIVE\u0026quot; RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\ \u0026amp;\u0026amp; echo 'Asia/Shanghai' \u0026gt; /etc/timezone ADD target/*.jar /opt/app.jar CMD [\u0026quot;sh\u0026quot;,\u0026quot;-c\u0026quot;,\u0026quot;exec java $JAVA_OPT -jar /opt/app.jar $JAVA_ARG\u0026quot;] deployment.yaml\napiVersion: apps/v1 kind: Deployment metadata: name: megaordermiddleware-basic-gateway spec: selector: matchLabels: app: megaordermiddleware-basic-gateway replicas: 2 template: metadata: labels: app: megaordermiddleware-basic-gateway spec: containers: - name: megaordermiddleware-basic-gateway image: harbor.example.com/oms/megaordermiddleware-basic-gateway:1.0-$BUILD_NUMBER imagePullPolicy: IfNotPresent ports: - containerPort: 7777 imagePullSecrets: - name: secret-harbor-user --- apiVersion: v1 kind: Service metadata: name: megaordermiddleware-basic-gateway spec: type: NodePort selector: app: megaordermiddleware-basic-gateway ports: - port: 7777 targetPort: 7777 多环境区分，src/main/resources/bootstrap.yml\nnacos配置中心增加命名空间：yanyong\nspring: profiles: yanyong cloud: nacos: discovery: server-addr: nacos.example.com namespace: yanyong config: server-addr: nacos.example.com file-extension: yml namespace: yanyong jenkins, maven打包\nclean package -pl megaordermiddleware-basic/megaordermiddleware-basic-gateway -am -Dmaven.test.skip=true jenkins, Build脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #!/bin/sh set -ex _image=\u0026#34;harbor.example.com/oms/megaordermiddleware-basic-gateway:1.0-$BUILD_NUMBER\u0026#34; _image_latest=\u0026#34;${_image%-*}\u0026#34;-latest _workspace=\u0026#34;megaordermiddleware-basic/megaordermiddleware-basic-gateway\u0026#34; #默认当前目录 _dockerfile=\u0026#34;${_workspace}/Dockerfile-test\u0026#34; _harboruser=\u0026#34;$harboruser\u0026#34; _harborpass=\u0026#34;$harborpass\u0026#34; ACTIVE=yanyong checkimage(){ local image_id=$(docker images -q --filter reference=\u0026#34;${_image}\u0026#34;) if [[ -n \u0026#34;$image_id\u0026#34; ]]; then docker rmi -f $image_id; fi #删除镜像 } build(){ checkimage docker build -f ${_dockerfile} -t ${_image} --build-arg ACTIVE=$ACTIVE ${_workspace:-.} #ACTIVE值传入Dockerfile docker tag ${_image} ${_image_latest} #build产生的中间镜像tag为none docker rmi $(docker images -f \u0026#34;dangling=true\u0026#34; -q) || : #删除所有tag为none的镜像 } push(){ local repo=${_image%%/*} docker login -u ${_harboruser} -p ${_harborpass} ${repo} docker push ${_image} docker push ${_image_latest} docker logout checkimage } main(){ build push } main jenkins, Post-build Actions设置\n#Source files megaordermiddleware-basic/megaordermiddleware-basic-gateway/deployment-test.yaml #Remove prefix megaordermiddleware-basic/megaordermiddleware-basic-gateway #Remote directory DEPLOY/$JOB_BASE_NAME #Exec command export BUILD_NUMBER=$BUILD_NUMBER envsubst \u0026lt; DEPLOY/$JOB_BASE_NAME/deployment-test.yaml | kubectl apply -f - 前端vue Dockerfile\nFROM node:14.17.3 as nodebuilder WORKDIR /Node COPY . . #RUN apt update \u0026amp;\u0026amp; apt-get -y install yarn \u0026amp;\u0026amp; yarn \u0026amp;\u0026amp; yarn build:prod #RUN npm install \u0026amp;\u0026amp; npm run build:prod #RUN npm install --registry=https://registry.npm.taobao.org \u0026amp;\u0026amp; npm run build:prod #RUN npm install --registry=https://mirrors.huaweicloud.com/repository/npm/ \u0026amp;\u0026amp; npm run build:prod RUN git config --global url.\u0026quot;https://\u0026quot;.insteadOf git:// \\ \u0026amp;\u0026amp; cp .env.test .env.production \\ \u0026amp;\u0026amp; apt update \u0026amp;\u0026amp; apt-get -y install yarn \\ \u0026amp;\u0026amp; yarn \u0026amp;\u0026amp; yarn build:prod FROM nginx:alpine MAINTAINER yanyong RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\ \u0026amp;\u0026amp; echo 'Asia/Shanghai' \u0026gt; /etc/timezone COPY --from=nodebuilder /Node/dist/ /usr/share/nginx/html/ nmp install安装依赖时报错：\nERR! /usr/bin/git ls-remote -h -t git://github.com/adobe-webplatform/eve.git 解决办法：\n1 git config --global url.\u0026#34;https://\u0026#34;.insteadOf git:// deployment.yaml\napiVersion: apps/v1 kind: Deployment metadata: name: megaordermiddleware-management-ui-vue spec: selector: matchLabels: app: megaordermiddleware-management-ui-vue replicas: 2 template: metadata: labels: app: megaordermiddleware-management-ui-vue spec: containers: - name: megaordermiddleware-management-ui-vue image: harbor.example.com/oms/megaordermiddleware-management-ui-vue:1.0-$BUILD_NUMBER imagePullPolicy: IfNotPresent ports: - containerPort: 80 imagePullSecrets: - name: secret-harbor-user --- apiVersion: v1 kind: Service metadata: name: megaordermiddleware-management-ui-vue spec: type: NodePort selector: app: megaordermiddleware-management-ui-vue ports: - port: 80 targetPort: 80 jenkins, Build脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #!/bin/sh set -ex _image=\u0026#34;harbor.example.com/oms/megaordermiddleware-management-ui-vue:1.0-$BUILD_NUMBER\u0026#34; _image_latest=\u0026#34;${_image%-*}\u0026#34;-latest _dockerfile=Dockerfile-test _workspace=\u0026#34;\u0026#34; #默认当前目录 _harboruser=\u0026#34;$harboruser\u0026#34; _harborpass=\u0026#34;$harborpass\u0026#34; checkimage(){ local image_id=$(docker images -q --filter reference=\u0026#34;${_image}\u0026#34;) if [[ -n \u0026#34;$image_id\u0026#34; ]]; then docker rmi -f $image_id; fi #删除镜像 } build(){ checkimage docker build -f ${_dockerfile} -t ${_image} ${_workspace:-.} docker tag ${_image} ${_image_latest} #build产生的中间镜像tag为none docker rmi $(docker images -f \u0026#34;dangling=true\u0026#34; -q) || : #删除所有tag为none的镜像 } push(){ local repo=${_image%%/*} docker login -u ${_harboruser} -p ${_harborpass} ${repo} docker push ${_image} docker push ${_image_latest} docker logout checkimage } main(){ build push } main jenkins, Post-build Actions脚本\n1 2 export BUILD_NUMBER=$BUILD_NUMBER envsubst \u0026lt; DEPLOY/$JOB_BASE_NAME/deployment.yaml | kubectl apply -f - https://docs.docker.com/engine/reference/builder/\n","permalink":"https://yanyong.cc/post/jenkins03/","tags":["jenkins","ci/cd"],"title":"jenkins自动发布之java项目"},{"categories":["Uncategorized"],"contents":"go语言项目 后端API接口 beego框架\nDockerfile\nFROM golang:1.16-alpine as builder WORKDIR /work ENV GO111MODULE=on \\ GOPROXY=https://goproxy.cn,direct COPY . . RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o app . \\ \u0026amp;\u0026amp; mkdir run \u0026amp;\u0026amp; cp -r conf app run \u0026amp;\u0026amp; cp conf/app-test.conf run/conf/app.conf #FROM scratch FROM alpine RUN apk add --no-cache ca-certificates tzdata \\ \u0026amp;\u0026amp; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\ \u0026amp;\u0026amp; echo 'Asia/Shanghai' \u0026gt; /etc/timezone WORKDIR /work COPY --from=builder /work/run . EXPOSE 1500 ENTRYPOINT [\u0026quot;./app\u0026quot;] 创建pvc\n1 2 3 4 5 6 7 8 9 10 11 12 13 cat \u0026lt;\u0026lt; EOF | kubectl apply -f - kind: PersistentVolumeClaim apiVersion: v1 metadata: name: enjoydream-pvc-static spec: storageClassName: nfs-client accessModes: - ReadWriteMany resources: requests: storage: 10Gi EOF 创建secret\n1 kubectl create secret docker-registry secret-harbor-user --docker-server=harbor.example.com --docker-username=user --docker-password=123456 deployment.yaml\napiVersion: apps/v1 kind: Deployment metadata: name: enjoy-dream-api spec: selector: matchLabels: app: enjoy-dream-api replicas: 2 template: metadata: labels: app: enjoy-dream-api spec: terminationGracePeriodSeconds: 30 containers: - name: enjoy-dream-api image: harbor.example.com/enjoydream/enjoy-dream-api:3.0-$BUILD_NUMBER imagePullPolicy: IfNotPresent volumeMounts: - name: pvc-static subPath: static mountPath: \u0026quot;/work/static\u0026quot; ports: - containerPort: 1500 imagePullSecrets: - name: secret-harbor-user volumes: - name: pvc-static persistentVolumeClaim: claimName: enjoydream-pvc-static --- apiVersion: v1 kind: Service metadata: name: enjoy-dream-api spec: type: NodePort selector: app: enjoy-dream-api ports: - port: 1500 targetPort: 1500 前端vue Dockerfile\nFROM node:14.17.3 as nodebuilder WORKDIR /Node COPY . . RUN apt update \u0026amp;\u0026amp; apt-get -y install yarn \u0026amp;\u0026amp; cp .env.test .env \u0026amp;\u0026amp; yarn \u0026amp;\u0026amp; yarn build FROM nginx:alpine MAINTAINER yanyong RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\ \u0026amp;\u0026amp; echo 'Asia/Shanghai' \u0026gt; /etc/timezone COPY --from=nodebuilder /Node/dist/ /usr/share/nginx/html/ deployment.yaml\napiVersion: apps/v1 kind: Deployment metadata: name: enjoy-dream-admin spec: selector: matchLabels: app: enjoy-dream-admin replicas: 2 template: metadata: labels: app: enjoy-dream-admin spec: terminationGracePeriodSeconds: 30 containers: - name: enjoy-dream-admin image: harbor.example.com/enjoydream/enjoy-dream-admin:3.0-$BUILD_NUMBER imagePullPolicy: IfNotPresent ports: - containerPort: 80 imagePullSecrets: - name: secret-harbor-user --- apiVersion: v1 kind: Service metadata: name: enjoy-dream-admin spec: type: NodePort selector: app: enjoy-dream-admin ports: - port: 80 targetPort: 80 jenkins发布 后端，前端都参考以下脚本\njenkins, Build脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #!/bin/sh set -ex _image=\u0026#34;harbor.example.com/enjoydream/enjoy-dream-api:3.0-$BUILD_NUMBER\u0026#34; _image_latest=\u0026#39;harbor.example.com/enjoydream/enjoy-dream-api:3.0-latest\u0026#39; _dockerfile=Dockerfile-test _workspace=\u0026#34;\u0026#34; #默认当前目录 _harboruser=\u0026#34;$harboruser\u0026#34; _harborpass=\u0026#34;$harborpass\u0026#34; checkimage(){ local image_id=$(docker images -q --filter reference=\u0026#34;${_image}\u0026#34;) if [[ -n \u0026#34;$image_id\u0026#34; ]]; then docker rmi -f $image_id; fi #删除镜像 } build(){ checkimage docker build -f ${_dockerfile} -t ${_image} ${_workspace:-.} docker tag ${_image} ${_image_latest} #build产生的中间镜像tag为none docker rmi $(docker images -f \u0026#34;dangling=true\u0026#34; -q) || : #删除所有tag为none的镜像 } push(){ local repo=${_image%%/*} docker login -u ${_harboruser} -p ${_harborpass} ${repo} docker push ${_image} docker push ${_image_latest} docker logout checkimage } main(){ build push } main jenkins, Post-build Actions脚本\n1 2 export BUILD_NUMBER=$BUILD_NUMBER envsubst \u0026lt; DEPLOY/$JOB_BASE_NAME/deployment.yaml | kubectl apply -f - ","permalink":"https://yanyong.cc/post/jenkins02/","tags":["jenkins","ci/cd"],"title":"jenkins自动发布之go/golang项目"},{"categories":["Uncategorized"],"contents":"运行jenkins 1 2 3 4 5 6 7 8 9 10 11 12 13 sudo docker run \\ --name jenkins-blueocean \\ --env TZ=\u0026#39;Asia/Shanghai\u0026#39; \\ -u root \\ -d \\ -p 8080:8080 \\ -p 50000:50000 \\ --restart always \\ -v /data/jenkins_home:/var/jenkins_home \\ -v /var/run/docker.sock:/var/run/docker.sock \\ jenkinsci/blueocean sudo docker exec jenkins-blueocean cat /var/jenkins_home/secrets/initialAdminPassword 安装插件\nPublish Over SSH https://plugins.jenkins.io/publish-over-ssh/\n","permalink":"https://yanyong.cc/post/jenkins/","tags":["jenkins","ci/cd"],"title":"Docker安装jenkins"},{"categories":["Uncategorized"],"contents":"安装ECK 1 2 kubectl create -f https://download.elastic.co/downloads/eck/2.1.0/crds.yaml kubectl apply -f https://download.elastic.co/downloads/eck/2.1.0/operator.yaml 安装Elasticsearch 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 tee elasticsearch-7.16.3.yaml \u0026lt;\u0026lt; EOF apiVersion: elasticsearch.k8s.elastic.co/v1 kind: Elasticsearch metadata: name: es7163 spec: version: 7.16.3 http: tls: selfSignedCertificate: disabled: true service: spec: type: NodePort ports: - name: http port: 9200 targetPort: 9200 nodeSets: - name: default count: 1 config: node.store.allow_mmap: false volumeClaimTemplates: - metadata: name: elasticsearch-data spec: accessModes: - ReadWriteOnce resources: requests: storage: 2000Gi storageClassName: nfs-client EOF kubectl apply -f elasticsearch-7.16.3.yaml 1 2 3 4 5 6 7 8 9 kubectl get elasticsearch USER=elastic PASSWORD=$(kubectl get secret es7163-es-elastic-user -o go-template=\u0026#39;{{.data.elastic | base64decode}}\u0026#39;) #或者 PASSWORD=$(kubectl get secret es7163-es-elastic-user -o=jsonpath=\u0026#39;{.data.elastic}\u0026#39; | base64 --decode) PORT=$(kubectl get service/es7163-es-http -o jsonpath=\u0026#34;{.spec.ports[0].nodePort}\u0026#34;) 安装Kibana 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 tee kibana-7.16.3.yaml \u0026lt;\u0026lt; EOF apiVersion: kibana.k8s.elastic.co/v1 kind: Kibana metadata: name: quickstart spec: version: 7.16.3 http: service: spec: type: NodePort ports: - port: 5601 targetPort: 5601 count: 1 elasticsearchRef: name: es7163 EOF kubectl apply -f kibana-7.16.3.yaml 1 2 3 4 5 6 7 8 kubectl get kibana USER=elastic #就是elasticsearch的密码 PASSWORD=$(kubectl get secret es7163-es-elastic-user -o=jsonpath=\u0026#39;{.data.elastic}\u0026#39; | base64 --decode; echo) PORT=$(kubectl get svc quickstart-kb-http -o jsonpath=\u0026#34;{.spec.ports[0].nodePort}\u0026#34;) 安装Filebeat 试试helm安装filebeat，真香！\n1 2 3 4 helm repo add elastic https://helm.elastic.co wget https://raw.githubusercontent.com/elastic/helm-charts/7.16/filebeat/values.yaml wget -O example.values.yaml https://github.com/elastic/helm-charts/blob/main/filebeat/examples/security/values.yaml 修改values.yaml中daemonset的内容\noutput.elasticsearch: host: '${NODE_NAME}' hosts: '${ELASTICSEARCH_HOSTS:elasticsearch-master:9200}' 为：\noutput.elasticsearch: host: '${NODE_NAME}' hosts: '${ELASTICSEARCH_HOSTS:elasticsearch-master:9200}' username: '${ELASTICSEARCH_USERNAME}' password: '${ELASTICSEARCH_PASSWORD}' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #安装 helm install filebeat elastic/filebeat -f values.yaml \\ --set imageTag=7.16.3 \\ --set daemonset.extraEnvs[0].name=ELASTICSEARCH_HOSTS \\ --set daemonset.extraEnvs[0].value=es7163-es-http \\ --set daemonset.extraEnvs[1].name=ELASTICSEARCH_USERNAME \\ --set daemonset.extraEnvs[1].value=elastic \\ --set daemonset.extraEnvs[2].name=ELASTICSEARCH_PASSWORD \\ --set daemonset.extraEnvs[2].value=07eR118z5eQcAWdt9ylui834 #更新 helm upgrade filebeat elastic/filebeat -f values.yaml \\ --set imageTag=7.16.3 \\ --set daemonset.extraEnvs[0].name=ELASTICSEARCH_HOSTS \\ --set daemonset.extraEnvs[0].value=es7163-es-http \\ --set daemonset.extraEnvs[1].name=ELASTICSEARCH_USERNAME \\ --set daemonset.extraEnvs[1].value=elastic \\ --set daemonset.extraEnvs[2].name=ELASTICSEARCH_PASSWORD \\ --set daemonset.extraEnvs[2].value=WsI17nX98Aq1zjDs72S3e5P2 #安装完成有条命令用法提示，检查状态，-w动态监视 kubectl get pods --namespace=default -l app=filebeat-filebeat -w #卸载 helm uninstall filebeat 故障排查 查看错误\nyanyong@newmaster:~/k8s/elastic$ kubectl describe kibana | grep -A 10 Events: Events: Type Reason Age From Message ---- ------ ---- ---- ------- Warning AssociationError 5m12s (x4 over 5m12s) kibana-controller Association backend for elasticsearch is not configured Normal AssociationStatusChange 5m12s kb-es-association-controller Association status changed from [] to [Pending] 或者，查看错误\nyanyong@newmaster:~/k8s/elastic$ kubectl get events | tail 32m Warning AssociationError kibana/quickstart Association backend for elasticsearch is not configured 32m Normal AssociationStatusChange kibana/quickstart Association status changed from [] to [Pending] 查看日志\nyanyong@newmaster:~/k8s/elastic$ kubectl logs elastic-operator-0 -n elastic-system | tail -1 {\u0026quot;log.level\u0026quot;:\u0026quot;error\u0026quot;,\u0026quot;@timestamp\u0026quot;:\u0026quot;2022-04-21T06:53:30.967Z\u0026quot;,\u0026quot;log.logger\u0026quot;:\u0026quot;manager.eck-operator.controller.kb-es-association-controller\u0026quot;,\u0026quot;message\u0026quot;:\u0026quot;Reconciler error\u0026quot;,\u0026quot;service.version\u0026quot;:\u0026quot;2.1.0+02a8d7c7\u0026quot;,\u0026quot;service.type\u0026quot;:\u0026quot;eck\u0026quot;,\u0026quot;ecs.version\u0026quot;:\u0026quot;1.4.0\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;quickstart\u0026quot;,\u0026quot;namespace\u0026quot;:\u0026quot;default\u0026quot;,\u0026quot;error\u0026quot;:\u0026quot;no port named [http] in service [default/es7163-es-http]\u0026quot;,\u0026quot;errorCauses\u0026quot;:[{\u0026quot;error\u0026quot;:\u0026quot;no port named [http] in service [default/es7163-es-http]\u0026quot;}],\u0026quot;error.stack_trace\u0026quot;:\u0026quot;sigs.k8s.io/controller-runtime/pkg/internal/controller.(*Controller).processNextWorkItem\\n\\t/go/pkg/mod/sigs.k8s.io/controller-runtime@v0.11.1/pkg/internal/controller/controller.go:266\\nsigs.k8s.io/controller-runtime/pkg/internal/controller.(*Controller).Start.func2.2\\n\\t/go/pkg/mod/sigs.k8s.io/controller-runtime@v0.11.1/pkg/internal/controller/controller.go:227\u0026quot;} 解决办法\n部署elasticsearch时添加name: http\nspec: version: 7.16.3 http: tls: selfSignedCertificate: disabled: true service: spec: type: NodePort ports: - name: http port: 9200 targetPort: 9200 https://www.elastic.co/downloads/elastic-cloud-kubernetes\nhttps://www.elastic.co/guide/en/cloud-on-k8s/2.1/k8s-deploy-elasticsearch.html\nhttps://github.com/elastic/cloud-on-k8s/blob/2.1/config/samples/elasticsearch/elasticsearch.yaml\nhttps://www.elastic.co/guide/en/cloud-on-k8s/2.1/k8s-deploy-kibana.html\nhttps://github.com/elastic/cloud-on-k8s/blob/2.1/config/samples/kibana/kibana_es.yaml\nhttps://www.elastic.co/cn/beats/filebeat\nhttps://www.elastic.co/downloads/beats/filebeat\nhttps://github.com/elastic/helm-charts/tree/main/filebeat\nhttps://github.com/elastic/helm-charts/blob/7.16/filebeat/values.yaml\nhttps://github.com/elastic/helm-charts/blob/main/filebeat/examples/security/values.yaml\n","permalink":"https://yanyong.cc/post/elastic/","tags":["k8s","kubernetes","es","elasticsearch","filebeat","kibana"],"title":"k8s部署elasticsearch"},{"categories":["Linux","Debian"],"contents":"不推荐使用 不推荐使用！\n仅供参考！\n2025.3.29\n参考 debian 10初始化脚本\n此脚本比debian10初始化脚本略有变化，引用了一个环境变量$VERSION_CODENAME\n示例 1 curl -fsSL https://raw.yanyong.cc/sh/debian11-init.sh | bash -s fqdn=blog.yanyong.cc user=yanyong port=23422 source=ali tz=Asia/Shanghai 脚本内容 [脚本]\n","permalink":"https://yanyong.cc/post/debian11-init/","tags":["shell"],"title":"Debian 11初始化脚本"},{"categories":["Uncategorized"],"contents":"go指南练习题 练习：切片 https://tour.go-zh.org/moretypes/18\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( \u0026#34;math\u0026#34; \u0026#34;golang.org/x/tour/pic\u0026#34; ) func Pic(dx, dy int) [][]uint8 { pic := make([][]uint8, dy) for y := 0; y \u0026lt; dy; y++ { pic[y] = make([]uint8, dx) for x := 0; x \u0026lt; dx; x++ { pic[y][x] = uint8(x * int(math.Log(float64(y)))) } } return pic } func main() { pic.Show(Pic) } 终端运行结果：\nyan@yanyongs-iMac tour % go run z.go IMAGE:iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAACJklEQVR42uzX0Q3CMBBEwT3H6b/kowckftgZbQVID19usoFWx0+AAKDUTTJjVjovAE4gEAAIACo/gs8xq5z/AJxAIAAQAAgABAACAAGAAEAAIAAQAPyFSfZ5YtY5LwBOIBAACAAEAAIAAYAAQAAgABAACAAEAAIAAYAAQAAgABAACAAEAAIAAYAAQAAgABAACAAEAAIAAYAAQADwU5PsvTHrnBcAJxAIAAQAAgABgABAACAAEAAIAAQAAgABgABAACAAEAAIAAQAAgABgABAACAAEAAIAAQAAgABgABAACAAEAAIAAQAAgABgABAACAAEAAIAAQAAgABgABAACAAEAAIAASAAEAAIAAQAAgABAACAAGAAEAAIAAQAAgABAACAAGAAEAAIAAQAAgABAACAAGAAEAAIAAQAAgABAACAAGAAEAAIAAQAAgABAACAAGAAOALk+z7xqxzXgCcQCAAEAAIAAQAAgABgABAACAAEAAIAAQAAgABgABAACAAEAAIAAQAAgABgABAACAAEAAIAAQAAgABgABAACAAEAAIAAQAAgABgABAACAAEAAIAAQAAgABgABAACAAEAACAAGAAEAAIAAQAAgABAACAAGAAEAAIAAQAAgABAACAAGAAEAAIAAQAAgABAACAAGAAEAAIAAQAAgABAACAAGAAEAAIAAQAAgABAACAAGAAEAAIAAQAAgABAACAAGAAEAACAAEAI0+AQAA//8Y9yPg0iquogAAAABJRU5ErkJggg== 显示成图片：\n练习：映射 https://tour.go-zh.org/moretypes/23\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( //\u0026#34;fmt\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;golang.org/x/tour/wc\u0026#34; ) func WordCount(s string) map[string]int { m := make(map[string]int) //fmt.Println(m) a := strings.Fields(s) //fmt.Println(a) //fmt.Printf(\u0026#34;%q\\n\u0026#34;, a) for _, i := range a { m[i]++ } return m } func main() { wc.Test(WordCount) } 练习：斐波纳契闭包 https://tour.go-zh.org/moretypes/26\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package main import \u0026#34;fmt\u0026#34; func fibonacci() func() int { a, b := 0, 1 return func() int { c := a a, b = b, a+b return c } } func main() { f := fibonacci() for i := 0; i \u0026lt; 10; i++ { fmt.Println(f()) } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 //递归版，时间复杂度为 O(2^n)： package main import \u0026#34;fmt\u0026#34; func fibonacci(n int) int { if n \u0026lt; 2 { return n } return fibonacci(n-2) + fibonacci(n-1) } func main() { for i := 0; i \u0026lt; 10; i++ { fmt.Println(fibonacci(i)) } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 //通用版，时间复杂度为 O(n)： package main import \u0026#34;fmt\u0026#34; func fibonacci(n int) int { a, b := n%2, 1 for i := 0; i \u0026lt; n/2; i++ { a += b b += a } return a } func main() { for i := 0; i \u0026lt; 10; i++ { fmt.Println(fibonacci(i)) } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 //https://tour.go-zh.org/concurrency/5 package main import \u0026#34;fmt\u0026#34; func fibonacci(c, quit chan int) { x, y := 0, 1 for { select { case c \u0026lt;- x: x, y = y, x+y case \u0026lt;-quit: //fmt.Println(\u0026#34;quit\u0026#34;) return } } } func main() { c := make(chan int) quit := make(chan int) go func() { for i := 0; i \u0026lt; 10; i++ { fmt.Println(\u0026lt;-c) } quit \u0026lt;- 0 }() fibonacci(c, quit) } 练习：Stringer https://tour.go-zh.org/methods/18\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package main import \u0026#34;fmt\u0026#34; type IPAddr [4]byte func (ip IPAddr) String() string { return fmt.Sprintf(\u0026#34;%v.%v.%v.%v\u0026#34;, ip[0], ip[1], ip[2], ip[3]) } func main() { hosts := map[string]IPAddr{ \u0026#34;loopback\u0026#34;: {127, 0, 0, 1}, \u0026#34;googleDNS\u0026#34;: {8, 8, 8, 8}, } for name, ip := range hosts { fmt.Printf(\u0026#34;%v: %v\\n\u0026#34;, name, ip.String()) } } 练习：错误 https://tour.go-zh.org/methods/20\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;math\u0026#34; ) type ErrNegativeSqrt float64 func (e ErrNegativeSqrt) Error() string { return fmt.Sprintf(\u0026#34;cannot Sqrt negative number: %v\u0026#34;, float64(e)) } func Sqrt(x float64) (float64, error) { if x \u0026lt; 0 { return x, ErrNegativeSqrt(x) //效果同上 /* var err error var a ErrNegativeSqrt = ErrNegativeSqrt(x) err = a return x, err */ } return math.Sqrt(x), nil } func main() { fmt.Println(Sqrt(2)) fmt.Println(Sqrt(-2)) } 练习：Reader https://tour.go-zh.org/methods/22\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package main import \u0026#34;fmt\u0026#34; //import \u0026#34;golang.org/x/tour/reader\u0026#34; type MyReader struct{} func (m MyReader) Read(b []byte) (int, error) { for i := range b { b[i] = \u0026#39;A\u0026#39; } return len(b), nil } func main() { //reader.Validate(MyReader{}) var m MyReader b := make([]byte, 5) m.Read(b) fmt.Println(b) } 练习：rot13Reader https://tour.go-zh.org/methods/23\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package main import ( \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strings\u0026#34; ) type rot13Reader struct { r io.Reader } func (rot *rot13Reader) Read(b []byte) (i int, err error) { i, err = rot.r.Read(b) for i := 0; i \u0026lt; len(b); i++ { if (b[i] \u0026gt;= \u0026#39;a\u0026#39; \u0026amp;\u0026amp; b[i] \u0026lt;= \u0026#39;m\u0026#39;) || (b[i] \u0026gt;= \u0026#39;A\u0026#39; \u0026amp;\u0026amp; b[i] \u0026lt;= \u0026#39;M\u0026#39;) { b[i] += 13 } else if (b[i] \u0026gt;= \u0026#39;n\u0026#39; \u0026amp;\u0026amp; b[i] \u0026lt;= \u0026#39;z\u0026#39;) || (b[i] \u0026gt;= \u0026#39;N\u0026#39; \u0026amp;\u0026amp; b[i] \u0026lt;= \u0026#39;Z\u0026#39;) { b[i] -= 13 } } return } func main() { s := strings.NewReader(\u0026#34;Lbh penpxrq gur pbqr!\u0026#34;) r := rot13Reader{s} io.Copy(os.Stdout, \u0026amp;r) } 练习：图像 https://tour.go-zh.org/methods/25\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package main import ( \u0026#34;image\u0026#34; \u0026#34;image/color\u0026#34; \u0026#34;golang.org/x/tour/pic\u0026#34; ) type Image struct { Width, Height int } func (img Image) ColorModel() color.Model { return color.RGBAModel } func (img Image) Bounds() image.Rectangle { return image.Rect(0, 0, img.Width, img.Height) } func (img Image) At(x, y int) color.Color { return color.RGBA{uint8(x * y), 0, 255, 255} } func main() { m := Image{100, 100} pic.ShowImage(m) } 终端运行结果：\nyan@yanyongs-iMac tour % go run z.go IMAGE:iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAIAAAD/gAIDAAAJjklEQVR42uybi3caxxXGJ62bpmmapmma2E5sq3pLWAJhECBeWx7LUwghhBBCgMj//ze4h7sd+l3NzO7KArcnZ3y+s+e738wK5XfuXBZivxDio7B/wv15IYT4wiqc/gPrd1Yh9F9Yv7cK0hdCfHxBzKwCtYD1ByGswmgB60shrMJoAeuPQliF0QLWV0JYhdEC1p+EsAqjBayvhbAKowWsPwthFUYLWN8IYRVGC1h/EcIqjBawvhXCKowWsP4qhFUYLWB9J4RVGC1g/U0IqzBawPpeCKswWsD6uxBWYbSA9YMQVmG0gPUPIazCaAHrRyGswoh9B/+Cvg/8kr67+Yo+Z39Nn4m+oefXb+lZ4zt6X/iezvAPxPtHIX4S4iVdfbQVtOEnIaIh9mSDNrghfkgvxJ6JkoSC9TII1ssgbQZtOArakA7aUA7a0Anxe458V1fQWa9kZ73SacOQLxUJ2nDqu+oE3d4K2jDwXZ2BD4b12hfWaziGr6hEvVMS1IHv6mshEr6rBd/Vuu9qL+il73XhszrrZz6zPFg/S70Fr2rfdzXuu5ozL1V9b7zwXb31Xf11tQN+CesXId7QVatd89IvQsTMSxnfG8vmpbbvjQPz0pSXAbDemGG9McN6Y9aOeenYvJQyLzm+L9c0L12Zl8aGfPWd9VZ21ltF27rQ05EhT5pvKZiXaualrnnp1rw0p+snwnpngPUOjuFbKpfa4uVSEUP+jga8Ns+Zb6ka8nPzLQNDPlESP1gbBlgbhs7a4DPLg7VB2pTmkQ4NedyQnxnyDZpZ2rxlyK8M+Z35JdY44Jew/qnTviGPGfK0IXcMed2Qdw350JDPwK8M1qYB1ia9zCbXnpJ4ihrylCEv6kLXsLljyAeGfKIkT4a1pYO1ZeisLdlZm+Q97YJHHevCpGFzXhdWDJvbuvDKsPlOF87pusZjuA3H0IO1TY8O24re68JtGvBqmNWFJcNPaOrCS104NPyEGXgjrB0drB0drB0drB0+szxYOzpFdGFcF2Z0oWP4sXVdeKELB7rwXheupbN2lQG/SaHXWbugQ156OtGFaV1Y1IWuLjzXhX0lGem2PUjzXFh74d4N9+AY7lK5Rx+k9xTFlORUty2vCyu6sKUkl7ptQ1045eUTYO2H66x9BdY+n1kerH1Fx7owqQtzSlLSbWsoyYVu20BJxrptz/0gfaDAOjB01iNYB/TyB6AjXnpKKMmZkji6G2tKcq7b1leSkZLMwK/9ofRQgXUoO+uA/CG9Gx5yxZXkkAb8o6SoJFUlael+VE9JhkoyURI9rIgCK6LAiiiwIgqsiNJZETiGHqyIohMlSSlJXndjRUmaStJVkoGSjJVkTtfP9HHHg/Wez6wDSiJ0XSrGy/c04B8lOSUpKUldSTpK0leSkZLMwK8M1pEC68g8szxYR7Kz3pM/oo87R1xJJcny0lE2uErSVpKekgyVZMLLTx/wx0Gddax01jGHdQzH0IN1rCjBy4yyoagkVV42lQ1dJRkoyZiXD9KEghUN6qxo0DGM6joLYUXpt4mCPvAyzcsoffmHZVnZ0OBlR9nQV5IRL6e8/JTOigXNrBiHFVOOYYzDisnOipKP0bthDJTiZY6XMZpZWNaUDee87Ckbhry8Vzas5n9YnIQe8B6sE95ZJ3AMPVgnXKe8zPLSUfa7vGzxsqvsH/Dyjpcz8Kt/N4xzWHEOK86PYZzPrCglJ3T1lAQfp4dSLIu8rPAyTjMLywte9nl5q9w+5eVnfXTwmVkerA+ys+LkE3RdKsPLAi/LvKzz8pyXPV5+oGOI5T0v53TVwEpwWAkOK8FhJTisBIeV4LASHFaCw0rAMYxTiUrzMs/LEi9rvGzz8pKXA17e8XIGfo2dleSdleSdleSdleQzKyk7K0lKSeMpB97hS1VeNnl5wcs+L295OeHlcwf8KYd1GvoYnvJjeMoH/CkcwySVS53xssjLCi8bvOzw8gr8DV8a8/JBmqfBSoXurBSHlTLPrBQf8Ck+s1L0W6ZIGWk8FXhZ5mUdfJsvXfJywMs78FO+tLJjmDYP+DTvrLR5wKf5gE/LzkqRR+V5WQLv8qUWL7vg+3zplpcT8HO6BsDKmGFlzJ2VMR/DDO+sDMDK8AGfgWOYod81I5UD74DP0MzCsgm+w5euwN/wpTH4Gfi1PzqcmR8dzpTOWsI6g5l1JjsrQz5LV09F8Gc0s5a+zpfOwV/ypQH4EV+agl/ZXznKhnvOypqfs7IAK6sM+CWsLKjAyzL4Gl9qg++C7/Ntt+Dv+dKcrk+AlQvXWTmAlTM/lOYAVg46K8cHfA5g5WRn5Whm5UAl8C74Jt92Af4K/A3fNgY/A/+JnZUHWPlwT/B5gJWHzsrrjqEHKw+dlYdjmAc5vKyCb4A/59t64AfgR+An/JbV/82/AsAqPP3jTgFgFeAYFmBmFWRnFWhmFUAV8HXwbfBd8H1++y34e/AP0nymz4ZFgFUEWEWAVYTOKsLMKsLMKsIxLHKVwdfAt8BfgL8CfwP+DvyUv8RjWA7AcgCWA7AcgOUALAdgOQDLgc5yoLMc6CwHjqEDM8uBmeXAzHJkZzmkkjQOzaylb4LvgO+BH4AfgZ+An9P1/+tbh6jyrcOjd0Mc8EtY/5KqgK+Db4Pvgu+DH4Ifg5+B/6ywSgCrBLBKAKsEsEoAqwSwSgCrRP8ZJTqGJaka+Bb4C/BX4G/A34Gfgl/lgC8DrDLAKj+ls8rQWWXorDJ0Vhk6qyw7qwxywTfBd8D3wA/Aj8BPpHmQ5lmwKk/prArAqgCsiu4YVuAYVuAYVuAYVuQxrMjOqtCjQ0WqAf4c/CX4a2mGEI7Bz8A/GVY16BhWAVY1aGZVobOquplVhZlVhZlV5TPLg1UF1cG3wXeluYLwBvwd+Kk0c7qGguUGHUM3qLNcgOXqjqELneXqBrwLM8uFmeVKWK7sLJdmlivVkqYDYQ/8APxImnsIH6RZ44CvBb0b1nTvhjXorJru3bAGM6smO6sGx7AGakpzDuEl+GtphhCOwc+k+ZUo/RYeHXBmeZ1Vp5nVpM5qE6wOvRt2CVaPjmGfYA3oGA7pCX5Ex3BMnTWhYzijzpqv+x86+cNq6GA1dLAaOlgNHawGwGpItcBfSNODcCDNLYT30swgtJ31hM6ysCwsC8vCsrAsLAvLwrKwLCwLy342/B/BupawriWsawnrWsK6lrCuAdY16VaasTRTaeZ0tZ1lj6GFZWFZWBaWhWVhWVgWloVlYVlYFpaFZWGtB9a/AwAA//+UpGahQPb9EAAAAABJRU5ErkJggg== 显示成图片：\n练习：等价二叉查找树 https://tour.go-zh.org/concurrency/7\nhttps://tour.go-zh.org/concurrency/8\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;golang.org/x/tour/tree\u0026#34; ) // Walk 步进 tree t 将所有的值从 tree 发送到 channel ch。 func Walk(t *tree.Tree, ch chan int) { defer close(ch) // \u0026lt;- closes the channel when this function returns var walk func(t *tree.Tree) walk = func(t *tree.Tree) { if t == nil { return } walk(t.Left) ch \u0026lt;- t.Value walk(t.Right) } walk(t) } // Same 检测树 t1 和 t2 是否含有相同的值。 func Same(t1, t2 *tree.Tree) bool { ch1 := make(chan int) ch2 := make(chan int) go Walk(t1, ch1) go Walk(t2, ch2) for i := 0; i \u0026lt; 10; i++ { if \u0026lt;-ch1 != \u0026lt;-ch2 { return false } } return true } func main() { fmt.Println(Same(tree.New(1), tree.New(1))) fmt.Println(Same(tree.New(1), tree.New(2))) } 参考：https://stackoverflow.com/questions/12224042/go-tour-exercise-7-binary-trees-equivalence\n练习：Web 爬虫 Exercise: Web Crawler\nhttps://tour.go-zh.org/concurrency/10\nhttps://go.dev/tour/concurrency/10\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) type Fetcher interface { // Fetch returns the body of URL and // a slice of URLs found on that page. Fetch(url string) (body string, urls []string, err error) } type History struct { history map[string]bool mux sync.Mutex } func (h *History) isFetched(url string) bool { h.mux.Lock() defer h.mux.Unlock() _, ok := h.history[url] if ok { return ok } else { h.history[url] = true } return false } var history = History{history: make(map[string]bool)} // Crawl uses fetcher to recursively crawl // pages starting with url, to a maximum of depth. func Crawl(url string, depth int, fetcher Fetcher, wg *sync.WaitGroup) { // TODO: Fetch URLs in parallel. // TODO: Don\u0026#39;t fetch the same URL twice. // This implementation doesn\u0026#39;t do either: defer wg.Done() if depth \u0026lt;= 0 || history.isFetched(url) { return } body, urls, err := fetcher.Fetch(url) if err != nil { fmt.Println(err) return } fmt.Printf(\u0026#34;found: %s %q\\n\u0026#34;, url, body) for _, u := range urls { wg.Add(1) go Crawl(u, depth-1, fetcher, wg) } return } func syncCrawl(url string, depth int, fetcher Fetcher) { var wg sync.WaitGroup wg.Add(1) go Crawl(\u0026#34;https://golang.org/\u0026#34;, 4, fetcher, \u0026amp;wg) wg.Wait() } func main() { syncCrawl(\u0026#34;https://golang.org/\u0026#34;, 4, fetcher) //time.Sleep(5*time.Second) fmt.Println(\u0026#34;done\u0026#34;) } // fakeFetcher is Fetcher that returns canned results. type fakeFetcher map[string]*fakeResult type fakeResult struct { body string urls []string } func (f fakeFetcher) Fetch(url string) (string, []string, error) { if res, ok := f[url]; ok { return res.body, res.urls, nil } return \u0026#34;\u0026#34;, nil, fmt.Errorf(\u0026#34;not found: %s\u0026#34;, url) } // fetcher is a populated fakeFetcher. var fetcher = fakeFetcher{ \u0026#34;https://golang.org/\u0026#34;: \u0026amp;fakeResult{ \u0026#34;The Go Programming Language\u0026#34;, []string{ \u0026#34;https://golang.org/pkg/\u0026#34;, \u0026#34;https://golang.org/cmd/\u0026#34;, }, }, \u0026#34;https://golang.org/pkg/\u0026#34;: \u0026amp;fakeResult{ \u0026#34;Packages\u0026#34;, []string{ \u0026#34;https://golang.org/\u0026#34;, \u0026#34;https://golang.org/cmd/\u0026#34;, \u0026#34;https://golang.org/pkg/fmt/\u0026#34;, \u0026#34;https://golang.org/pkg/os/\u0026#34;, }, }, \u0026#34;https://golang.org/pkg/fmt/\u0026#34;: \u0026amp;fakeResult{ \u0026#34;Package fmt\u0026#34;, []string{ \u0026#34;https://golang.org/\u0026#34;, \u0026#34;https://golang.org/pkg/\u0026#34;, }, }, \u0026#34;https://golang.org/pkg/os/\u0026#34;: \u0026amp;fakeResult{ \u0026#34;Package os\u0026#34;, []string{ \u0026#34;https://golang.org/\u0026#34;, \u0026#34;https://golang.org/pkg/\u0026#34;, }, }, } 参考：\nhttps://tim.bai.uno/golang-exercise-web-crawler-a-tour-of-go/\nhttps://gist.github.com/harryhare/6a4979aa7f8b90db6cbc74400d0beb49\n官方文档链接 golang.org会跳转go.dev域名\nhttps://golang.org/doc/\nhttps://go.dev/doc/\nhttps://golang.google.cn/doc/\nhttps://go-zh.org/doc/\nhttps://go.dev/tour/welcome/1\nhttps://golang.google.cn/tour/welcome/1\nhttps://tour.go-zh.org/welcome/1\n","permalink":"https://yanyong.cc/post/golang/","tags":["go","golang"],"title":"go/golang学习之路(1)go指南练习题解答"},{"categories":["macOS"],"contents":"macOS工具： 包管理器(必备神器)：Homebrew\n浏览器：Chrome, Safari\n编辑器：Visual Studio Code, MacDown, ProperTree\n压缩：The Unarchiver\nAPI工具：Postman\n密码管理(付费)：1Password\n远控：向日葵, ToDesk, Microsoft Remote Desktop\nssh/ftp工具：Termius, FileZilla\n梯子：qv2ray\n数据库：DBeaver\n虚拟机：VirtualBox\nU盘刻录：balenaEtcher\n渗透(付费/社区版)：Burp Suite Community Edition\nssh工具(IOS)：Termius\n本地shell(IOS)：a-Shell, iSH, LibTerm\n付费(IOS)：Shadowrocket\nWindows工具： Xshell, Xftp（认准官方网站www.netsarang.com或www.xshell.com, 找到免费许可页面下载。）\nMobaXterm\nTermius\nPDFgear\n","permalink":"https://yanyong.cc/post/macos-tools/","tags":["macOS"],"title":"macOS常用工具推荐"},{"categories":["Linux"],"contents":"MariaDB 创建数据目录和配置文件\n1 sudo mkdir -p /data/mariadb/{data,conf.d} 1 2 3 4 5 6 7 8 9 10 11 cat \u0026lt;\u0026lt; EOF | sudo tee /data/mariadb/conf.d/my.cnf [mariadb] server_id=1 character-set-server=utf8mb4 # default collation-server=utf8mb4_general_ci # default lower_case_table_names=1 max_connections=10000 max_connect_errors=100000 innodb_buffer_pool_size=4294967296 # 4G. default 128M max_allowed_packet=1073741824 # 1G. default 16M EOF 如果镜像有安装tzdata，加上TZ变量即可修改时区。\n1 sudo docker network create --subnet=172.18.0.0/16 dbnet 1 2 3 4 5 6 7 8 9 sudo docker run -d --name mariadb01 \\ -e TZ=\u0026#39;Asia/Shanghai\u0026#39; \\ -e MYSQL_ROOT_PASSWORD=\u0026#39;123456\u0026#39; \\ -p 3306:3306 \\ -v /data/mariadb/data:/var/lib/mysql \\ -v /data/mariadb/conf.d:/etc/mysql/conf.d \\ --network dbnet \\ --restart always \\ mariadb:10.5 本地如需要mysql客户端工具，最小安装即可\n1 apt search mariadb-client 1 sudo apt-get -y install mariadb-client-core-10.3 # 只有mysql命令 或者\n1 sudo apt-get -y install mariadb-client # 包含mysqladmin，mysqldump等命令 进入容器\n1 sudo docker exec -it mariadb01 bash 不进入容器执行sql语句两种方法\n1 2 3 mysql -h 127.0.0.1 -P 3306 -u root -p\u0026#39;123456\u0026#39; -e \u0026#34;create user testuser identified by \u0026#39;123456\u0026#39;;\u0026#34; sudo docker exec mariadb01 /bin/bash -c \u0026#34;mysql -u root -p\u0026#39;123456\u0026#39; -e \u0026#39;create database testdb;\u0026#39;\u0026#34; Redis 可选项，数据持久化，--appendonly yes\n1 sudo docker run --name myredis -d -e TZ=\u0026#39;Asia/Shanghai\u0026#39; --network=host --restart=always -v /data/myredis:/data redis:alpine redis-server --appendonly yes --maxmemory 2GB --requirepass \u0026#39;123456\u0026#39; xxl-job xxl-job官网\n初始化数据库，官方sql脚本链接\n访问控制台默认帐号密码：admin/123456，此镜像已设置过TZ变量\n1 2 3 4 5 6 sudo docker run \\ -e PARAMS=\u0026#34;--spring.datasource.url=jdbc:mysql://127.0.0.1:3306/xxl_job?useUnicode=true\u0026amp;characterEncoding=UTF-8\u0026amp;autoReconnect=true\u0026amp;serverTimezone=Asia/Shanghai \\ --spring.datasource.username=root \\ --spring.datasource.password=123456 \\ --spring.datasource.driver-class-name=com.mysql.jdbc.Driver\u0026#34; \\ -p 8080:8080 -v /tmp:/data/applogs --name xxl-job-admin --restart always -d xuxueli/xxl-job-admin:2.3.0 Nacos 单机版nacos\n初始化数据库，官方sql脚本链接\n访问控制台默认帐号密码：nacos/nacos\n拷贝默认配置文件application.properties\n1 2 3 4 sudo docker run -d --name nacos-tmp -e MODE=standalone nacos/nacos-server sudo mkdir -p /data/mynacos/conf sudo docker exec nacos-tmp cat /home/nacos/conf/application.properties | sudo tee /data/mynacos/conf/application.properties sudo docker stop nacos-tmp \u0026amp;\u0026amp; sudo docker rm -v nacos-tmp application.properties配置文件参考，修改数据库连接相关部分即可\n# spring server.servlet.contextPath=${SERVER_SERVLET_CONTEXTPATH:/nacos} server.contextPath=/nacos server.port=${NACOS_APPLICATION_PORT:8848} spring.datasource.platform=mysql nacos.cmdb.dumpTaskInterval=3600 nacos.cmdb.eventTaskInterval=10 nacos.cmdb.labelTaskInterval=300 nacos.cmdb.loadDataAtStart=false db.num=1 db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8\u0026amp;connectTimeout=1000\u0026amp;socketTimeout=3000\u0026amp;autoReconnect=true\u0026amp;useUnicode=true\u0026amp;useSSL=false\u0026amp;serverTimezone=UTC db.url.1=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8\u0026amp;connectTimeout=1000\u0026amp;socketTimeout=3000\u0026amp;autoReconnect=true\u0026amp;useUnicode=true\u0026amp;useSSL=false\u0026amp;serverTimezone=UTC db.user=nacosadmin db.password=123456 ### The auth system to use, currently only 'nacos' is supported: nacos.core.auth.system.type=${NACOS_AUTH_SYSTEM_TYPE:nacos} ### The token expiration in seconds: nacos.core.auth.default.token.expire.seconds=${NACOS_AUTH_TOKEN_EXPIRE_SECONDS:18000} ### The default token: nacos.core.auth.default.token.secret.key=${NACOS_AUTH_TOKEN:SecretKey012345678901234567890123456789012345678901234567890123456789} ### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay. nacos.core.auth.caching.enabled=${NACOS_AUTH_CACHE_ENABLE:false} nacos.core.auth.enable.userAgentAuthWhite=${NACOS_AUTH_USER_AGENT_AUTH_WHITE_ENABLE:false} nacos.core.auth.server.identity.key=${NACOS_AUTH_IDENTITY_KEY:serverIdentity} nacos.core.auth.server.identity.value=${NACOS_AUTH_IDENTITY_VALUE:security} server.tomcat.accesslog.enabled=${TOMCAT_ACCESSLOG_ENABLED:false} server.tomcat.accesslog.pattern=%h %l %u %t \u0026quot;%r\u0026quot; %s %b %D # default current work dir server.tomcat.basedir= ## spring security config ### turn off security nacos.security.ignore.urls=${NACOS_SECURITY_IGNORE_URLS:/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**} # metrics for elastic search management.metrics.export.elastic.enabled=false management.metrics.export.influx.enabled=false nacos.naming.distro.taskDispatchThreadCount=10 nacos.naming.distro.taskDispatchPeriod=200 nacos.naming.distro.batchSyncKeyCount=1000 nacos.naming.distro.initDataRatio=0.9 nacos.naming.distro.syncRetryDelay=5000 nacos.naming.data.warmup=true 启动nacos单机版，此镜像已经是Asia/Shanghai时区\n不映射配置文件也可以，启动完成进入容器修改配置文件，重启即可\n开启鉴权：https://nacos.io/zh-cn/docs/auth.html\n方法1: 启动时传入变量NACOS_AUTH_ENABLE=true\n方法2: application.properties文件添加nacos.core.auth.enabled=true\n1 sudo docker run -d --name mynacos -e MODE=standalone -e NACOS_AUTH_ENABLE=true --network=host --restart=always -v /data/mynacos/conf/application.properties:/home/nacos/conf/application.properties nacos/nacos-server PostgreSQL 1 sudo docker run -d -e TZ=\u0026#39;Asia/Shanghai\u0026#39; --shm-size 1g --network host -v /data/postgres12:/var/lib/postgresql/data -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=postgres --restart always --name postgres12 postgres:12-alpine RabbitMQ 此镜像默认没有安装tzdata包\n默认用户名密码：guest/guest\n1 sudo docker run -d --name rabbitmq --restart always -p 15672:15672 -p 5672:5672 rabbitmq:3.8-management-alpine 也可以指定用户名和密码\n1 sudo docker run -d --name rabbitmq --restart always -p 15672:15672 -p 5672:5672 -e RABBITMQ_DEFAULT_USER=user -e RABBITMQ_DEFAULT_PASS=password rabbitmq:3.8-management-alpine PHP-FPM 此镜像默认没有安装tzdata包\n1 sudo docker run --name php74-fpm --restart always -p 9001:9000 -v /srv/www/www.example.com:/srv/www/www.example.com -d php:7.4-fpm-alpine 安装php模块\n1 2 sudo docker exec php74-fpm php -m sudo docker exec php74-fpm docker-php-ext-install pdo_mysql docker-php-ext-install无法安装的模块，试试用pecl安装，进入容器执行更方便\n1 2 3 pecl search XXX pecl install XXX docker-php-ext-enable XXX 禅道 镜像已经设置过TZ变量为Asia/Shanghai\n1 sudo docker run -d --name zentao -p 8080:80 -v /data/zentao/zentaopms:/www/zentaopms -v /data/zentao/mysql:/var/lib/mysql --restart=always easysoft/zentao:12.5.3 Redmine 1 sudo docker network create redmine-net 1 sudo docker run -d -e TZ=\u0026#39;Asia/Shanghai\u0026#39; --network redmine-net -v /data/redmine-postgres:/var/lib/postgresql/data -e POSTGRES_PASSWORD=secret -e POSTGRES_USER=redmine --restart always --name redmine-postgres postgres:alpine 默认帐号密码：admin/admin\n1 sudo docker run -d -e TZ=\u0026#39;Asia/Shanghai\u0026#39; --restart always --name redmine --network redmine-net -p 3000:3000 -v /data/redmine:/usr/src/redmine/files --link redmine-postgres:postgres redmine:alpine ","permalink":"https://yanyong.cc/post/docker-example-list/","tags":["docker","mariadb","redis","xxl-job","nacos","postgres","rabbitmq","php","php-fpm","禅道","zentao","redmine"],"title":"Docker安装各种软件参考示例"},{"categories":["Uncategorized"],"contents":"官方迁移文档\n确认gitlab版本 gitlab网页上help里查看，或命令查看，我这里版本是13.3.5\n1 sudo docker exec gitlab cat /opt/gitlab/embedded/service/gitlab-rails/VERSION 备份 1 2 3 4 5 6 7 sudo docker exec gitlab gitlab-ctl stop puma sudo docker exec gitlab gitlab-ctl stop sidekiq sudo docker exec gitlab gitlab-ctl status sudo docker exec gitlab gitlab-backup create 会在容器内下面位置生成备份文件，拷贝到新的gitlab服务器 1 /var/opt/gitlab/backups/1625145187_2021_07_01_13.3.5_gitlab_backup.tar 配置文件，拷贝到新的gitlab服务器 官方链接 1 2 /etc/gitlab/gitlab-secrets.json /etc/gitlab/gitlab.rb # 可选 还原 官方跨版本升级\n13.3.5 \u0026ndash;\u0026gt; 13.12.5 \u0026ndash;\u0026gt; 14.0.1\n1 2 3 4 5 6 sudo docker run --detach \\ --name gitlab-13.3.5 \\ --volume /srv/gitlab/config:/etc/gitlab \\ --volume /srv/gitlab/logs:/var/log/gitlab \\ --volume /srv/gitlab/data:/var/opt/gitlab \\ gitlab/gitlab-ce:13.3.5-ce.0 1 2 sudo docker exec gitlab-13.3.5 gitlab-ctl stop puma sudo docker exec gitlab-13.3.5 gitlab-ctl stop sidekiq 1 2 3 4 5 6 7 8 9 10 sudo cp 1625145187_2021_07_01_13.3.5_gitlab_backup.tar /srv/gitlab/data/backups/ sudo docker exec gitlab-13.3.5 bash -c \u0026#39;chown git.git /var/opt/gitlab/backups/1625145187_2021_07_01_13.3.5_gitlab_backup.tar\u0026#39; # 有交互，所以一定要加-it sudo docker exec -it gitlab-13.3.5 gitlab-backup restore BACKUP=1625145187_2021_07_01_13.3.5 sudo cp /srv/gitlab/config/gitlab-secrets.json{,.bak} sudo cp gitlab-secrets.json /srv/gitlab/config/ sudo docker exec gitlab-13.3.5 gitlab-ctl reconfigure sudo docker exec gitlab-13.3.5 gitlab-ctl restart sudo docker exec gitlab-13.3.5 gitlab-rake gitlab:check SANITIZE=true 1 2 3 4 5 6 7 8 9 sudo docker stop gitlab-13.3.5 sudo docker rm -v gitlab-13.3.5 sudo docker run --detach \\ --name gitlab-13.12.5 \\ --volume /srv/gitlab/config:/etc/gitlab \\ --volume /srv/gitlab/logs:/var/log/gitlab \\ --volume /srv/gitlab/data:/var/opt/gitlab \\ gitlab/gitlab-ce:13.12.5-ce.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 sudo docker stop gitlab-13.12.5 sudo docker rm -v gitlab-13.12.5 sudo docker run --detach \\ --hostname gitlab.example.com \\ --publish 880:80 --publish 22:22 \\ --name gitlab-14.0.1 \\ --restart always \\ --env TZ=\u0026#39;Asia/Shanghai\u0026#39; \\ --volume /srv/gitlab/config:/etc/gitlab \\ --volume /srv/gitlab/logs:/var/log/gitlab \\ --volume /srv/gitlab/data:/var/opt/gitlab \\ --shm-size 256m \\ gitlab/gitlab-ce:14.0.1-ce.0 ","permalink":"https://yanyong.cc/post/gitlab02/","tags":["gitlab"],"title":"记录一次gitlab迁移，gitlab跨版本升级"},{"categories":["Linux"],"contents":"最新内容 https://yanyong.cc/post/certbot-cloudflare-letsencrypt/\n2025.4.2\n安装Certbot 参考链接：\nhttps://certbot.eff.org/docs/using.html?highlight=renew#automated-renewals\nhttps://askubuntu.com/questions/553937/what-is-the-difference-between-the-core-full-extras-and-light-packages-for-ngi\nhttps://salsa.debian.org/nginx-team/nginx/-/blob/master/debian/control\ndebian操作系统：\n1 2 sudo apt-get -y install certbot sudo apt-get -y install nginx libnginx-mod-stream centos操作系统：\n1 2 3 4 5 6 sudo yum -y install epel-release sudo yum -y install certbot sudo systemctl start certbot-renew.timer \u0026amp;\u0026amp; sudo systemctl enable certbot-renew.timer sudo yum -y install nginx nginx-mod-stream # 可选 #SLEEPTIME=$(awk \u0026#39;BEGIN{srand(); print int(rand()*(3600+1))}\u0026#39;) \u0026amp;\u0026amp; echo \u0026#34;0 0,12 * * * root sleep $SLEEPTIME \u0026amp;\u0026amp; certbot renew -q\u0026#34; | sudo tee -a /etc/cron.d/certbot \u0026gt; /dev/null 获取SSL证书 manual模式 参考链接：\nhttps://certbot.eff.org/docs/using.html#manual\nhttps://certbot.eff.org/docs/using.html#pre-and-post-validation-hooks\nCloudflare API: 官方链接\nDNSPod API: 官方链接\nGoDaddy API: 官方链接\nCloudflare Login Email: info@yanyong.cc\nZone ID: 2109e1497fb164ac32a8a56f493jd767\nGlobal API Key: b16b2371170e9i9t7aed5df44a69f3k0fd947\n--manual-public-ip-logging-ok # 此参数在certbot新版中已弃用\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 sudo certbot certonly --manual \\ -d yanyong.cc -d *.yanyong.cc \\ --email info@yanyong.cc \\ --agree-tos \\ --no-eff-email \\ --preferred-challenges=dns \\ --manual-public-ip-logging-ok \\ --manual-auth-hook \\ \u0026#39;curl -sS -X POST \u0026#34;https://api.cloudflare.com/client/v4/zones/2109e1497fb164ac32a8a56f493jd767/dns_records\u0026#34; -H \u0026#34;X-Auth-Email: info@yanyong.cc\u0026#34; -H \u0026#34;X-Auth-Key: b16b2371170e9i9t7aed5df44a69f3k0fd947\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34; -d {\\\u0026#34;type\\\u0026#34;:\\\u0026#34;TXT\\\u0026#34;,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;_acme-challenge.yanyong.cc\\\u0026#34;,\\\u0026#34;content\\\u0026#34;:\\\u0026#34;$CERTBOT_VALIDATION\\\u0026#34;,\\\u0026#34;ttl\\\u0026#34;:60,\\\u0026#34;proxied\\\u0026#34;:false} \u0026amp;\u0026amp; sleep 30\u0026#39; \\ --manual-cleanup-hook \\ \u0026#39;sleep 30 \u0026amp;\u0026amp; id=`curl -sS -X GET \u0026#34;https://api.cloudflare.com/client/v4/zones/2109e1497fb164ac32a8a56f493jd767/dns_records?name=_acme-challenge.yanyong.cc\u0026#34; -H \u0026#34;X-Auth-Email: info@yanyong.cc\u0026#34; -H \u0026#34;X-Auth-Key: b16b2371170e9i9t7aed5df44a69f3k0fd947\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34; \\ | grep -oP \u0026#34;(?\u0026lt;=result\\\u0026#34;:\\[\\{\\\u0026#34;id\\\u0026#34;:\\\u0026#34;)\\w+\u0026#34;` \\ \u0026amp;\u0026amp; curl -sS -X DELETE \u0026#34;https://api.cloudflare.com/client/v4/zones/2109e1497fb164ac32a8a56f493jd767/dns_records/$id\u0026#34; -H \u0026#34;X-Auth-Email: info@yanyong.cc\u0026#34; -H \u0026#34;X-Auth-Key: b16b2371170e9i9t7aed5df44a69f3k0fd947\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34;\u0026#39; \\ --deploy-hook \u0026#39;systemctl reload nginx\u0026#39; DNSPod/腾讯云 ID: 168457\nToken: b472bfa84ac4e861c926crb0926c9d77\n--manual-public-ip-logging-ok # 此参数在certbot新版中已弃用\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 sudo certbot certonly --manual \\ -d yanyong.cc -d *.yanyong.cc \\ --email info@yanyong.cc \\ --agree-tos \\ --no-eff-email \\ --preferred-challenges=dns \\ --manual-public-ip-logging-ok \\ --manual-auth-hook \\ \u0026#39;wget https://dnsapi.cn/Record.Create -qO - --post-data \u0026#34;login_token=168457,b472bfa84ac4e861c926crb0926c9d77\u0026amp;domain=$CERTBOT_DOMAIN\u0026amp;sub_domain=_acme-challenge\u0026amp;record_type=TXT\u0026amp;record_line_id=0\u0026amp;value=$CERTBOT_VALIDATION\u0026#34; \u0026amp;\u0026amp; sleep 30\u0026#39; \\ --manual-cleanup-hook \\ \u0026#39;sleep 30 \u0026amp;\u0026amp; recordid=`wget https://dnsapi.cn/Record.List -qO - --post-data \u0026#34;login_token=168457,b472bfa84ac4e861c926crb0926c9d77\u0026amp;domain=$CERTBOT_DOMAIN\u0026amp;sub_domain=_acme-challenge\u0026amp;record_type=TXT\u0026amp;record_line_id=0\u0026#34; \\ | grep -oP \u0026#34;(?\u0026lt;=records\\\u0026#34;:\\[\\{\\\u0026#34;id\\\u0026#34;:\\\u0026#34;)\\d+\u0026#34;` \\ \u0026amp;\u0026amp; wget https://dnsapi.cn/Record.Remove -qO - --post-data \u0026#34;login_token=168457,b472bfa84ac4e861c926crb0926c9d77\u0026amp;domain=$CERTBOT_DOMAIN\u0026amp;record_id=$recordid\u0026#34;\u0026#39; \\ --deploy-hook \u0026#39;systemctl reload nginx\u0026#39; GoDaddy API Key: e9CahQ5IAHEz_CbrhCS1CxpXgLPgAdCUk17\nSecret API Key: LMFh2nNET8szNIT14bT1A7\nCustomer ID: 379363747\n--manual-public-ip-logging-ok # 此参数在certbot新版中已弃用\n1 2 3 4 5 6 7 8 9 10 11 12 sudo certbot certonly --manual \\ -d yanyong.cc -d *.yanyong.cc \\ --email info@yanyong.cc \\ --agree-tos \\ --no-eff-email \\ --preferred-challenges=dns \\ --manual-public-ip-logging-ok \\ --manual-auth-hook \\ \u0026#39;curl -sS -X PATCH \u0026#34;https://api.godaddy.com/v1/domains/yanyong.cc/records\u0026#34; -H \u0026#34;accept: application/json\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34; -H \u0026#34;Authorization: sso-key e9CahQ5IAHEz_CbrhCS1CxpXgLPgAdCUk17:LMFh2nNET8szNIT14bT1A7\u0026#34; -d \u0026#34;[ { \\\u0026#34;data\\\u0026#34;: \\\u0026#34;$CERTBOT_VALIDATION\\\u0026#34;, \\\u0026#34;name\\\u0026#34;: \\\u0026#34;_acme-challenge\\\u0026#34;, \\\u0026#34;ttl\\\u0026#34;: 600, \\\u0026#34;type\\\u0026#34;: \\\u0026#34;TXT\\\u0026#34; }]\u0026#34; \u0026amp;\u0026amp; sleep 60\u0026#39; \\ --manual-cleanup-hook \\ \u0026#39;sleep 60 \u0026amp;\u0026amp; curl -sS -X DELETE \u0026#34;https://api.godaddy.com/v1/domains/yanyong.cc/records/TXT/_acme-challenge\u0026#34; -H \u0026#34;accept: application/json\u0026#34; -H \u0026#34;X-Shopper-Id: 379363747\u0026#34; -H \u0026#34;Authorization: sso-key e9CahQ5IAHEz_CbrhCS1CxpXgLPgAdCUk17:LMFh2nNET8szNIT14bT1A7\u0026#34;\u0026#39; \\ --deploy-hook \u0026#39;systemctl reload nginx\u0026#39; standalone模式参考 需要绑定80端口进域名验证，可以手动停掉比如nginx等服务\n1 sudo certbot certonly --standalone -d standalone.yanyong.cc --email info@yanyong.cc --agree-tos --no-eff-email webroot模式参考 nginx配置：\n1 2 3 4 5 6 7 8 server { listen 80; server_name example.yanyong.cc; location ^~ /.well-known/acme-challenge/ { root /srv/www/_letsencrypt; } } 获取证书\n1 2 3 4 5 6 sudo certbot certonly --webroot -w /srv/www/_letsencrypt \\ -d example.yanyong.cc \\ --email info@yanyong.cc \\ --agree-tos \\ --no-eff-email \\ --deploy-hook \u0026#39;systemctl reload nginx\u0026#39; ","permalink":"https://yanyong.cc/post/certbot/","tags":["ssl","certbot","let's encrypt"],"title":"Certbot自动续签Let's Encrypt免费泛域名SSL证书"},{"categories":["Linux","CentOS"],"contents":"不推荐使用 不推荐使用！\n仅供参考！\n2025.3.29\n脚本使用方法 参考Debian 10初始化脚本。\n示例 创建用户yanyong，设置FQDN为blog.yanyong.cc，设置ssh端口23422，设置阿里源，设置时区Asia/Shanghai。\n1 2 3 4 5 6 curl -fsSL https://raw.yanyong.cc/sh/centos8-init.sh | bash -s -- \\ --fqdn=blog.yanyong.cc \\ --user=yanyong \\ --port=23422 \\ --repo=ali \\ --tz=Asia/Shanghai 特别说明 查看帮助curl -fsSL https://raw.yanyong.cc/sh/centos8-init.sh | bash -s help。 此版本只支持阿里源，配置方法：--repo=ali，此脚本没有修改NTP相关设置。 脚本中使用yum upgrade更新系统，如有需要可手动执行yum update。 脚本内容 链接：[脚本]\n参考链接 https://mirrors.ustc.edu.cn/help/centos.html\nhttps://yanyong.cc/post/debian10-init/\n","permalink":"https://yanyong.cc/post/centos8-init/","tags":["shell"],"title":"CentOS 8初始化脚本"},{"categories":["Uncategorized"],"contents":"安装portainer portainer官网\n1 2 3 4 5 sudo docker pull portainer/portainer-ce:alpine sudo docker volume create myportainer_data sudo docker run -d -p 9000:9000 -p 8000:8000 --name=myportainer --restart=always \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v myportainer_data:/data portainer/portainer-ce:alpine 忘记密码重置方法 1 2 3 sudo docker stop myportainer sudo docker run --rm -v myportainer_data:/data portainer/helper-reset-password sudo docker start myportainer 参考链接：\nhttps://docs.docker.com/network/iptables/\nhttps://hub.docker.com/r/portainer/portainer-ce\n","permalink":"https://yanyong.cc/post/portainer/","tags":["docker","portainer"],"title":"Docker轻量级UI工具portainer安装"},{"categories":["Uncategorized"],"contents":"官方文档入口 自带模板官方文档\n官方git地址1\n官方git地址2\n被监控mysql上创建用户 1 2 CREATE USER \u0026#39;zbx_monitor\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;12345\u0026#39;; GRANT REPLICATION CLIENT,PROCESS,SHOW DATABASES,SHOW VIEW ON *.* TO \u0026#39;zbx_monitor\u0026#39;@\u0026#39;%\u0026#39;; zabbix agent配置 参考zabbix agent安装\n由于我mysql/mariadb是容器方式安装的，默认localhost走socket连接，会报错，配置host=127.0.0.1即可\nerror: 'Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)' 添加.my.cnf\n1 2 3 4 5 6 7 8 9 tee ~/zabbix/.my.cnf \u0026lt;\u0026lt; EOF [client] host=\u0026#39;127.0.0.1\u0026#39; user=\u0026#39;zbx_monitor\u0026#39; password=\u0026#39;12345\u0026#39; EOF # 测试上面添加的文件是否生效 HOME=$HOME/zabbix mysqladmin ping 修改自带userparameter_mysql.conf，mysql,mysqladmin等命令前全加上HOME变量\n1 2 3 cp ~/zabbix/conf/zabbix_agentd/userparameter_mysql.conf{,.bak} # 可选，备份文件 sed -ri \u0026#34;s#, (mysqladmin|mysql)#, HOME=$HOME/zabbix \\1#\u0026#34; $HOME/zabbix/conf/zabbix_agentd/userparameter_mysql.conf 修改zabbix_agentd.conf\n1 echo \u0026#34;Include=$HOME/zabbix/conf/zabbix_agentd/userparameter_mysql.conf\u0026#34; \u0026gt;\u0026gt; ~/zabbix/conf/zabbix_agentd.conf 重启zabbix agent\n1 2 ps -ef|awk \u0026#39;/zabbix_agent[d] -c/{print $2}\u0026#39;|xargs -i kill {} ~/zabbix/sbin/zabbix_agentd -c ~/zabbix/conf/zabbix_agentd.conf 测试\n1 2 3 ~/zabbix/bin/zabbix_get -s 127.0.0.1 -k mysql.ping[127.0.0.1,3306] ~/zabbix/sbin/zabbix_agentd -c ~/zabbix/conf/zabbix_agentd.conf -t mysql.version[127.0.0.1,3306] zabbix server配置 链接模板\n容器安装的mysql/mariadb，这一步是重点\n大功告成\n","permalink":"https://yanyong.cc/post/zabbix06/","tags":["zabbix"],"title":"Zabbix监控配置之自带模板监控mysql"},{"categories":["Uncategorized"],"contents":"创建web场景 web场景官方文档入口\n客户端是可选项，这里选择的chrome\n数据体和头部信息可以浏览器F12查找，或找接口开发人员确认\n创建触发器 触发器官方文档入口\n创建触发器，才会触发报警信息\n","permalink":"https://yanyong.cc/post/zabbix05/","tags":["zabbix"],"title":"Zabbix监控配置之web监测"},{"categories":["Uncategorized"],"contents":"邮件报警 报警媒介，发送报警信息的 用户报警媒介，接收报警信息的 动作，触发发送报警信息 钉钉报警 创建群聊并添加钉钉机器人 选人建群或内部群都可以\n安全设置，至少要选择一种\n钉钉机器人加签设置官方文档入口\n测试脚本：\n脚本参考链接：\nhttps://www.jokecamp.com/blog/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/\nhttps://stackoverflow.com/questions/296536/how-to-urlencode-data-for-curl-command?page=1\u0026amp;tab=scoredesc#tab-top\n1 2 3 4 5 6 7 8 9 #!/bin/bash TIMESTAMP=$(date \u0026#39;+%s%3N\u0026#39;) SECRET=SECc0b6df347adee0a6375ead7ff58c661d7ec2b9c96b872abc5c71f99e325c50c2 SIGN=$(echo -en \u0026#34;$TIMESTAMP\\n$SECRET\u0026#34; | openssl dgst -sha256 -hmac $SECRET -binary | base64 -w 0 | perl -p -e \u0026#39;s/([^A-Za-z0-9])/sprintf(\u0026#34;%%%02X\u0026#34;, ord($1))/seg\u0026#39;) WEBHOOK=\u0026#34;https://oapi.dingtalk.com/robot/send?access_token=c8b429f7be7f75015a14d57d76cd2675878969964384e2013994134af42ebf2b\u0026amp;timestamp=$TIMESTAMP\u0026amp;sign=$SIGN\u0026#34; curl $WEBHOOK \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{\u0026#34;msgtype\u0026#34;: \u0026#34;text\u0026#34;,\u0026#34;text\u0026#34;: {\u0026#34;content\u0026#34;:\u0026#34;我就是我, 是不一样的烟火\u0026#34;}}\u0026#39; 测试结果：\n报警媒介，发送报警信息的 添加媒介 可以从媒介Email复制一个，名称可根据喜好取名比如钉钉，类型为脚本，脚本名称需与下一步编写的脚本名一致即可dingding.sh，脚本参数{ALERT.SENDTO}和{ALERT.MESSAGE} ，{ALERT.SENDTO}对应脚本中的$1，{ALERT.MESSAGE} 对应脚本中的$2。消息模板，已经有一些默认的，没特殊要求可以不用修改。\n编写脚本 自定义报警脚本官方文档入口\n安装curl，openssl，perl，我的zabbix以容器方式安装的(Docker容器三分钟安装Zabbix)，apline镜像中的date命令（BusyBox date）不支持 date +%N，安装coreutils即可，参考这里\n1 2 3 4 sudo docker exec -u root zabbix-server-mysql apk add curl sudo docker exec -u root zabbix-server-mysql apk add openssl sudo docker exec -u root zabbix-server-mysql apk add perl sudo docker exec -u root zabbix-server-mysql apk add coreutils 自定义脚本默认放在这个目录：/usr/local/share/zabbix/alertscripts\n我容器安装时映射到本机的目录为：/data/zabbix/alertscripts\n给脚本执行权限\n1 sudo chmod +x /data/zabbix/alertscripts/dingding.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/bin/bash to=$1 body=$2 TIMESTAMP=$(date \u0026#39;+%s%3N\u0026#39;) SECRET=SECc0b6df347adee0a6375ead7ff58c661d7ec2b9c96b872abc5c71f99e325c50c2 SIGN=$(echo -en \u0026#34;$TIMESTAMP\\n$SECRET\u0026#34; | openssl dgst -sha256 -hmac $SECRET -binary | base64 -w 0 | perl -p -e \u0026#39;s/([^A-Za-z0-9])/sprintf(\u0026#34;%%%02X\u0026#34;, ord($1))/seg\u0026#39;) WEBHOOK=\u0026#34;https://oapi.dingtalk.com/robot/send?access_token=c8b429f7be7f75015a14d57d76cd2675878969964384e2013994134af42ebf2b\u0026amp;timestamp=$TIMESTAMP\u0026amp;sign=$SIGN\u0026#34; curl $WEBHOOK \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39; { \u0026#34;at\u0026#34;: { \u0026#34;atMobiles\u0026#34;:[ \u0026#34;\u0026#39;\u0026#34;$to\u0026#34;\u0026#39;\u0026#34; ], \u0026#34;isAtAll\u0026#34;: false }, \u0026#34;text\u0026#34;: { \u0026#34;content\u0026#34;:\u0026#34;\u0026#39;\u0026#34;$body\u0026#34;\u0026#39;\u0026#34; }, \u0026#34;msgtype\u0026#34;:\u0026#34;text\u0026#34; }\u0026#39; 测试报警脚本\n直接运行报警脚本也可以测试\n用户报警媒介，接收报警信息的 收件人填写钉钉手机号码，不填手机号的话收到的就消息不会@收件人。收件人就是{ALERT.SENDTO}也就是对应脚本中的$1\n动作，触发发送报警信息 邮件报警中已设置，略\u0026hellip;\n模拟一次故障，比如停掉被监控机器的zabbix agent，看看如何报警的\n重新启动zabbix agent后，收到的恢复信息\n","permalink":"https://yanyong.cc/post/zabbix04/","tags":["zabbix"],"title":"Zabbix监控配置之邮件报警和钉钉报警"},{"categories":["Uncategorized"],"contents":"乱码现象 一行代码解决 备份原有字体\n1 sudo docker exec -u root zabbix-web-nginx-mysql bash -c \u0026#39;mv /usr/share/zabbix/assets/fonts/DejaVuSans.ttf{,.BAK}\u0026#39; 一行代码解决，下载字体并替换\n1 sudo docker exec -u root zabbix-web-nginx-mysql bash -c \u0026#39;cd /usr/share/zabbix/assets/fonts/;wget https://raw.yanyong.cc/download/fonts/SIMKAI.TTF;ln -s SIMKAI.TTF DejaVuSans.ttf\u0026#39; 已正常显示中文，无需重启\n","permalink":"https://yanyong.cc/post/zabbix03/","tags":["zabbix"],"title":"一行代码解决Zabbix中文乱码"},{"categories":["Uncategorized"],"contents":"手动添加主机 agent被动模式 agent主动模式 主动模式时Hostname必须与server端创建主机时的名字一致，模板选择带active的\nLogFile=/tmp/zabbix_agentd.log Server=10.20.70.113 ServerActive=10.20.70.113:10051 Hostname=10.20.77.56 active 自动发现主机 添加后在自动发现中可以看到已发现的设备，需要配置动作来自动加入主机列表\n稍等一会儿主机中就会出现自动发现的机器\n自动注册主机 agent配置文件参考\nLogFile=/tmp/zabbix_agentd.log Server=10.20.70.113 ServerActive=10.20.70.113:10051 HostnameItem=system.hostname HostMetadataItem=system.uname 稍等一会儿主机中就会出现自动注册的机器\n","permalink":"https://yanyong.cc/post/zabbix02/","tags":["zabbix"],"title":"Zabbix监控配置之自动发现和自动注册"},{"categories":["Uncategorized"],"contents":"安装数据库 安装mariadb，略。参考https://yanyong.cc/post/docker-example-list/#mariadb\n安装zabbix 参考https://www.zabbix.com/documentation/current/manual/installation/containers\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 sudo docker network create --subnet 172.19.0.0/16 --gateway 172.19.0.1 zabbix-net sudo docker run --name zabbix-java-gateway \\ --network zabbix-net \\ --ip 172.19.0.2 \\ --restart unless-stopped \\ -d zabbix/zabbix-java-gateway:alpine-5.0-latest sudo docker run --name zabbix-server-mysql \\ -e DB_SERVER_HOST=\u0026#34;172.17.0.1\u0026#34; \\ -e DB_SERVER_PORT=\u0026#34;3306\u0026#34; \\ -e MYSQL_DATABASE=\u0026#34;zabbix\u0026#34; \\ -e MYSQL_USER=\u0026#34;zabbix\u0026#34; \\ -e MYSQL_PASSWORD=\u0026#34;1234\u0026#34; \\ -e MYSQL_ROOT_PASSWORD=\u0026#34;123456\u0026#34; \\ -e ZBX_JAVAGATEWAY_ENABLE=\u0026#34;true\u0026#34; \\ -e ZBX_JAVAGATEWAY=\u0026#34;zabbix-java-gateway\u0026#34; \\ -e ZBX_JAVAGATEWAYPORT=\u0026#34;10052\u0026#34; \\ -e ZBX_STARTJAVAPOLLERS=\u0026#34;5\u0026#34; \\ -v /data/zabbix/alertscripts:/usr/lib/zabbix/alertscripts \\ -v /data/zabbix/externalscripts:/usr/lib/zabbix/externalscripts \\ --network zabbix-net \\ --ip 172.19.0.3 \\ -p 10051:10051 \\ -e TZ=\u0026#39;Asia/Shanghai\u0026#39; \\ --restart unless-stopped \\ -d zabbix/zabbix-server-mysql:alpine-5.0-latest sudo docker run --name zabbix-web-nginx-mysql \\ -e ZBX_SERVER_HOST=\u0026#34;zabbix-server-mysql\u0026#34; \\ -e ZBX_SERVER_PORT=\u0026#34;10051\u0026#34; \\ -e DB_SERVER_HOST=\u0026#34;172.17.0.1\u0026#34; \\ -e DB_SERVER_PORT=\u0026#34;3306\u0026#34; \\ -e MYSQL_DATABASE=\u0026#34;zabbix\u0026#34; \\ -e MYSQL_USER=\u0026#34;zabbix\u0026#34; \\ -e MYSQL_PASSWORD=\u0026#34;1234\u0026#34; \\ -e PHP_TZ=\u0026#34;Asia/Shanghai\u0026#34; \\ --network zabbix-net \\ --ip 172.19.0.4 \\ -p 8080:8080 \\ --restart unless-stopped \\ -d zabbix/zabbix-web-nginx-mysql:alpine-5.0-latest 如果配置MYSQL_ROOT_PASSWORD则会尝试创建用户和数据库，也可以手动创建用和数据库则无需配置MYSQL_ROOT_PASSWORD\n1 2 3 mysql -h 127.0.0.1 -P 3306 -u root -p\u0026#39;123456\u0026#39; -e \u0026#34;create user zabbix@\u0026#39;%\u0026#39; identified by \u0026#39;1234\u0026#39;;\u0026#34;~~ mysql -h 127.0.0.1 -P 3306 -u root -p\u0026#39;123456\u0026#39; -e \u0026#34;create database zabbix character set utf8 collate utf8_bin;\u0026#34; mysql -h 127.0.0.1 -P 3306 -u root -p\u0026#39;123456\u0026#39; -e \u0026#34;grant all on zabbix.* to zabbix@\u0026#39;%\u0026#39;;flush privileges;\u0026#34; 安装zabbix agent zabbix agent部署在被监控目标上，zabbix server主机上也要安装zabbix agent因为主机也需要被监控，不建议容器安装zabbix agent\nzabbix agent版本最好与zabbix server版本一致\nzabbix agent下载地址\n下载并解压\n1 2 3 4 5 mkdir ~/zabbix \u0026amp;\u0026amp; cd ~/zabbix wget https://cdn.zabbix.com/zabbix/binaries/stable/5.0/5.0.11/zabbix_agent-5.0.11-linux-3.0-amd64-static.tar.gz tar zxf zabbix_agent-5.0.11-linux-3.0-amd64-static.tar.gz 修改并查看agent配置文件。zabbix server容器的地址为172.19.0.3，主机地址为10.20.70.113，Server为允许访问agent的主机，ServerActive配置后启用主动模式，以下示例为zabbix server上安装的agent配置文件，主动模式时Hostname必须与server端创建主机时的名字一致，配置文件官方文档\n1 2 3 sed -i \u0026#39;s/^Server=.*/Server=172.19.0.3/\u0026#39; ~/zabbix/conf/zabbix_agentd.conf sed -i \u0026#39;s/^ServerActive=.*/ServerActive=10.20.70.113:10051/\u0026#39; ~/zabbix/conf/zabbix_agentd.conf # 可选项 sed \u0026#39;/^#\\|^ *$/d\u0026#39; ~/zabbix/conf/zabbix_agentd.conf # 显示非注释且非空行 LogFile=/tmp/zabbix_agentd.log Server=172.19.0.3 ServerActive=10.20.70.113:10051 Hostname=Zabbix server 启动zabbix agent,默认监听端口10050\n1 ~/zabbix/sbin/zabbix_agentd -c ~/zabbix/conf/zabbix_agentd.conf 关闭zabbix agent\n1 ps -ef|awk \u0026#39;/zabbix_agent[d] -c/{print $2}\u0026#39;|xargs -i kill {} 可选步骤，开启防火墙\nagent安装在zabbix server本机时 1 sudo iptables -A INPUT -s 172.19.0.0/16 -p tcp -m state --state NEW -m tcp --dport 10050 -j ACCEPT agent安装在其它被监控机器时 1 sudo iptables -A INPUT -s 10.20.70.113 -p tcp -m state --state NEW -m tcp --dport 10050 -j ACCEPT 可选步骤，加入开机自启动\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #echo \u0026#34;sudo -u $USER $HOME/zabbix/sbin/zabbix_agentd -c $HOME/zabbix/conf/zabbix_agentd.conf\u0026#34; | sudo tee -a /etc/rc.local #sudo chmod +x /etc/rc.local #2022.6.22更新 ##Debian系统 sudo tee /etc/rc.local \u0026lt;\u0026lt; EOF #!/bin/bash -e sudo -u $USER $HOME/zabbix/sbin/zabbix_agentd -c $HOME/zabbix/conf/zabbix_agentd.conf exit 0 EOF sudo chmod +x /etc/rc.local sudo systemctl restart rc-local ##CentOS系统，开头也必须指定#!/bin/bash，可以不用exit 0 echo \u0026#34;sudo -u $USER $HOME/zabbix/sbin/zabbix_agentd -c $HOME/zabbix/conf/zabbix_agentd.conf\u0026#34; | sudo tee -a /etc/rc.local sudo chmod +x /etc/rc.local sudo systemctl restart rc-local 监控zabbix server主机 主机IP：10.20.70.113，访问http://10.20.70.113:8080，nginx反向代理配置一个域名访问也可以，默认用户名密码：Admin/zabbix\n默认已经添加zabbix server主机(agent被动模式)，因为zabbix server是容器安装的，所以默认的127.0.0.1:10050是找不到zabbix agent的，需要改成主机地址10.20.70.113或docker网桥地址172.17.0.1\n","permalink":"https://yanyong.cc/post/zabbix/","tags":["zabbix"],"title":"Docker容器三分钟安装Zabbix"},{"categories":["Uncategorized"],"contents":"安装NFS Server NFS服务端IP为: 10.20.70.113\n1 sudo apt-get -y install nfs-kernel-server # 包含nfs-common 1 2 3 sudo mkdir -p /data/k8s-nfs echo \u0026#39;/data/k8s-nfs *(rw,sync,no_root_squash)\u0026#39; | sudo tee /etc/exports sudo exportfs -a 检查状态\n1 2 3 systemctl status nfs-server sudo rpcinfo -p |grep nfs cat /var/lib/nfs/etab 安装NFS Client 所有工作节点安装NFS客户端\n1 sudo apt-get install nfs-common 检查状态\n1 sudo showmount -e 10.20.70.113 测试\n1 2 3 4 5 6 mkdir /tmp/foo sudo mount -t nfs 10.20.70.113:/data/k8s-nfs /tmp/foo sudo touch /tmp/foo/a.txt # 在NFS服务端查看a.txt ls /data/k8s-nfs 静态创建PV 创建pv\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 tee nfs-pv.yaml \u0026lt;\u0026lt; EOF apiVersion: v1 kind: PersistentVolume metadata: name: pv01 spec: capacity: storage: 1Gi accessModes: - ReadWriteMany persistentVolumeReclaimPolicy: Retain nfs: server: 10.20.70.113 path: \u0026#34;/data/k8s-nfs\u0026#34; EOF kubectl apply -f nfs-pv.yaml 创建pvc\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 tee nfs-pvc.yaml \u0026lt;\u0026lt; EOF apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc01 spec: accessModes: - ReadWriteMany storageClassName: \u0026#34;\u0026#34; resources: requests: storage: 1Gi EOF kubectl apply -f nfs-pvc.yaml 使用pvc\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 tee nginx.yaml \u0026lt;\u0026lt; EOF apiVersion: v1 kind: Service metadata: name: my-nginx-svc labels: app: mynginx spec: type: NodePort ports: - port: 80 targetPort: 80 nodePort: 30002 selector: app: mynginx --- apiVersion: apps/v1 kind: Deployment metadata: name: my-nginx spec: selector: matchLabels: app: mynginx replicas: 2 template: metadata: labels: app: mynginx spec: containers: - name: mynginx image: nginx:alpine ports: - containerPort: 80 volumeMounts: - name: www mountPath: /usr/share/nginx/html subPath: my-nginx-www volumes: - name: www persistentVolumeClaim: claimName: pvc01 EOF kubectl apply -f nginx.yaml 1 echo \u0026#39;\u0026lt;h1\u0026gt;Hi, K8s\u0026lt;/h1\u0026gt;\u0026#39; | sudo tee /data/k8s-nfs/my-nginx-www/index.html 访问试下，或者浏览器访问也行\n$ curl http://10.20.70.113:30002 \u0026lt;h1\u0026gt;Hi, K8s\u0026lt;/h1\u0026gt; 动态创建PV 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 tee nfs-client.yaml \u0026lt;\u0026lt; EOF apiVersion: apps/v1 kind: Deployment metadata: name: nfs-client-provisioner labels: app: nfs-client-provisioner # replace with namespace where provisioner is deployed namespace: default spec: replicas: 1 strategy: type: Recreate selector: matchLabels: app: nfs-client-provisioner template: metadata: labels: app: nfs-client-provisioner spec: serviceAccountName: nfs-client-provisioner containers: - name: nfs-client-provisioner image: k8s.gcr.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2 volumeMounts: - name: nfs-client-root mountPath: /persistentvolumes env: - name: PROVISIONER_NAME value: k8s-sigs.io/nfs-subdir-external-provisioner - name: NFS_SERVER value: 10.20.70.113 - name: NFS_PATH value: /data/k8s-nfs volumes: - name: nfs-client-root nfs: server: 10.20.70.113 path: /data/k8s-nfs EOF kubectl apply -f nfs-client.yaml k8s.gcr.io镜像国内拉取不了解决办法，看pod落到哪个node了，建议所有node都拉取一下\n1 2 3 4 5 sudo docker pull strongxyz/nfs-subdir-external-provisioner:v4.0.2 sudo docker tag strongxyz/nfs-subdir-external-provisioner:v4.0.2 k8s.gcr.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2 sudo docker rmi strongxyz/nfs-subdir-external-provisioner:v4.0.2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 tee nfs-client-sa.yaml \u0026lt;\u0026lt; EOF apiVersion: v1 kind: ServiceAccount metadata: name: nfs-client-provisioner # replace with namespace where provisioner is deployed namespace: default --- kind: ClusterRole apiVersion: rbac.authorization.k8s.io/v1 metadata: name: nfs-client-provisioner-runner rules: - apiGroups: [\u0026#34;\u0026#34;] resources: [\u0026#34;nodes\u0026#34;] verbs: [\u0026#34;get\u0026#34;, \u0026#34;list\u0026#34;, \u0026#34;watch\u0026#34;] - apiGroups: [\u0026#34;\u0026#34;] resources: [\u0026#34;persistentvolumes\u0026#34;] verbs: [\u0026#34;get\u0026#34;, \u0026#34;list\u0026#34;, \u0026#34;watch\u0026#34;, \u0026#34;create\u0026#34;, \u0026#34;delete\u0026#34;] - apiGroups: [\u0026#34;\u0026#34;] resources: [\u0026#34;persistentvolumeclaims\u0026#34;] verbs: [\u0026#34;get\u0026#34;, \u0026#34;list\u0026#34;, \u0026#34;watch\u0026#34;, \u0026#34;update\u0026#34;] - apiGroups: [\u0026#34;storage.k8s.io\u0026#34;] resources: [\u0026#34;storageclasses\u0026#34;] verbs: [\u0026#34;get\u0026#34;, \u0026#34;list\u0026#34;, \u0026#34;watch\u0026#34;] - apiGroups: [\u0026#34;\u0026#34;] resources: [\u0026#34;events\u0026#34;] verbs: [\u0026#34;create\u0026#34;, \u0026#34;update\u0026#34;, \u0026#34;patch\u0026#34;] --- kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1 metadata: name: run-nfs-client-provisioner subjects: - kind: ServiceAccount name: nfs-client-provisioner # replace with namespace where provisioner is deployed namespace: default roleRef: kind: ClusterRole name: nfs-client-provisioner-runner apiGroup: rbac.authorization.k8s.io --- kind: Role apiVersion: rbac.authorization.k8s.io/v1 metadata: name: leader-locking-nfs-client-provisioner # replace with namespace where provisioner is deployed namespace: default rules: - apiGroups: [\u0026#34;\u0026#34;] resources: [\u0026#34;endpoints\u0026#34;] verbs: [\u0026#34;get\u0026#34;, \u0026#34;list\u0026#34;, \u0026#34;watch\u0026#34;, \u0026#34;create\u0026#34;, \u0026#34;update\u0026#34;, \u0026#34;patch\u0026#34;] --- kind: RoleBinding apiVersion: rbac.authorization.k8s.io/v1 metadata: name: leader-locking-nfs-client-provisioner # replace with namespace where provisioner is deployed namespace: default subjects: - kind: ServiceAccount name: nfs-client-provisioner # replace with namespace where provisioner is deployed namespace: default roleRef: kind: Role name: leader-locking-nfs-client-provisioner apiGroup: rbac.authorization.k8s.io EOF kubectl apply -f nfs-client-sa.yaml 1 2 3 4 5 6 7 8 9 10 11 tee nfs-client-class.yaml \u0026lt;\u0026lt; EOF apiVersion: storage.k8s.io/v1 kind: StorageClass metadata: name: nfs-client provisioner: k8s-sigs.io/nfs-subdir-external-provisioner # or choose another name, must match deployment\u0026#39;s env PROVISIONER_NAME\u0026#39; parameters: archiveOnDelete: \u0026#34;true\u0026#34; EOF kubectl apply -f nfs-client-class.yaml 手动创建pvc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 tee test-pvc.yaml \u0026lt;\u0026lt; EOF kind: PersistentVolumeClaim apiVersion: v1 metadata: name: test-pvc spec: storageClassName: nfs-client accessModes: - ReadWriteMany resources: requests: storage: 1Mi EOF kubectl apply -f test-pvc.yaml 创建pod，测试刚才创建的pvc是否可正常使用\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 tee test-pod.yaml \u0026lt;\u0026lt; EOF kind: Pod apiVersion: v1 metadata: name: test-pod spec: containers: - name: test-pod image: busybox:stable command: - \u0026#34;/bin/sh\u0026#34; args: - \u0026#34;-c\u0026#34; - \u0026#34;touch /mnt/SUCCESS \u0026amp;\u0026amp; exit 0 || exit 1\u0026#34; volumeMounts: - name: nfs-pvc mountPath: \u0026#34;/mnt\u0026#34; restartPolicy: \u0026#34;Never\u0026#34; volumes: - name: nfs-pvc persistentVolumeClaim: claimName: test-pvc EOF kubectl apply -f test-pod.yaml 确认是否成功写入文件SUCCESS\n$ ls /data/k8s-nfs/default-test-pvc-`kubectl get pvc | awk '/test-pvc/{print $3}'` SUCCESS 自动创建pvc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 tee test-statefulset-nfs.yaml \u0026lt;\u0026lt; EOF apiVersion: v1 kind: Service metadata: name: nginx labels: app: nginx spec: type: NodePort ports: - port: 80 targetPort: 80 nodePort: 30003 selector: app: nginx --- apiVersion: apps/v1 # for k8s versions before 1.9.0 use apps/v1beta2 and before 1.8.0 use extensions/v1beta1 kind: StatefulSet metadata: name: web labels: app: nginx spec: serviceName: \u0026#34;nginx\u0026#34; selector: matchLabels: app: nginx replicas: 3 template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:alpine ports: - containerPort: 80 name: web volumeMounts: - name: www mountPath: /usr/share/nginx/html volumeClaimTemplates: - metadata: name: www spec: accessModes: [ \u0026#34;ReadWriteOnce\u0026#34; ] resources: requests: storage: 1Gi storageClassName: nfs-client EOF kubectl apply -f test-statefulset-nfs.yaml 参考链接\n浅谈 Kubernetes 数据持久化方案\nhttps://ubuntu.com/server/docs/service-nfs\nhttps://kubernetes.io/zh/docs/concepts/storage/persistent-volumes/#access-modes\nhttps://github.com/kubernetes/examples/tree/master/staging/volumes/nfs\nhttps://kubernetes.io/zh/docs/tasks/run-application/run-stateless-application-deployment/\nhttps://github.com/kubernetes/website/tree/main/content/en/examples/application/nginx\nhttps://github.com/kubernetes-retired/external-storage/tree/master/nfs-client\nhttps://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/tree/master/deploy\nhttps://github.com/kubernetes/examples/blob/master/staging/volumes/vsphere/simple-statefulset.yaml\n","permalink":"https://yanyong.cc/post/k8s03/","tags":["k8s","kubernetes"],"title":"K8s数据持久化存储之NFS"},{"categories":["Uncategorized"],"contents":"安装Dashboard kubernetes.io地址\ngithub地址\n下载文件后稍作修改，方便集群外访问\n1 2 #有可能要梯子下载，请到官方确认最新版本 wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml 把以下内容\nkind: Service apiVersion: v1 metadata: labels: k8s-app: kubernetes-dashboard name: kubernetes-dashboard namespace: kubernetes-dashboard spec: ports: - port: 443 targetPort: 8443 selector: k8s-app: kubernetes-dashboard 改成\nkind: Service apiVersion: v1 metadata: labels: k8s-app: kubernetes-dashboard name: kubernetes-dashboard namespace: kubernetes-dashboard spec: type: NodePort ports: - port: 443 targetPort: 8443 nodePort: 30000 selector: k8s-app: kubernetes-dashboard 安装\n访问地址：https://任一节点IP:30000，控制节点或工作节点都可以 1 kubectl apply -f recommended.yaml 创建超级管理员用户\ngithub地址\n1 2 3 4 5 6 7 8 #创建用户 kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:dashboard-admin #获取token，两种方法二选一 kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/dashboard-admin -o jsonpath=\u0026#34;{.secrets[0].name}\u0026#34;) -o go-template=\u0026#34;{{.data.token | base64decode}}\u0026#34; kubectl describe secrets -n kubernetes-dashboard $(kubectl -n kubernetes-dashboard get secret | awk \u0026#39;/dashboard-admin/{print $1}\u0026#39;) # 方法二 创建普通用户\nkubernetes.io地址\n1 2 3 4 5 6 #create kubectl create serviceaccount xxx-user -n kubernetes-dashboard kubectl create clusterrolebinding xxx-user --clusterrole=view --serviceaccount=kubernetes-dashboard:xxx-user #get token kubectl describe secrets -n kubernetes-dashboard $(kubectl -n kubernetes-dashboard get secret | awk \u0026#39;/xxx-user/{print $1}\u0026#39;) 安装Metrics-Server 下载文件\n1 wget https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml 找到如下位置\ncontainers: - args: - --cert-dir=/tmp - --secure-port=4443 - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname - --kubelet-use-node-status-port - --metric-resolution=15s 添加- --kubelet-insecure-tls\ncontainers: - args: - --cert-dir=/tmp - --secure-port=4443 - --kubelet-insecure-tls - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname - --kubelet-use-node-status-port - --metric-resolution=15s 安装\n1 kubectl apply -f components.yaml k8s.gcr.io上的metrics-server国内无法拉取，v0.5.0版本请确认后修改成需要的版本\n从日志确认pod运行在哪个node了，去node机器执行，最好所有node都拉取一下这个镜像 1 2 3 sudo docker pull registry.aliyuncs.com/google_containers/metrics-server:v0.5.0 sudo docker tag registry.aliyuncs.com/google_containers/metrics-server:v0.5.0 k8s.gcr.io/metrics-server/metrics-server:v0.5.0 sudo docker rmi registry.aliyuncs.com/google_containers/metrics-server:v0.5.0 ","permalink":"https://yanyong.cc/post/k8s02/","tags":["k8s","kubernetes"],"title":"Kubernetes Dashboard安装"},{"categories":["Uncategorized"],"contents":"官方文档入口\n注：master和node的操作系统都是debian 10\nMaster和Node都需要 安装docker 安装docker参考这里\ndocker配置systemd管理cgroup\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 sudo tee /etc/docker/daemon.json \u0026lt;\u0026lt; EOF { \u0026#34;exec-opts\u0026#34;: [\u0026#34;native.cgroupdriver=systemd\u0026#34;], \u0026#34;log-driver\u0026#34;: \u0026#34;json-file\u0026#34;, \u0026#34;log-opts\u0026#34;: { \u0026#34;max-size\u0026#34;: \u0026#34;100m\u0026#34;， \u0026#34;max-file\u0026#34;: \u0026#34;3\u0026#34; }, \u0026#34;storage-driver\u0026#34;: \u0026#34;overlay2\u0026#34; } EOF sudo systemctl daemon-reload sudo systemctl restart docker 如果没有配置systemd，kubeadm init初始化时会有如下警告\n# [WARNING IsDockerSystemdCheck]: detected \u0026quot;cgroupfs\u0026quot; as the Docker cgroup driver. The recommended driver is \u0026quot;systemd\u0026quot;. Please follow the guide at https://kubernetes.io/docs/setup/cri/ # [WARNING SystemVerification]: missing optional cgroups: hugetlb 关闭swap 1 2 3 sudo swapoff -a sudo cp /etc/fstab{,.bak} sudo sed -i \u0026#39;/swap/s/^/#/\u0026#39; /etc/fstab 允许iptables桥接流量 查看\n1 2 3 lsmod | grep br_netfilter lsmod | grep overlay sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward 设置\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 sudo tee /etc/modules-load.d/k8s.conf \u0026lt;\u0026lt;EOF overlay br_netfilter EOF sudo modprobe overlay sudo modprobe br_netfilter sudo tee /etc/sysctl.d/k8s.conf \u0026lt;\u0026lt;EOF net.bridge.bridge-nf-call-iptables = 1 net.bridge.bridge-nf-call-ip6tables = 1 net.ipv4.ip_forward = 1 EOF sudo sysctl --system 安装kubeadm，kubelet，kubectl 1 2 3 4 5 6 7 8 9 10 sudo apt-get update sudo apt-get install -y apt-transport-https ca-certificates curl curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add - echo \u0026#39;deb https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial main\u0026#39; | sudo tee /etc/apt/sources.list.d/kubernetes.list sudo apt-get update sudo apt-get install -y kubelet kubeadm kubectl sudo apt-mark hold kubelet kubeadm kubectl 如需安装指定版本\n1 2 apt-cache madison kubeadm # 查找版本 sudo apt-get install -y kubelet=1.21.2-00 kubeadm=1.21.2-00 kubectl=1.21.2-00 Master部署 由于国内无法访问k8s.gcr.io，kubeadm init不成功，查看需要拉哪些镜像，如需指定版本--kubernetes-version v1.21.2\n1 kubeadm config images list k8s.gcr.io/kube-apiserver:v1.21.2 k8s.gcr.io/kube-controller-manager:v1.21.2 k8s.gcr.io/kube-scheduler:v1.21.2 k8s.gcr.io/kube-proxy:v1.21.2 k8s.gcr.io/pause:3.4.1 k8s.gcr.io/etcd:3.4.13-0 k8s.gcr.io/coredns/coredns:v1.8.0 从阿里云拉镜像\n1 sudo kubeadm config images pull --image-repository registry.aliyuncs.com/google_containers 给镜像打tag，注意k8s.gcr.io/coredns/coredns:v1.8.0在阿里云的镜像路径有所不同registry.aliyuncs.com/google_containers/coredns:v1.8.0，以下脚本已做特殊处理\n1 2 3 4 5 6 7 8 a=($(kubeadm config images list)) #b=(${a[*]//k8s.gcr.io*\\//registry.aliyuncs.com/google_containers/}) b=($(kubeadm config images list --image-repository registry.aliyuncs.com/google_containers)) for ((i=0; i\u0026lt;${#a[*]}; i++)); do sudo docker tag \u0026#34;${b[i]}\u0026#34; \u0026#34;${a[i]}\u0026#34; sudo docker rmi \u0026#34;${b[i]}\u0026#34; done 现在可以愉快的kubeadm init了\n1 sudo kubeadm init --pod-network-cidr 10.244.0.0/16 kubeadm init成功后返回的信息，加入节点要用到此信息\nYour Kubernetes control-plane has initialized successfully! To start using your cluster, you need to run the following as a regular user: mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config Alternatively, if you are the root user, you can run: export KUBECONFIG=/etc/kubernetes/admin.conf You should now deploy a pod network to the cluster. Run \u0026quot;kubectl apply -f [podnetwork].yaml\u0026quot; with one of the options listed at: https://kubernetes.io/docs/concepts/cluster-administration/addons/ Then you can join any number of worker nodes by running the following on each as root: kubeadm join 172.34.169.111:6443 --token mhn6aa.xlz608qvtueq4rk8 \\ --discovery-token-ca-cert-hash sha256:3b73c9ec63b6e1d4402be7b267eca83e056d337e8e6675cf6390a47ef88f4fb0 初始化完成以后\n1 2 3 4 5 6 7 8 #普通用户使用kubectl mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config #root使用kubectl，可选，不建议 sudo cp /root/.bashrc{,.bak} echo \u0026#39;export KUBECONFIG=/etc/kubernetes/admin.conf\u0026#39; | sudo tee -a /root/.bashrc 安装网络插件，这里选择flannel\nkubernetes.io地址\ngithub地址\n1 2 #有可能要梯子访问 kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml 防火墙开放端口\n1 sudo iptables -A INPUT -p tcp -m state --state NEW -m multiport --dports 6443,2379:2380,10250,10257,10259 -j ACCEPT Node部署 拉取k8s.gcr.io的镜像，参考master部署\n略... 如果没有记录初始化后join相关信息，在master执行以下命令\n1 2 3 4 5 6 7 8 9 10 11 # 在master执行 # 查找token kubeadm token list # 查找discovery-token-ca-cert-hash openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2\u0026gt;/dev/null | \\ openssl dgst -sha256 -hex | sed \u0026#39;s/^.* //\u0026#39; # 如果24小时后已过期 kubeadm token create --print-join-command kubeadm join\n1 2 sudo kubeadm join 172.34.169.111:6443 --token mhn6aa.xlz608qvtueq4rk8 \\ --discovery-token-ca-cert-hash sha256:3b73c9ec63b6e1d4402be7b267eca83e056d337e8e6675cf6390a47ef88f4fb0 可选操作，重新运行coredns\n由于集群节点通常是按顺序初始化的，CoreDNS Pods 很可能都运行在第一个控制面节点上。 为了提供更高的可用性，请在加入至少一个新节点后使用以下命令，重新平衡 CoreDNS Pods\n1 kubectl -n kube-system rollout restart deployment coredns 防火墙开放端口\n1 sudo iptables -A INPUT -p tcp -m state --state NEW -m multiport --dports 10250,30000:32767 -j ACCEPT 如果需要删除节点\n1 kubectl drain node02 --delete-emptydir-data --force --ignore-daemonsets 1 2 #想删除的节点上执行 sudo kubeadm reset 1 kubectl delete node node02 ","permalink":"https://yanyong.cc/post/k8s/","tags":["k8s","kubernetes"],"title":"K8s(Kubernetes)集群安装"},{"categories":["Uncategorized"],"contents":"安装docker-ce 升级过testing的话，$(lsb_release -cs)可能会返回结果是sid，换成代号比如debian 10的buster避免此问题。\n1 2 3 4 5 6 7 8 9 sudo apt-get update sudo apt-get -y install apt-transport-https ca-certificates curl gnupg lsb-release curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg echo \u0026#34;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \\ $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update sudo apt-get -y install docker-ce docker-ce-cli containerd.io 参考链接：\nhttps://docs.docker.com/engine/install/debian/\n","permalink":"https://yanyong.cc/post/install-docker/","tags":["docker"],"title":"Debian Docker安装教程"},{"categories":["Linux","Debian"],"contents":"不推荐使用 不推荐使用！\n仅供参考！\n2025.3.29\n使用方法 安装curl 如果已有curl，可忽略此步骤。\n1 apt-get -y install curl 示例1 创建用户yanyong，设置FQDN为blog.yanyong.cc，设置ssh端口23422，设置阿里源，设置中国上海时区Asia/Shanghai。\n1 2 3 4 5 6 curl -fsSL https://raw.yanyong.cc/sh/debian10-init.sh | bash -s -- \\ --fqdn=blog.yanyong.cc \\ --user=yanyong \\ --port=23422 \\ --source=ali \\ --tz=Asia/Shanghai 执行结果，脚本已更新，此图可能与实际返回结果有所不同。\n示例2 创建用户testuser，成功创建用户会触发禁用root远程登录和禁用密码验证登录，如有需要启用root远程登录或密码验证登录，查看可选操作。\n1 curl -fsSL https://raw.yanyong.cc/sh/debian10-init.sh | bash -s user=testuser 示例3 apt-get dist-upgrade更新系统。\n1 curl -fsSL https://raw.yanyong.cc/sh/debian10-init.sh | bash -s distupgrade 如果跨版本更新系统，例如当前是debian 9，需要传入--source=...参数修改成debian 10的源，此示例为香港源。\n1 curl -fsSL https://raw.yanyong.cc/sh/debian10-init.sh | bash -s distupgrade source=hk 特别说明 查看帮助：curl -fsSL https://raw.yanyong.cc/sh/debian10-init.sh | bash -s help。参数的小横线--可以省略，如user=yanyong等同于--user=yanyong，参数顺序无要求。\n创建用户时，默认设置用户密码为随机生成的16位字符串，生成密钥对，保存在创建的用户家目录的.ssh目录下，并设置密钥密码为随机生成的8位字符串。也可以指定密码--password=PASSWORD（用户密码），--keyPasswd=PASSWORD（密钥密码）。\nhostname无需指定，取FQDN的最左边记录值为主机名（如FQDN为www.example.com，则hostname为www）。\nAPT源设置，--source=cn为中科大源，--source=hk为香港源，--source=us为美国源，--source=ali为阿里源，--source=aws为亚马逊源。修改源，会相应的修改NTP地址，已自动选择，无须指定。\n查看所有可用时区：timedatectl list-timezones。\n初始化脚本每次执行，无论有没有参数，默认都有以下处理：\napt-get upgrade更新系统。 安装man, sudo, vim, net-tools等。 自定义profile文件，优化历史命令记录，设置命令别名，如ll, lt等。 如果成功创建用户，就会禁用root远程登录和禁用密码验证登录。 启用iptables防火墙，开启ping，开启ssh的端口，开启80和443端口。 可选操作 如有需要，启用root远程登录。\n1 sudo sed -ri \u0026#39;s/^(PermitRootLogin )no$/\\1yes/\u0026#39; /etc/ssh/sshd_config \u0026amp;\u0026amp; sudo systemctl reload ssh 如有需要，启用密码验证登录。\n1 sudo sed -ri \u0026#39;s/^(PasswordAuthentication )no$/\\1yes/\u0026#39; /etc/ssh/sshd_config \u0026amp;\u0026amp; sudo systemctl reload ssh 如有需要，关闭iptables防火墙。\n1 2 3 sudo iptables -P INPUT ACCEPT sudo iptables -F INPUT # 可选 : | sudo tee /etc/iptables/rules.v4 # 可选，重启后也不会打开防火墙 脚本内容 链接：[脚本]\n参考链接 https://www.debian.org/mirror/list\nhttps://www.ntppool.org/zone/@\nhttps://en.wikipedia.org/wiki/Regular_expression\nhttps://www.wikiwand.com/en/Regular_expression\nhttps://man7.org/linux/man-pages/man1/bash.1.html\nhttps://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html\n","permalink":"https://yanyong.cc/post/debian10-init/","tags":["shell"],"title":"Debian 10初始化脚本"},{"categories":["Uncategorized"],"contents":"无CA签名 生成证书 1 2 3 openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout domain.key -out domain.crt \\ -addext \u0026#34;subjectAltName=DNS:www.example.com,DNS:*.example.com\u0026#34; \\ -subj \u0026#39;/C=CN/ST=Guangdong/L=Shenzhen/O=example/OU=IT/CN=example.com\u0026#39; 查看证书 1 openssl x509 -in domain.crt -noout -text nginx配置参考 1 2 ssl_certificate /path/domain.crt; ssl_certificate_key /path/domain.key; CA签名 生成签发机构证书 生成CA证书私钥 1 openssl genrsa -out ca.key 4096 生成CA证书 1 openssl req -x509 -new -nodes -sha512 -days 3650 -subj \u0026#34;/O=Example/CN=Example Certs C1\u0026#34; -key ca.key -out ca.crt 生成服务器证书 生成私钥 1 openssl genrsa -out example.com.key 4096 生成证书签名请求(CSR) 1 openssl req -sha512 -new -subj \u0026#34;/C=CN/ST=Guangdong/L=Shenzhen/O=Example/OU=IT/CN=example.com\u0026#34; -key example.com.key -out example.com.csr 生成x509 v3 扩展文件 1 2 3 4 5 6 7 8 9 10 11 tee v3.ext \u0026lt;\u0026lt;- EOF authorityKeyIdentifier=keyid,issuer basicConstraints=CA:FALSE keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment extendedKeyUsage = serverAuth subjectAltName = @alt_names [alt_names] DNS.1=www.example.com DNS.2=*.example.com EOF 生成证书 1 openssl x509 -req -sha512 -days 3650 -extfile v3.ext -CA ca.crt -CAkey ca.key -CAcreateserial -in example.com.csr -out example.com.crt 查看证书 1 openssl x509 -in example.com.crt -noout -text nginx配置参考 1 2 ssl_certificate /path/example.com.crt; ssl_certificate_key /path/example.com.key; 参考链接 https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs#generate-a-self-signed-certificate\nhttps://goharbor.io/docs/2.0.0/install-config/configure-https/\n","permalink":"https://yanyong.cc/post/openssl/","tags":["openssl","ssl"],"title":"使用openssl自签名ssl证书"},{"categories":["Uncategorized"],"contents":"官方文档入口\n配置harbor.yml 1 2 3 4 5 wget https://github.com/goharbor/harbor/releases/download/v2.5.0/harbor-offline-installer-v2.5.0.tgz tar zxf harbor-offline-installer-v2.5.0.tgz \u0026amp;\u0026amp; cd harbor cp harbor.yml.tmpl harbor.yml harbor.yml参考\n1 2 3 4 5 6 7 8 9 10 hostname: harbor.example.com http: port: 8080 external_url: https://harbor.example.com harbor_admin_password: Harbor12345 database: password: root123 max_idle_conns: 100 max_open_conns: 900 data_volume: /data/harbor 安装和运行 1 2 sudo ./install.sh --with-trivy sudo docker-compose up -d 如果修改harbor.yml后，需要执行prepare\n1 2 3 sudo ./prepare --with-trivy sudo docker-compose down -v sudo docker-compose up -d 配置nginx反代 略\n如果是自签名ssl证书(由私有CA签发)，使用此镜像仓库的docker需要信任ssl证书，信任CA即可\n1 2 sudo mkdir -p /etc/docker/certs.d/harbor.example.com sudo cp ca.crt /etc/docker/certs.d/harbor.example.com/ ","permalink":"https://yanyong.cc/post/harbor/","tags":["harbor"],"title":"Docker(docker-compose)安装harbor"},{"categories":["Uncategorized"],"contents":"官方文档入口\n运行gitlab 1 2 3 4 5 6 7 8 9 10 11 sudo docker run --detach \\ --hostname gitlab.example.com \\ --publish 880:80 --publish 22:22 \\ --name gitlab \\ --restart always \\ --env TZ=\u0026#39;Asia/Shanghai\u0026#39; \\ --volume /srv/gitlab/config:/etc/gitlab \\ --volume /srv/gitlab/logs:/var/log/gitlab \\ --volume /srv/gitlab/data:/var/opt/gitlab \\ --shm-size 256m \\ gitlab/gitlab-ce gitlab14版本开始，查看用户root的密码，14以前的版本在第一次访问gitlab时会要求设置root密码\n1 sudo docker exec gitlab grep \u0026#39;Password:\u0026#39; /etc/gitlab/initial_root_password 配置smtp https://docs.gitlab.com/omnibus/settings/smtp.html#smtp-settings\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 sudo tee -a /srv/gitlab/config/gitlab.rb \u0026lt;\u0026lt; EOF gitlab_rails[\u0026#39;smtp_enable\u0026#39;] = true gitlab_rails[\u0026#39;smtp_address\u0026#39;] = \u0026#34;smtp.exmail.qq.com\u0026#34; gitlab_rails[\u0026#39;smtp_port\u0026#39;] = 465 gitlab_rails[\u0026#39;smtp_user_name\u0026#39;] = \u0026#34;yanyong@example.com\u0026#34; gitlab_rails[\u0026#39;smtp_password\u0026#39;] = \u0026#34;123456\u0026#34; gitlab_rails[\u0026#39;smtp_authentication\u0026#39;] = \u0026#34;login\u0026#34; gitlab_rails[\u0026#39;smtp_enable_starttls_auto\u0026#39;] = true gitlab_rails[\u0026#39;smtp_tls\u0026#39;] = true gitlab_rails[\u0026#39;gitlab_email_from\u0026#39;] = \u0026#39;yanyong@example.com\u0026#39; gitlab_rails[\u0026#39;smtp_domain\u0026#39;] = \u0026#34;exmail.qq.com\u0026#34; EOF sudo docker exec gitlab gitlab-ctl reconfigure sudo docker exec gitlab gitlab-ctl restart 自动备份gitlab 1 2 3 4 5 6 7 #每天凌晨3点备份 echo \u0026#39;0 3 * * * root /usr/bin/docker exec gitlab gitlab-backup create CRON=1\u0026#39; | sudo tee /etc/cron.d/gitlabbackup #保留3天 echo \u0026#34;gitlab_rails[\u0026#39;backup_keep_time\u0026#39;] = 259200\u0026#34; | sudo tee -a /srv/gitlab/config/gitlab.rb # 3天，259200秒 sudo docker exec gitlab gitlab-ctl reconfigure sudo docker exec gitlab gitlab-ctl restart ","permalink":"https://yanyong.cc/post/gitlab/","tags":["gitlab"],"title":"Docker安装gitlab"},{"categories":["Uncategorized"],"contents":"创建用户和组 1 2 3 sudo groupadd sftp sudo useradd -s /bin/false -M -g sftp -G www-data sftpuser01 sudo chpasswd \u0026lt;\u0026lt;\u0026lt; \u0026#39;sftpuser01:123456\u0026#39; 配置ssh 修改/etc/ssh/sshd_config文件添加以下内容\n1 2 3 4 5 6 Match Group sftp ChrootDirectory /srv/www ForceCommand internal-sftp AllowTcpForwarding no X11Forwarding no PasswordAuthentication yes Match Group sftp：匹配所有属于sftp组的用户 ChrootDirectory：限制用户的根目录，目录属主必须是root，且权限不能高于755 ForceCommand internal-sftp：强制用户只允许使用SFTP AllowTcpForwarding no：禁止端口转发，增加安全性 X11Forwarding no：关闭图形界面的转发 PasswordAuthentication yes：允许密码认证 重载ssh\n1 sudo systemctl reload ssh ","permalink":"https://yanyong.cc/post/sftp/","tags":["sftp","chroot"],"title":"使用SFTP用户管理网站文件和资源"},{"categories":["Linux"],"contents":"安装acl 1 sudo apt-get -y install acl 把维护者用户user01加入到www-data组，www-data组为nginx运行身份www-data用户所属的组\n1 sudo usermod -aG www-data user01 如果是新建目录 设置目录所属组为www-data\n1 2 3 4 sudo chgrp www-data /srv/www/www.example.com # or sudo chown :www-data /srv/www/www.example.com 文件设置SGID位，文件会以文件所属的组的权限运行，而不是以执行者的组权限运行\n目录设置SGID位，在该目录中创建的文件或子目录会自动继承该目录的组，而不是继承创建者的组，子目录也会继承SGID位，子文件不会继承SGID\n组添加写权限(w)，让www-data用户组有写权限，所以用户user01对/srv/www/www.example.com有写权限\n组添加SGID位(s)，所以/srv/www/www.example.com下创建的子目录或文件的属主组都属于www-data组\n1 sudo chmod g+ws /srv/www/www.example.com 设置/srv/www/www.example.com目录的默认组ACL权限，此目录下新建的子目录或文件都会继承此ACL权限，文件不会继承执行权限(x)，新建的文件是664，新建的目录是775\n1 sudo setfacl -d -m g::rwx /srv/www/www.example.com 如果是已存在目录 如果/srv/www/www.example.com目录下已经有文件或目录，添加ACL权限\n1 2 3 4 sudo chgrp -R www-data /srv/www/www.example.com sudo chmod -R g+w /srv/www/www.example.com find /srv/www/www.example.com -type d -exec sudo chmod g+s {} \\; sudo setfacl -R -d -m g::rwx /srv/www/www.example.com 参考链接：\nhttps://linux.die.net/man/1/setfacl\nhttps://askubuntu.com/questions/979616/set-default-acl-for-new-files-and-directories\n","permalink":"https://yanyong.cc/post/acl/","tags":["acl","setfacl"],"title":"Linux系统多人维护网站，目录或文件属主和权限继承"},{"categories":["Uncategorized"],"contents":" 1 2 3 4 5 6 7 8 9 sudo apt-get install -y fail2ban cat \u0026lt;\u0026lt; EOF | sudo tee /etc/fail2ban/jail.d/sshd.local [sshd] enabled = true port = 23422 EOF sudo systemctl reload fail2ban ","permalink":"https://yanyong.cc/post/fail2ban/","tags":["fail2ban"],"title":"Fail2ban"},{"categories":["Linux","Debian"],"contents":"不建议升级testing 1 2 echo \u0026#39;deb http://ftp.us.debian.org/debian/ testing main\u0026#39; | sudo tee /etc/apt/sources.list.d/testing.list sudo apt-get update \u0026amp;\u0026amp; apt-get -y upgrade 参考链接 https://wiki.debian.org/DebianTesting\n","permalink":"https://yanyong.cc/post/upgrade-to-testing/","tags":["testing"],"title":"Debian升级Testing"}]